actor delay(int k) int operand_1 ==> int result :

  int data;
  int y;
  
  invariant tot0(result) = 0 ==> data = k
  invariant tot0(result) > 0 ==> data = prev(operand_1)
  invariant rd0(operand_1) = tot0(result)
  invariant tot0(result) > 0 ==> result[0] = k
  invariant (forall int idx :: every(result,idx,1,0) ==> result[idx] = operand_1[idx-1])
  
  initialize ==> do data := k end
  action operand_1:[i] ==> result:[y] 
  do 
  	y := data;
  	data := i;
  end
end

actor acc(int initial_sample) int operand_1 ==> int result :

	int buffer;
	int res;

    invariant tot0(result) = rd0(operand_1)+1

	initialize ==> result:[ buffer ]
	do
		buffer := initial_sample;
	end

	action operand_1:[ x ] ==> result:[ res ]
	do
		res := buffer + x;
		buffer := res;
	end

end

actor mul() int operand_1 , int operand_2 ==> int result :
	action operand_1:[ x ], operand_2:[ y ] ==> result:[ x * y ] end
end

actor add() int operand_1 , int operand_2 ==> int result :
	action operand_1:[ x ], operand_2:[ y ] ==> result:[ x + y ] end
end

actor sub() int operand_1 , int operand_2 ==> int result :
	action operand_1:[ x ], operand_2:[ y ] ==> result:[ x - y ] end
end

actor lshiftc(int constant) int operand_1 ==> int result :
	action operand_1:[ x ] ==> result:[ x << constant ] end
end

actor rshiftc(int constant) int operand_1 ==> int result :
	action operand_1:[ x ] ==> result:[ x >> constant ] end
end

actor split2 int in ==> int out1, int out2 :
	action in:[i] ==> out1:[i], out2:[i] end
end

actor split3 int in ==> int out1, int out2, int out3 :
	action in:[i] ==> out1:[i], out2:[i], out3:[i] end
end

actor split7 int in ==> int out1, int out2, int out3, int out4, int out5, int out6, int out7 :
	action in:[i] ==> out1:[i], out2:[i], out3:[i], out4:[i], out5:[i], out6:[i], out7:[i] end
end

network LMS int xk, int yk ==> int sink :

  action xk:1, yk:1 ==> sink:1 end
  
  invariant tokens(D1,1)
  invariant tokens(D2,1)
  invariant tokens(D3,1)
  invariant tokens(D4,1)
  invariant tokens(D5,1)
  invariant tokens(D6,1)
  invariant tokens(D7,1)
  
  entities
    delay_1 = delay(0);
    delay_2 = delay(0);
    delay_3 = delay(0);
    delay_4 = delay(0);
    delay_5 = delay(0);
    delay_6 = delay(0);
    mul_a1 = mul();
    mul_a2 = mul();
    mul_a3 = mul();
    mul_a4 = mul();
    mul_a5 = mul();
    mul_a6 = mul();
    mul_a7 = mul();
    add_a1 = add();
    add_a2 = add();
    add_a3 = add();
    add_a4 = add();
    add_a5 = add();
    add_a6 = add();
    mul_b1 = mul();
    mul_b2 = mul();
    mul_b3 = mul();
    mul_b4 = mul();
    mul_b5 = mul();
    mul_b6 = mul();
    mul_b7 = mul();
    acc_1 = acc(0);
    acc_2 = acc(0);
    acc_3 = acc(0);
    acc_4 = acc(0);
    acc_5 = acc(0);
    acc_6 = acc(0);
    acc_7 = acc(0);
    sub = sub();
    mul_mu = lshiftc(3);
    rshift = rshiftc(24);
    mul_mu_spl = split7();
    delay_1_spl = split3();
    delay_2_spl = split3();
    delay_3_spl = split3();
    delay_4_spl = split3();
    delay_5_spl = split3();
    delay_6_spl = split2();
    xk_spl = split3();
    sub_spl = split2();
  end
  
  structure
    
    xk --> xk_spl.in;
    xk_spl.out1 --> delay_1.operand_1;
    xk_spl.out2 --> mul_a1.operand_1;
    xk_spl.out3 --> mul_b1.operand_1;
    
    delay_1.result --> delay_1_spl.in;
    delay_1_spl.out1 --> delay_2.operand_1;
    delay_1_spl.out2 --> mul_a2.operand_1;
    delay_1_spl.out3 --> mul_b2.operand_1;
    
    delay_2.result --> delay_2_spl.in;
    delay_2_spl.out1 --> delay_3.operand_1;
    delay_2_spl.out2 --> mul_a3.operand_1;
    delay_2_spl.out3 --> mul_b3.operand_1;
    
    delay_3.result --> delay_3_spl.in;
    delay_3_spl.out1 --> delay_4.operand_1;
    delay_3_spl.out2 --> mul_a4.operand_1;
    delay_3_spl.out3 --> mul_b4.operand_1;
    
    delay_4.result --> delay_4_spl.in;
    delay_4_spl.out1 --> delay_5.operand_1;
    delay_4_spl.out2 --> mul_a5.operand_1;
    delay_4_spl.out3 --> mul_b5.operand_1;
    
    delay_5.result --> delay_5_spl.in;
    delay_5_spl.out1 --> delay_6.operand_1;
    delay_5_spl.out2 --> mul_a6.operand_1;
    delay_5_spl.out3 --> mul_b6.operand_1;
    
    delay_6.result --> delay_6_spl.in;
    delay_6_spl.out1 --> mul_a7.operand_1;
    delay_6_spl.out2 --> mul_b7.operand_1;
    
    add_a1.result --> add_a2.operand_2;
    add_a2.result --> add_a3.operand_2;
    mul_b1.result --> add_a1.operand_2;
    mul_b2.result --> add_a1.operand_1;
    mul_b3.result --> add_a2.operand_1;
    mul_b4.result --> add_a3.operand_1;
    add_a3.result --> add_a4.operand_2;
    mul_b5.result --> add_a4.operand_1;
    mul_b6.result --> add_a5.operand_1;
    add_a4.result --> add_a5.operand_2;
    add_a5.result --> add_a6.operand_2;
    mul_b7.result --> add_a6.operand_1;
    
    mul_mu.result --> mul_mu_spl.in;
    mul_mu_spl.out1 --> mul_a7.operand_2;
    mul_mu_spl.out2 --> mul_a6.operand_2;
    mul_mu_spl.out3 --> mul_a5.operand_2;
    mul_mu_spl.out4 --> mul_a4.operand_2;
    mul_mu_spl.out5 --> mul_a3.operand_2;
    mul_mu_spl.out6 --> mul_a2.operand_2;
    mul_mu_spl.out7 --> mul_a1.operand_2;
    
    mul_a1.result --> acc_1.operand_1;
    D1: acc_1.result --> mul_b1.operand_2;
    mul_a2.result --> acc_2.operand_1;
    D2: acc_2.result --> mul_b2.operand_2;
    mul_a3.result --> acc_3.operand_1;
    D3: acc_3.result --> mul_b3.operand_2;
    mul_a4.result --> acc_4.operand_1;
    D4: acc_4.result --> mul_b4.operand_2;
    mul_a5.result --> acc_5.operand_1;
    D5: acc_5.result --> mul_b5.operand_2;
    mul_a6.result --> acc_6.operand_1;
    D6: acc_6.result --> mul_b6.operand_2;
    mul_a7.result --> acc_7.operand_1;
    D7: acc_7.result --> mul_b7.operand_2;
    
    sub.result --> sub_spl.in;
    sub_spl.out1 --> mul_mu.operand_1;
    sub_spl.out2 --> sink;
    
    add_a6.result --> rshift.operand_1;
    rshift.result --> sub.operand_2;
    yk --> sub.operand_1;
  end
end

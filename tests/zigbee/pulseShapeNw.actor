actor pulseShape() 
// Inputs:
bv(size=8) symb,           // I-Q symbols from QPSK modulator 
bv(size=8) len,       		// Payload length
bv(size=14) body_iterations_in,
bv(size=14) body_index_in,
int St_in
// Outputs:
==> 
bool done,          // Flag to terminate
bv(size=8) hsp,             // Half-sine pulse samples
bv(size=14) body_iterations_out,
bv(size=14) body_index_out,
int St_out
:

	bv(size=8) symb_mem;     // Temporary storage for symbol values during transmission
                                    // the current hsp. range: [0...8] 
	bv(size=8) body_iterations;   // Number of times the "body" part of the transmission has to be repeated 
	bv(size=8) body_index;        // Number of times the "body" part of the transmission has been repeated

    bv(size=8) FILT_COEFF0 = 0x00;         // Static filter coefficients for half-sine pulse generation
    bv(size=8) FILT_COEFF1 = 0x31;
    bv(size=8) FILT_COEFF2 = 0x5a;
    bv(size=8) FILT_COEFF3 = 0x76;
    bv(size=8) FILT_COEFF4 = 0x7f;
    
    List(type: bv(size=8), size=16) hsps

	// fixed-point multiplication with shift
	function mul8( bv(size=8) x, bv(size=8) y ) --> bv(size=8) :
		(x * y) >> 7
	end
	
	initialize 
		==>
		body_iterations_out:[int2bv(0,14)],
		body_index_out:[int2bv(0,14)],
		St_out:[0]
	end

	// init action
	// Fired when payload length is known
	init: action 
			len:[len_in],
			body_iterations_in:[body_iterations],
			body_index_in:[body_index],
			St_in:[St]
		==>
			body_iterations_out:[bvconcat(int2bv(0,6),len_in) * int2bv(32,14)],
			body_index_out:[int2bv(0,14)],
			St_out:[1]
	guard St = 0
	do
		symb_mem := 0x7F;
	end

	// tx-body action
	// Consumes 2, produces 16 samples
	tx_body: action 
		symb:[ symb_1, symb_2 ],
		body_iterations_in:[body_iterations],
		body_index_in:[body_index],
		St_in:[St]
		==> 
		hsp:[ hsps[0],hsps[1],hsps[2],hsps[3],hsps[4],hsps[5],hsps[6],hsps[7],
			hsps[8],hsps[9],hsps[10],hsps[11],hsps[12],hsps[13],hsps[14],hsps[15] ],
		body_iterations_out:[body_iterations],
		body_index_out:[body_index + int2bv(1,14)],
		St_out:[1]
	guard
		St = 1 &&
		body_index < body_iterations
	do	
		hsps[0] := mul8(FILT_COEFF0, symb_1);
		hsps[1] := mul8(FILT_COEFF4, symb_mem);
	
		hsps[2] := mul8(FILT_COEFF1, symb_1);
		hsps[3] := mul8(FILT_COEFF3, symb_mem);
	
		hsps[4] := mul8(FILT_COEFF2, symb_1);
		hsps[5] := mul8(FILT_COEFF2, symb_mem);
	
		hsps[6] := mul8(FILT_COEFF3, symb_1);
		hsps[7] := mul8(FILT_COEFF1, symb_mem);
	
		hsps[8] := mul8(FILT_COEFF4, symb_1);
		hsps[9] := mul8(FILT_COEFF0, symb_2);
	
		hsps[10] := mul8(FILT_COEFF3, symb_1);
		hsps[11] := mul8(FILT_COEFF1, symb_2);
	
		hsps[12] := mul8(FILT_COEFF2, symb_1);
		hsps[13] := mul8(FILT_COEFF2, symb_2);
	
		hsps[14] := mul8(FILT_COEFF1, symb_1);
		hsps[15] := mul8(FILT_COEFF3, symb_2);
	
		symb_mem := symb_2;
	end

	// tx_tail action
	// Finalizes the transmission signal with the fixed 0x7F value
	tx_tail: action 
		body_iterations_in:[body_iterations],
		body_index_in:[body_index],
		St_in:[St]
		==> 
		hsp:[ hsps[0],hsps[1],hsps[2],hsps[3],hsps[4],hsps[5],hsps[6],hsps[7] ], 
		done: [ true ],
		body_iterations_out:[body_iterations],
		body_index_out:[body_index],
		St_out:[0]
	guard
		St = 1 &&
		body_index = body_iterations
	do
		hsps[0] := mul8(FILT_COEFF0, 0x7F);
		hsps[1] := mul8(FILT_COEFF4, symb_mem);
	
		hsps[2] := mul8(FILT_COEFF1, 0x7F);
		hsps[3] := mul8(FILT_COEFF3, symb_mem);
	
		hsps[4] := mul8(FILT_COEFF2, 0x7F);
		hsps[5] := mul8(FILT_COEFF2, symb_mem);
	
		hsps[6] := mul8(FILT_COEFF3, 0x7F);
		hsps[7] := mul8(FILT_COEFF1, symb_mem);
		
	end
	
end

network pulseShapeNw bv(size=8) symb, bv(size=8) len ==> bool done, bv(size=8) hsp :
  
  action symb:576, len:1 ==> done:1, hsp:4616
    requires len[@] = 0x09
  end
  
  chinvariant @(symb) = 576*@(done)
  chinvariant @(len) = @(done)
  chinvariant @(hsp) = 4616*@(len)
  
  // Feedback loops
  invariant tokens(body_iterations,1) && tokens(body_index,1) && tokens(St,1)
  invariant St[next] = 0
  chinvariant tokens(body_iterations,1) && tokens(body_index,1) && tokens(St,1)
  
  // State is 0, 1 or, body_index between 0 and body_iterations
  chinvariant St[next] = 0 || St[next] = 1
  chinvariant int2bv(0,14) <= body_index[next] && body_index[next] <= body_iterations[next]
  
  chinvariant tot@(len) = 1 ==> rate(symb) = 64*bv2int(len[@])
  chinvariant rd@(len) = 1 ==> (
    body_iterations[next] = bvconcat(int2bv(0,6),len[@]) * int2bv(32,14) &&
    2*bv2int(body_iterations[next]) = rate(symb) &&
    rd@(symb)  = 2*bv2int(body_index[next])
  )
   
  chinvariant St[next] = 1 ==> (
    rd@(symb)  = 2*bv2int(body_index[next]) &&
    tot@(hsp)  = 16*bv2int(body_index[next]) &&
    16*rd@(symb) = 2*tot@(hsp) &&
    tot@(done) = 0 &&
    rd@(len)   = 1
  )

  chinvariant St[next] = 0 && rd@(len) = 1 ==> (
    rd@(symb)  = 2*bv2int(body_iterations[next]) &&
    tot@(hsp)  = 16*bv2int(body_iterations[next])+8 &&
    16*rd@(symb) = 2*(tot@(hsp)-8) &&
    tot@(done) = 1
  )

  chinvariant St[next] = 0 && rd@(len) = 0 ==> (
    rd@(symb)  = 0 &&
    tot@(hsp)  = 0 &&
    tot@(done) = 0
  )
  
  entities
    a = pulseShape()
  end
  
  structure 
    in_symb:  symb --> a.symb;
    in_len:   len --> a.len;
    body_iterations:  a.body_iterations_out --> a.body_iterations_in;
    body_index:  a.body_index_out --> a.body_index_in;
    St:     a.St_out --> a.St_in;
    out_hsp:   a.hsp --> hsp;
    out_done:    a.done --> done;
  end
  
end



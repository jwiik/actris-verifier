actor headerAdd()
// Inputs: 
uint(size=8) pl_bits    // payload bits from upper layer 
// Outputs:
==> 
uint(size=8) data,      // header + payload data
uint(size=8) len        // header + payload length
:
    // variable to hold payload length
	uint(size=8) octet_count;
	
	// variable to count processed payload octets
	uint(size=8) octet_index;

	// static variable
	int HEADER_LEN = 5;
	
	// the standard-defined header content
	Map(bv(size=8) -> bv(size=8)) Header; //= [0, 0, 0, 0, 167];
	
	uint(size=8) data_out;
	
	int St;
	
	invariant 0x00 <= octet_index
	invariant octet_index <= octet_count
	invariant octet_count = 0x0E
	
	invariant St = 1 ==> octet_index <= 0x05
	invariant St = 2 ==> 0x05 < octet_index	
	invariant 0 <= St && St <= 2
	

	// init action
	// initializes the data source
	initialize ==>
	do
		octet_index := 0x00;
		octet_count := 0x0E; //int2bv(0,8);
		St := 0;
	end
	
	// get_data_len action
	// wait for packet to be available
	// send payload length information to pulse shaper
	get_data_len: action pl_bits:[ bits_in ] ==> len: [ octet_count ]
	requires bits_in = 0x08
	guard St = 0
	do
		octet_index := 0x00;
		octet_count := bits_in + int2bv(5,8) + 0x01;
		St := 1;
	end

	// send_header action
	// transmit one octet belonging to header
	send_header: action ==> data:[ data_out ]
	guard
		octet_index < int2bv(5,8) &&
		St = 1
	do
		data_out := Header[octet_index];
		octet_index := octet_index + 0x01;
		St := 1;
	end

	// send_length action
	// transmit payload length in data as part of data frame
	send_length: action ==> data:[ octet_count - int2bv(5,8) - 0x01 ]
	guard 
		octet_index = int2bv(5,8) &&
		St = 1
	do
		octet_index := octet_index + 0x01;
		St := 2;
	end

	// send_payload_octet
	// transmit one octet of the data coming from higher layer
	send_payload_octet: action pl_bits:[ bits_in ] ==> data:[ bits_in ]
	guard
		octet_index < octet_count &&
		St = 2
	do
		octet_index := octet_index + 0x01;
		St := 2;
	end

	// done action
	// transition back to waiting for a new data frame
	done: action ==>
	guard
		octet_index = octet_count &&
		St = 2
	do
		St := 0;
	end

	schedule fsm s_idle :
		s_idle ( get_data_len ) --> s_header;
		s_header ( send_header ) --> s_header;
		s_header ( send_length ) --> s_payload;
		s_payload ( send_payload_octet ) --> s_payload;
		s_payload ( done ) --> s_idle;
	end

	priority
		send_header > send_length;
		send_payload_octet > done
	end
end
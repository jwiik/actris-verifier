@sdf
actor Add int in1, int in2 ==> int out :
  action in1:[i], in2:[j] ==> out:[i+j] end
end

@sdf
actor Sub int in1, int in2 ==> int out :
  action in1:[i], in2:[j] ==> out:[i-j] end
end

actor Select bool sel, int in1, int in2 ==> int out :
  action sel:[t], in1:[i], in2:[j] ==> out:[i] 
    guard t
  end
  action sel:[t], in1:[i], in2:[j]  ==> out:[j] 
    guard !t
  end
end

@sdf
actor Delay(int k) int in ==> int out :
  initialize ==> out:[k] end
  action in:[i] ==> out:[i] end
end

@sdf
actor Split int in ==> int out1, int out2 :
  action in:[i] ==> out1:[i], out2:[i] end
end

network Net int in, bool mode ==> int out :
  
  action in:[x], mode:[t] ==> out:[y]
    requires (forall int ind :: 0 <= ind && ind < tot(a) ==> 0 < a[ind])
    //ensures (forall int ind :: 0 <= ind && ind < tot(k) && j[ind] ==> a[ind] <= k[ind])
    //ensures (forall int ind :: 0 <= ind && ind < tot(k) && !j[ind] ==> k[ind] <= a[ind])
  end
  
  invariant tokens(d,1) && tokens(h,1)
  invariant 0 <= next(d)
  invariant 0 <= next(h)
  
  chinvariant 0 <= d[0]
  chinvariant 0 <= h[0]
  chinvariant tot(k) = rd(f)
  chinvariant tot(k) = rd(i)
  chinvariant tot(k) = rd(j)
  chinvariant (forall int ind :: 0 <= ind && ind < tot(k) ==> !j[ind] ==> k[ind] == i[ind])
  chinvariant (forall int ind :: 0 <= ind && ind < tot(k) ==> j[ind] ==> k[ind] == f[ind])
  
  entities
    spl = Split();
    add = Add();
    del = Delay(0);
    sub = Sub();
    sel = Select();
  end
  
  structure
    a: in --> spl.in;
    b: spl.out1 --> add.in1;
    c: spl.out2 --> sub.in1;
    d: del.out --> add.in2;
    f: add.out --> sel.in1;
    g: add.out --> del.in;
    h: del.out --> sub.in2;
    i: sub.out --> sel.in2;
    j: mode --> sel.sel;
    k: sel.out --> out;
  end

end
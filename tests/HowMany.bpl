// ---------------------------------------------------------------
// -- Types and global variables ---------------------------------
// ---------------------------------------------------------------
type Ref;
type Chan a;
type Field a;
type Actor;
type CType = <a>[Chan a]int;
type MType = <a>[Chan a][int]a;
type Obj = <a>[Field a]a;
type HType = [Ref]Obj;

var M: MType;
var C: CType;
var R: CType;
var I: CType;

var H: HType;

const unique this#: Actor;

function AT#Min(x:int, y: int): int { if x <= y then x else y }

// ---------------------------------------------------------------
// -- End of prelude ---------------------------------------------
// ---------------------------------------------------------------

procedure HowMany#init#0()
  modifies C, R, M, I, H;
{
  var In: Chan (int);
  var Cin: Chan (int);
  var Ain: Chan (int);
  var Out: Chan (bool);
  var Cout: Chan (int);
  var Aout: Chan (int);
  assume (In != Cin) && (In != Ain) && (In != Cout) && (In != Aout) && (Cin != Ain) && (Cin != Cout) && (Cin != Aout) && (Ain != Cout) && (Ain != Aout) && (Cout != Aout);
  assume R[In] == 0;
  assume R[Cin] == 0;
  assume R[Ain] == 0;
  assume C[Out] == 0;
  assume C[Cout] == 0;
  assume C[Aout] == 0;
  M[Cout][C[Cout]] := 0;
  C[Cout] := C[Cout] + 1;
  M[Aout][C[Aout]] := 0;
  C[Aout] := C[Aout] + 1;
}
procedure HowMany#anon$1#1()
  modifies C, R, M, I, H;
{
  var In: Chan (int);
  var Cin: Chan (int);
  var Ain: Chan (int);
  var Out: Chan (bool);
  var Cout: Chan (int);
  var Aout: Chan (int);
  var In#0: int;
  var Cin#0: int;
  var Ain#0: int;
  assume (In != Cin) && (In != Ain) && (In != Cout) && (In != Aout) && (Cin != Ain) && (Cin != Cout) && (Cin != Aout) && (Ain != Cout) && (Ain != Aout) && (Cout != Aout);
  assume 0 <= R[In];
  assume 0 <= R[Cin];
  assume 0 <= R[Ain];
  assume 0 <= C[Out];
  assume 0 <= C[Cout];
  assume 0 <= C[Aout];
  In#0 := M[In][R[In]];
  R[In] := R[In] + 1;
  Cin#0 := M[Cin][R[Cin]];
  R[Cin] := R[Cin] + 1;
  Ain#0 := M[Ain][R[Ain]];
  R[Ain] := R[Ain] + 1;
  assume 0 <= In#0;
  assume Cin#0 == Ain#0;
  M[Cout][C[Cout]] := 0;
  C[Cout] := C[Cout] + 1;
  M[Aout][C[Aout]] := In#0;
  C[Aout] := C[Aout] + 1;
}
procedure HowMany#anon$2#2()
  modifies C, R, M, I, H;
{
  var In: Chan (int);
  var Cin: Chan (int);
  var Ain: Chan (int);
  var Out: Chan (bool);
  var Cout: Chan (int);
  var Aout: Chan (int);
  var In#0: int;
  var Cin#0: int;
  var Ain#0: int;
  assume (In != Cin) && (In != Ain) && (In != Cout) && (In != Aout) && (Cin != Ain) && (Cin != Cout) && (Cin != Aout) && (Ain != Cout) && (Ain != Aout) && (Cout != Aout);
  assume 0 <= R[In];
  assume 0 <= R[Cin];
  assume 0 <= R[Ain];
  assume 0 <= C[Out];
  assume 0 <= C[Cout];
  assume 0 <= C[Aout];
  Cin#0 := M[Cin][R[Cin]];
  R[Cin] := R[Cin] + 1;
  Ain#0 := M[Ain][R[Ain]];
  R[Ain] := R[Ain] + 1;
  assume Cin#0 < Ain#0;
  M[Out][C[Out]] := true;
  C[Out] := C[Out] + 1;
  M[Cout][C[Cout]] := Cin#0 + 1;
  C[Cout] := C[Cout] + 1;
  M[Aout][C[Aout]] := Ain#0;
  C[Aout] := C[Aout] + 1;
}
procedure HowMany##GuardWD#3()
  modifies C, R, M, I, H;
{
  var In: Chan (int);
  var Cin: Chan (int);
  var Ain: Chan (int);
  var Out: Chan (bool);
  var Cout: Chan (int);
  var Aout: Chan (int);
  var In#0: int;
  var Cin#0: int;
  var Ain#0: int;
  assume (In != Cin) && (In != Ain) && (In != Cout) && (In != Aout) && (Cin != Ain) && (Cin != Cout) && (Cin != Aout) && (Ain != Cout) && (Ain != Aout) && (Cout != Aout);
  assert {:msg "1.1: The actions 'anon$1' and 'anon$2' of actor 'HowMany' might not have mutually exclusive guards (#0)"} !(true && (1 <= (C[In] - R[In])) && (1 <= (C[Cin] - R[Cin])) && (1 <= (C[Ain] - R[Ain])) && (Cin#0 == Ain#0) && true && (1 <= (C[Cin] - R[Cin])) && (1 <= (C[Ain] - R[Ain])) && (Cin#0 < Ain#0));
}
procedure HowManyNet#init#4()
  modifies C, R, M, I, H;
{
  var HowManyNet#a: Actor;
  var HowManyNet#input: Chan (int);
  var HowManyNet#curr: Chan (int);
  var HowManyNet#amount: Chan (int);
  var HowManyNet#output: Chan (bool);
  assume (HowManyNet#input != HowManyNet#curr) && (HowManyNet#input != HowManyNet#amount) && (HowManyNet#curr != HowManyNet#amount);
  assume 0 <= I[HowManyNet#input];
  assume I[HowManyNet#input] <= R[HowManyNet#input];
  assume R[HowManyNet#input] <= C[HowManyNet#input];
  assume 0 <= I[HowManyNet#curr];
  assume I[HowManyNet#curr] <= R[HowManyNet#curr];
  assume R[HowManyNet#curr] <= C[HowManyNet#curr];
  assume 0 <= I[HowManyNet#amount];
  assume I[HowManyNet#amount] <= R[HowManyNet#amount];
  assume R[HowManyNet#amount] <= C[HowManyNet#amount];
  assume 0 <= I[HowManyNet#output];
  assume I[HowManyNet#output] <= R[HowManyNet#output];
  assume R[HowManyNet#output] <= C[HowManyNet#output];
  assume I[HowManyNet#output] == R[HowManyNet#output];
  assume C[HowManyNet#input] == 0;
  assume R[HowManyNet#input] == 0;
  assume C[HowManyNet#curr] == 0;
  assume R[HowManyNet#curr] == 0;
  assume C[HowManyNet#amount] == 0;
  assume R[HowManyNet#amount] == 0;
  assume C[HowManyNet#output] == 0;
  assume R[HowManyNet#output] == 0;
  M[HowManyNet#curr][C[HowManyNet#curr]] := 0;
  C[HowManyNet#curr] := C[HowManyNet#curr] + 1;
  M[HowManyNet#amount][C[HowManyNet#amount]] := 0;
  C[HowManyNet#amount] := C[HowManyNet#amount] + 1;
  assert {:msg "35.15: Initialization of network 'HowManyNet' might not establish the channel invariant (#1)"} ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assert {:msg "36.15: Initialization of network 'HowManyNet' might not establish the channel invariant (#2)"} M[HowManyNet#curr][R[HowManyNet#curr]] <= M[HowManyNet#amount][R[HowManyNet#amount]];
  assert {:msg "39.15: Initialization of network 'HowManyNet' might not establish the channel invariant (#3)"} ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assert {:msg "42.15: Initialization of network 'HowManyNet' might not establish the channel invariant (#4)"} ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (M[HowManyNet#input][I[HowManyNet#input]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assert {:msg "45.15: Initialization of network 'HowManyNet' might not establish the channel invariant (#5)"} (C[HowManyNet#input] - I[HowManyNet#input]) <= 1;
  assert {:msg "48.15: Initialization of network 'HowManyNet' might not establish the channel invariant (#6)"} ((C[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (0 <= M[HowManyNet#input][I[HowManyNet#input]]);
  assert {:msg "51.15: Initialization of network 'HowManyNet' might not establish the channel invariant (#7)"} ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == 0);
  assert {:msg "54.15: Initialization of network 'HowManyNet' might not establish the channel invariant (#8)"} ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == M[HowManyNet#curr][R[HowManyNet#curr]]);
  I := R;
  assert {:msg "31.13: Initialization of network 'HowManyNet' might not establish the network invariant (#9)"} ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assert {:msg "32.13: Initialization of network 'HowManyNet' might not establish the network invariant (#10)"} M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]];
  assert {:msg "Initialization of network 'HowManyNet' might not establish the network invariant: Unread tokens might be left on channel input (#11)"} (C[HowManyNet#input] - R[HowManyNet#input]) == 0;
  assert {:msg "Initialization of network 'HowManyNet' might not establish the network invariant: Unread tokens might be left on channel output (#12)"} (C[HowManyNet#output] - R[HowManyNet#output]) == 0;
}
procedure HowManyNet##HowMany#anon$1#5()
  modifies C, R, M, I, H;
{
  var HowManyNet#a: Actor;
  var HowManyNet#input: Chan (int);
  var HowManyNet#curr: Chan (int);
  var HowManyNet#amount: Chan (int);
  var HowManyNet#output: Chan (bool);
  var In#i: int;
  var Cin#curr: int;
  var Ain#amount: int;
  assume (HowManyNet#input != HowManyNet#curr) && (HowManyNet#input != HowManyNet#amount) && (HowManyNet#curr != HowManyNet#amount);
  assume 0 <= I[HowManyNet#input];
  assume I[HowManyNet#input] <= R[HowManyNet#input];
  assume R[HowManyNet#input] <= C[HowManyNet#input];
  assume 0 <= I[HowManyNet#curr];
  assume I[HowManyNet#curr] <= R[HowManyNet#curr];
  assume R[HowManyNet#curr] <= C[HowManyNet#curr];
  assume 0 <= I[HowManyNet#amount];
  assume I[HowManyNet#amount] <= R[HowManyNet#amount];
  assume R[HowManyNet#amount] <= C[HowManyNet#amount];
  assume 0 <= I[HowManyNet#output];
  assume I[HowManyNet#output] <= R[HowManyNet#output];
  assume R[HowManyNet#output] <= C[HowManyNet#output];
  assume I[HowManyNet#output] == R[HowManyNet#output];
  assume ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assume M[HowManyNet#curr][R[HowManyNet#curr]] <= M[HowManyNet#amount][R[HowManyNet#amount]];
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (M[HowManyNet#input][I[HowManyNet#input]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assume (C[HowManyNet#input] - I[HowManyNet#input]) <= 1;
  assume ((C[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (0 <= M[HowManyNet#input][I[HowManyNet#input]]);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == 0);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == M[HowManyNet#curr][R[HowManyNet#curr]]);
  assume ((M[HowManyNet#input][I[HowManyNet#input]] == 1) || (M[HowManyNet#input][I[HowManyNet#input]] == 2)) || (M[HowManyNet#input][I[HowManyNet#input]] == 100);
  assume (1 <= (C[HowManyNet#input] - R[HowManyNet#input])) && (1 <= (C[HowManyNet#curr] - R[HowManyNet#curr])) && (1 <= (C[HowManyNet#amount] - R[HowManyNet#amount])) && (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  In#i := M[HowManyNet#input][R[HowManyNet#input]];
  R[HowManyNet#input] := R[HowManyNet#input] + 1;
  Cin#curr := M[HowManyNet#curr][R[HowManyNet#curr]];
  R[HowManyNet#curr] := R[HowManyNet#curr] + 1;
  Ain#amount := M[HowManyNet#amount][R[HowManyNet#amount]];
  R[HowManyNet#amount] := R[HowManyNet#amount] + 1;
  assert {:msg "7.14: Precondition might not hold for instance at 57.5 (#13)"} 0 <= In#i;
  M[HowManyNet#curr][C[HowManyNet#curr]] := 0;
  C[HowManyNet#curr] := C[HowManyNet#curr] + 1;
  M[HowManyNet#amount][C[HowManyNet#amount]] := In#i;
  C[HowManyNet#amount] := C[HowManyNet#amount] + 1;
  assert {:msg "35.15: Action at 5.3 ('anon$1') for actor instance 'a' might not preserve the channel invariant (#14)"} ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assert {:msg "36.15: Action at 5.3 ('anon$1') for actor instance 'a' might not preserve the channel invariant (#15)"} M[HowManyNet#curr][R[HowManyNet#curr]] <= M[HowManyNet#amount][R[HowManyNet#amount]];
  assert {:msg "39.15: Action at 5.3 ('anon$1') for actor instance 'a' might not preserve the channel invariant (#16)"} ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assert {:msg "42.15: Action at 5.3 ('anon$1') for actor instance 'a' might not preserve the channel invariant (#17)"} ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (M[HowManyNet#input][I[HowManyNet#input]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assert {:msg "45.15: Action at 5.3 ('anon$1') for actor instance 'a' might not preserve the channel invariant (#18)"} (C[HowManyNet#input] - I[HowManyNet#input]) <= 1;
  assert {:msg "48.15: Action at 5.3 ('anon$1') for actor instance 'a' might not preserve the channel invariant (#19)"} ((C[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (0 <= M[HowManyNet#input][I[HowManyNet#input]]);
  assert {:msg "51.15: Action at 5.3 ('anon$1') for actor instance 'a' might not preserve the channel invariant (#20)"} ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == 0);
  assert {:msg "54.15: Action at 5.3 ('anon$1') for actor instance 'a' might not preserve the channel invariant (#21)"} ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == M[HowManyNet#curr][R[HowManyNet#curr]]);
}
procedure HowManyNet##HowMany#anon$2#6()
  modifies C, R, M, I, H;
{
  var HowManyNet#a: Actor;
  var HowManyNet#input: Chan (int);
  var HowManyNet#curr: Chan (int);
  var HowManyNet#amount: Chan (int);
  var HowManyNet#output: Chan (bool);
  var Cin#curr: int;
  var Ain#amount: int;
  assume (HowManyNet#input != HowManyNet#curr) && (HowManyNet#input != HowManyNet#amount) && (HowManyNet#curr != HowManyNet#amount);
  assume 0 <= I[HowManyNet#input];
  assume I[HowManyNet#input] <= R[HowManyNet#input];
  assume R[HowManyNet#input] <= C[HowManyNet#input];
  assume 0 <= I[HowManyNet#curr];
  assume I[HowManyNet#curr] <= R[HowManyNet#curr];
  assume R[HowManyNet#curr] <= C[HowManyNet#curr];
  assume 0 <= I[HowManyNet#amount];
  assume I[HowManyNet#amount] <= R[HowManyNet#amount];
  assume R[HowManyNet#amount] <= C[HowManyNet#amount];
  assume 0 <= I[HowManyNet#output];
  assume I[HowManyNet#output] <= R[HowManyNet#output];
  assume R[HowManyNet#output] <= C[HowManyNet#output];
  assume I[HowManyNet#output] == R[HowManyNet#output];
  assume ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assume M[HowManyNet#curr][R[HowManyNet#curr]] <= M[HowManyNet#amount][R[HowManyNet#amount]];
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (M[HowManyNet#input][I[HowManyNet#input]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assume (C[HowManyNet#input] - I[HowManyNet#input]) <= 1;
  assume ((C[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (0 <= M[HowManyNet#input][I[HowManyNet#input]]);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == 0);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == M[HowManyNet#curr][R[HowManyNet#curr]]);
  assume ((M[HowManyNet#input][I[HowManyNet#input]] == 1) || (M[HowManyNet#input][I[HowManyNet#input]] == 2)) || (M[HowManyNet#input][I[HowManyNet#input]] == 100);
  assume (1 <= (C[HowManyNet#curr] - R[HowManyNet#curr])) && (1 <= (C[HowManyNet#amount] - R[HowManyNet#amount])) && (M[HowManyNet#curr][R[HowManyNet#curr]] < M[HowManyNet#amount][R[HowManyNet#amount]]);
  Cin#curr := M[HowManyNet#curr][R[HowManyNet#curr]];
  R[HowManyNet#curr] := R[HowManyNet#curr] + 1;
  Ain#amount := M[HowManyNet#amount][R[HowManyNet#amount]];
  R[HowManyNet#amount] := R[HowManyNet#amount] + 1;
  M[HowManyNet#output][C[HowManyNet#output]] := true;
  C[HowManyNet#output] := C[HowManyNet#output] + 1;
  M[HowManyNet#curr][C[HowManyNet#curr]] := Cin#curr + 1;
  C[HowManyNet#curr] := C[HowManyNet#curr] + 1;
  M[HowManyNet#amount][C[HowManyNet#amount]] := Ain#amount;
  C[HowManyNet#amount] := C[HowManyNet#amount] + 1;
  assert {:msg "35.15: Action at 10.3 ('anon$2') for actor instance 'a' might not preserve the channel invariant (#22)"} ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assert {:msg "36.15: Action at 10.3 ('anon$2') for actor instance 'a' might not preserve the channel invariant (#23)"} M[HowManyNet#curr][R[HowManyNet#curr]] <= M[HowManyNet#amount][R[HowManyNet#amount]];
  assert {:msg "39.15: Action at 10.3 ('anon$2') for actor instance 'a' might not preserve the channel invariant (#24)"} ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assert {:msg "42.15: Action at 10.3 ('anon$2') for actor instance 'a' might not preserve the channel invariant (#25)"} ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (M[HowManyNet#input][I[HowManyNet#input]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assert {:msg "45.15: Action at 10.3 ('anon$2') for actor instance 'a' might not preserve the channel invariant (#26)"} (C[HowManyNet#input] - I[HowManyNet#input]) <= 1;
  assert {:msg "48.15: Action at 10.3 ('anon$2') for actor instance 'a' might not preserve the channel invariant (#27)"} ((C[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (0 <= M[HowManyNet#input][I[HowManyNet#input]]);
  assert {:msg "51.15: Action at 10.3 ('anon$2') for actor instance 'a' might not preserve the channel invariant (#28)"} ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == 0);
  assert {:msg "54.15: Action at 10.3 ('anon$2') for actor instance 'a' might not preserve the channel invariant (#29)"} ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == M[HowManyNet#curr][R[HowManyNet#curr]]);
}
procedure HowManyNet#anon$3#input#In#7()
  modifies C, R, M, I, H;
{
  var HowManyNet#a: Actor;
  var HowManyNet#input: Chan (int);
  var HowManyNet#curr: Chan (int);
  var HowManyNet#amount: Chan (int);
  var HowManyNet#output: Chan (bool);
  assume (HowManyNet#input != HowManyNet#curr) && (HowManyNet#input != HowManyNet#amount) && (HowManyNet#curr != HowManyNet#amount);
  assume 0 <= I[HowManyNet#input];
  assume I[HowManyNet#input] <= R[HowManyNet#input];
  assume R[HowManyNet#input] <= C[HowManyNet#input];
  assume 0 <= I[HowManyNet#curr];
  assume I[HowManyNet#curr] <= R[HowManyNet#curr];
  assume R[HowManyNet#curr] <= C[HowManyNet#curr];
  assume 0 <= I[HowManyNet#amount];
  assume I[HowManyNet#amount] <= R[HowManyNet#amount];
  assume R[HowManyNet#amount] <= C[HowManyNet#amount];
  assume 0 <= I[HowManyNet#output];
  assume I[HowManyNet#output] <= R[HowManyNet#output];
  assume R[HowManyNet#output] <= C[HowManyNet#output];
  assume I[HowManyNet#output] == R[HowManyNet#output];
  assume (C[HowManyNet#input] - I[HowManyNet#input]) < 1;
  assume ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assume M[HowManyNet#curr][R[HowManyNet#curr]] <= M[HowManyNet#amount][R[HowManyNet#amount]];
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (M[HowManyNet#input][I[HowManyNet#input]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assume (C[HowManyNet#input] - I[HowManyNet#input]) <= 1;
  assume ((C[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (0 <= M[HowManyNet#input][I[HowManyNet#input]]);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == 0);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == M[HowManyNet#curr][R[HowManyNet#curr]]);
  assume ((M[HowManyNet#input][I[HowManyNet#input]] == 1) || (M[HowManyNet#input][I[HowManyNet#input]] == 2)) || (M[HowManyNet#input][I[HowManyNet#input]] == 100);
  C[HowManyNet#input] := C[HowManyNet#input] + 1;
  assume M[HowManyNet#input][I[HowManyNet#input]] == 1;
  assert {:msg "35.15: Channel invariant might be falsified by network input (#30)"} ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assert {:msg "36.15: Channel invariant might be falsified by network input (#31)"} M[HowManyNet#curr][R[HowManyNet#curr]] <= M[HowManyNet#amount][R[HowManyNet#amount]];
  assert {:msg "39.15: Channel invariant might be falsified by network input (#32)"} ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assert {:msg "42.15: Channel invariant might be falsified by network input (#33)"} ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (M[HowManyNet#input][I[HowManyNet#input]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assert {:msg "45.15: Channel invariant might be falsified by network input (#34)"} (C[HowManyNet#input] - I[HowManyNet#input]) <= 1;
  assert {:msg "48.15: Channel invariant might be falsified by network input (#35)"} ((C[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (0 <= M[HowManyNet#input][I[HowManyNet#input]]);
  assert {:msg "51.15: Channel invariant might be falsified by network input (#36)"} ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == 0);
  assert {:msg "54.15: Channel invariant might be falsified by network input (#37)"} ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == M[HowManyNet#curr][R[HowManyNet#curr]]);
  assert {:msg "Channel invariant might be falsified by network input (#38)"} ((M[HowManyNet#input][I[HowManyNet#input]] == 1) || (M[HowManyNet#input][I[HowManyNet#input]] == 2)) || (M[HowManyNet#input][I[HowManyNet#input]] == 100);
}
procedure HowManyNet#anon$3#exit#8()
  modifies C, R, M, I, H;
{
  var HowManyNet#a: Actor;
  var HowManyNet#input: Chan (int);
  var HowManyNet#curr: Chan (int);
  var HowManyNet#amount: Chan (int);
  var HowManyNet#output: Chan (bool);
  assume (HowManyNet#input != HowManyNet#curr) && (HowManyNet#input != HowManyNet#amount) && (HowManyNet#curr != HowManyNet#amount);
  assume 0 <= I[HowManyNet#input];
  assume I[HowManyNet#input] <= R[HowManyNet#input];
  assume R[HowManyNet#input] <= C[HowManyNet#input];
  assume 0 <= I[HowManyNet#curr];
  assume I[HowManyNet#curr] <= R[HowManyNet#curr];
  assume R[HowManyNet#curr] <= C[HowManyNet#curr];
  assume 0 <= I[HowManyNet#amount];
  assume I[HowManyNet#amount] <= R[HowManyNet#amount];
  assume R[HowManyNet#amount] <= C[HowManyNet#amount];
  assume 0 <= I[HowManyNet#output];
  assume I[HowManyNet#output] <= R[HowManyNet#output];
  assume R[HowManyNet#output] <= C[HowManyNet#output];
  assume I[HowManyNet#output] == R[HowManyNet#output];
  assume ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assume M[HowManyNet#curr][R[HowManyNet#curr]] <= M[HowManyNet#amount][R[HowManyNet#amount]];
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (M[HowManyNet#input][I[HowManyNet#input]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assume (C[HowManyNet#input] - I[HowManyNet#input]) <= 1;
  assume ((C[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (0 <= M[HowManyNet#input][I[HowManyNet#input]]);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == 0);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == M[HowManyNet#curr][R[HowManyNet#curr]]);
  assume ((M[HowManyNet#input][I[HowManyNet#input]] == 1) || (M[HowManyNet#input][I[HowManyNet#input]] == 2)) || (M[HowManyNet#input][I[HowManyNet#input]] == 100);
  assume (C[HowManyNet#input] - I[HowManyNet#input]) == 1;
  assume M[HowManyNet#input][I[HowManyNet#input]] == 1;
  assume !((1 <= (C[HowManyNet#input] - R[HowManyNet#input])) && (1 <= (C[HowManyNet#curr] - R[HowManyNet#curr])) && (1 <= (C[HowManyNet#amount] - R[HowManyNet#amount])) && (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]));
  assume !((1 <= (C[HowManyNet#curr] - R[HowManyNet#curr])) && (1 <= (C[HowManyNet#amount] - R[HowManyNet#amount])) && (M[HowManyNet#curr][R[HowManyNet#curr]] < M[HowManyNet#amount][R[HowManyNet#amount]]));
  R[HowManyNet#output] := R[HowManyNet#output] + 1;
  I := R;
  assert {:msg "35.15: The network might not preserve the channel invariant (#39)"} ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assert {:msg "36.15: The network might not preserve the channel invariant (#40)"} M[HowManyNet#curr][R[HowManyNet#curr]] <= M[HowManyNet#amount][R[HowManyNet#amount]];
  assert {:msg "39.15: The network might not preserve the channel invariant (#41)"} ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assert {:msg "42.15: The network might not preserve the channel invariant (#42)"} ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (M[HowManyNet#input][I[HowManyNet#input]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assert {:msg "45.15: The network might not preserve the channel invariant (#43)"} (C[HowManyNet#input] - I[HowManyNet#input]) <= 1;
  assert {:msg "48.15: The network might not preserve the channel invariant (#44)"} ((C[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (0 <= M[HowManyNet#input][I[HowManyNet#input]]);
  assert {:msg "51.15: The network might not preserve the channel invariant (#45)"} ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == 0);
  assert {:msg "54.15: The network might not preserve the channel invariant (#46)"} ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == M[HowManyNet#curr][R[HowManyNet#curr]]);
  assert {:msg "31.13: The network might not preserve the network invariant (#47)"} ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assert {:msg "32.13: The network might not preserve the network invariant (#48)"} M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]];
  assert {:msg "The network might not preserve the network invariant: Unread tokens might be left on channel input (#49)"} (C[HowManyNet#input] - R[HowManyNet#input]) == 0;
  assert {:msg "The network might not preserve the network invariant: Unread tokens might be left on channel output (#50)"} (C[HowManyNet#output] - R[HowManyNet#output]) == 0;
}
procedure HowManyNet#anon$4#input#In#9()
  modifies C, R, M, I, H;
{
  var HowManyNet#a: Actor;
  var HowManyNet#input: Chan (int);
  var HowManyNet#curr: Chan (int);
  var HowManyNet#amount: Chan (int);
  var HowManyNet#output: Chan (bool);
  assume (HowManyNet#input != HowManyNet#curr) && (HowManyNet#input != HowManyNet#amount) && (HowManyNet#curr != HowManyNet#amount);
  assume 0 <= I[HowManyNet#input];
  assume I[HowManyNet#input] <= R[HowManyNet#input];
  assume R[HowManyNet#input] <= C[HowManyNet#input];
  assume 0 <= I[HowManyNet#curr];
  assume I[HowManyNet#curr] <= R[HowManyNet#curr];
  assume R[HowManyNet#curr] <= C[HowManyNet#curr];
  assume 0 <= I[HowManyNet#amount];
  assume I[HowManyNet#amount] <= R[HowManyNet#amount];
  assume R[HowManyNet#amount] <= C[HowManyNet#amount];
  assume 0 <= I[HowManyNet#output];
  assume I[HowManyNet#output] <= R[HowManyNet#output];
  assume R[HowManyNet#output] <= C[HowManyNet#output];
  assume I[HowManyNet#output] == R[HowManyNet#output];
  assume (C[HowManyNet#input] - I[HowManyNet#input]) < 1;
  assume ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assume M[HowManyNet#curr][R[HowManyNet#curr]] <= M[HowManyNet#amount][R[HowManyNet#amount]];
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (M[HowManyNet#input][I[HowManyNet#input]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assume (C[HowManyNet#input] - I[HowManyNet#input]) <= 1;
  assume ((C[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (0 <= M[HowManyNet#input][I[HowManyNet#input]]);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == 0);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == M[HowManyNet#curr][R[HowManyNet#curr]]);
  assume ((M[HowManyNet#input][I[HowManyNet#input]] == 1) || (M[HowManyNet#input][I[HowManyNet#input]] == 2)) || (M[HowManyNet#input][I[HowManyNet#input]] == 100);
  C[HowManyNet#input] := C[HowManyNet#input] + 1;
  assume M[HowManyNet#input][I[HowManyNet#input]] == 2;
  assert {:msg "35.15: Channel invariant might be falsified by network input (#51)"} ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assert {:msg "36.15: Channel invariant might be falsified by network input (#52)"} M[HowManyNet#curr][R[HowManyNet#curr]] <= M[HowManyNet#amount][R[HowManyNet#amount]];
  assert {:msg "39.15: Channel invariant might be falsified by network input (#53)"} ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assert {:msg "42.15: Channel invariant might be falsified by network input (#54)"} ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (M[HowManyNet#input][I[HowManyNet#input]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assert {:msg "45.15: Channel invariant might be falsified by network input (#55)"} (C[HowManyNet#input] - I[HowManyNet#input]) <= 1;
  assert {:msg "48.15: Channel invariant might be falsified by network input (#56)"} ((C[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (0 <= M[HowManyNet#input][I[HowManyNet#input]]);
  assert {:msg "51.15: Channel invariant might be falsified by network input (#57)"} ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == 0);
  assert {:msg "54.15: Channel invariant might be falsified by network input (#58)"} ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == M[HowManyNet#curr][R[HowManyNet#curr]]);
  assert {:msg "Channel invariant might be falsified by network input (#59)"} ((M[HowManyNet#input][I[HowManyNet#input]] == 1) || (M[HowManyNet#input][I[HowManyNet#input]] == 2)) || (M[HowManyNet#input][I[HowManyNet#input]] == 100);
}
procedure HowManyNet#anon$4#exit#10()
  modifies C, R, M, I, H;
{
  var HowManyNet#a: Actor;
  var HowManyNet#input: Chan (int);
  var HowManyNet#curr: Chan (int);
  var HowManyNet#amount: Chan (int);
  var HowManyNet#output: Chan (bool);
  assume (HowManyNet#input != HowManyNet#curr) && (HowManyNet#input != HowManyNet#amount) && (HowManyNet#curr != HowManyNet#amount);
  assume 0 <= I[HowManyNet#input];
  assume I[HowManyNet#input] <= R[HowManyNet#input];
  assume R[HowManyNet#input] <= C[HowManyNet#input];
  assume 0 <= I[HowManyNet#curr];
  assume I[HowManyNet#curr] <= R[HowManyNet#curr];
  assume R[HowManyNet#curr] <= C[HowManyNet#curr];
  assume 0 <= I[HowManyNet#amount];
  assume I[HowManyNet#amount] <= R[HowManyNet#amount];
  assume R[HowManyNet#amount] <= C[HowManyNet#amount];
  assume 0 <= I[HowManyNet#output];
  assume I[HowManyNet#output] <= R[HowManyNet#output];
  assume R[HowManyNet#output] <= C[HowManyNet#output];
  assume I[HowManyNet#output] == R[HowManyNet#output];
  assume ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assume M[HowManyNet#curr][R[HowManyNet#curr]] <= M[HowManyNet#amount][R[HowManyNet#amount]];
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (M[HowManyNet#input][I[HowManyNet#input]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assume (C[HowManyNet#input] - I[HowManyNet#input]) <= 1;
  assume ((C[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (0 <= M[HowManyNet#input][I[HowManyNet#input]]);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == 0);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == M[HowManyNet#curr][R[HowManyNet#curr]]);
  assume ((M[HowManyNet#input][I[HowManyNet#input]] == 1) || (M[HowManyNet#input][I[HowManyNet#input]] == 2)) || (M[HowManyNet#input][I[HowManyNet#input]] == 100);
  assume (C[HowManyNet#input] - I[HowManyNet#input]) == 1;
  assume M[HowManyNet#input][I[HowManyNet#input]] == 2;
  assume !((1 <= (C[HowManyNet#input] - R[HowManyNet#input])) && (1 <= (C[HowManyNet#curr] - R[HowManyNet#curr])) && (1 <= (C[HowManyNet#amount] - R[HowManyNet#amount])) && (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]));
  assume !((1 <= (C[HowManyNet#curr] - R[HowManyNet#curr])) && (1 <= (C[HowManyNet#amount] - R[HowManyNet#amount])) && (M[HowManyNet#curr][R[HowManyNet#curr]] < M[HowManyNet#amount][R[HowManyNet#amount]]));
  R[HowManyNet#output] := R[HowManyNet#output] + 2;
  I := R;
  assert {:msg "35.15: The network might not preserve the channel invariant (#60)"} ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assert {:msg "36.15: The network might not preserve the channel invariant (#61)"} M[HowManyNet#curr][R[HowManyNet#curr]] <= M[HowManyNet#amount][R[HowManyNet#amount]];
  assert {:msg "39.15: The network might not preserve the channel invariant (#62)"} ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assert {:msg "42.15: The network might not preserve the channel invariant (#63)"} ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (M[HowManyNet#input][I[HowManyNet#input]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assert {:msg "45.15: The network might not preserve the channel invariant (#64)"} (C[HowManyNet#input] - I[HowManyNet#input]) <= 1;
  assert {:msg "48.15: The network might not preserve the channel invariant (#65)"} ((C[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (0 <= M[HowManyNet#input][I[HowManyNet#input]]);
  assert {:msg "51.15: The network might not preserve the channel invariant (#66)"} ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == 0);
  assert {:msg "54.15: The network might not preserve the channel invariant (#67)"} ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == M[HowManyNet#curr][R[HowManyNet#curr]]);
  assert {:msg "31.13: The network might not preserve the network invariant (#68)"} ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assert {:msg "32.13: The network might not preserve the network invariant (#69)"} M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]];
  assert {:msg "The network might not preserve the network invariant: Unread tokens might be left on channel input (#70)"} (C[HowManyNet#input] - R[HowManyNet#input]) == 0;
  assert {:msg "The network might not preserve the network invariant: Unread tokens might be left on channel output (#71)"} (C[HowManyNet#output] - R[HowManyNet#output]) == 0;
}
procedure HowManyNet#anon$5#input#In#11()
  modifies C, R, M, I, H;
{
  var HowManyNet#a: Actor;
  var HowManyNet#input: Chan (int);
  var HowManyNet#curr: Chan (int);
  var HowManyNet#amount: Chan (int);
  var HowManyNet#output: Chan (bool);
  assume (HowManyNet#input != HowManyNet#curr) && (HowManyNet#input != HowManyNet#amount) && (HowManyNet#curr != HowManyNet#amount);
  assume 0 <= I[HowManyNet#input];
  assume I[HowManyNet#input] <= R[HowManyNet#input];
  assume R[HowManyNet#input] <= C[HowManyNet#input];
  assume 0 <= I[HowManyNet#curr];
  assume I[HowManyNet#curr] <= R[HowManyNet#curr];
  assume R[HowManyNet#curr] <= C[HowManyNet#curr];
  assume 0 <= I[HowManyNet#amount];
  assume I[HowManyNet#amount] <= R[HowManyNet#amount];
  assume R[HowManyNet#amount] <= C[HowManyNet#amount];
  assume 0 <= I[HowManyNet#output];
  assume I[HowManyNet#output] <= R[HowManyNet#output];
  assume R[HowManyNet#output] <= C[HowManyNet#output];
  assume I[HowManyNet#output] == R[HowManyNet#output];
  assume (C[HowManyNet#input] - I[HowManyNet#input]) < 1;
  assume ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assume M[HowManyNet#curr][R[HowManyNet#curr]] <= M[HowManyNet#amount][R[HowManyNet#amount]];
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (M[HowManyNet#input][I[HowManyNet#input]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assume (C[HowManyNet#input] - I[HowManyNet#input]) <= 1;
  assume ((C[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (0 <= M[HowManyNet#input][I[HowManyNet#input]]);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == 0);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == M[HowManyNet#curr][R[HowManyNet#curr]]);
  assume ((M[HowManyNet#input][I[HowManyNet#input]] == 1) || (M[HowManyNet#input][I[HowManyNet#input]] == 2)) || (M[HowManyNet#input][I[HowManyNet#input]] == 100);
  C[HowManyNet#input] := C[HowManyNet#input] + 1;
  assume M[HowManyNet#input][I[HowManyNet#input]] == 100;
  assert {:msg "35.15: Channel invariant might be falsified by network input (#72)"} ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assert {:msg "36.15: Channel invariant might be falsified by network input (#73)"} M[HowManyNet#curr][R[HowManyNet#curr]] <= M[HowManyNet#amount][R[HowManyNet#amount]];
  assert {:msg "39.15: Channel invariant might be falsified by network input (#74)"} ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assert {:msg "42.15: Channel invariant might be falsified by network input (#75)"} ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (M[HowManyNet#input][I[HowManyNet#input]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assert {:msg "45.15: Channel invariant might be falsified by network input (#76)"} (C[HowManyNet#input] - I[HowManyNet#input]) <= 1;
  assert {:msg "48.15: Channel invariant might be falsified by network input (#77)"} ((C[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (0 <= M[HowManyNet#input][I[HowManyNet#input]]);
  assert {:msg "51.15: Channel invariant might be falsified by network input (#78)"} ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == 0);
  assert {:msg "54.15: Channel invariant might be falsified by network input (#79)"} ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == M[HowManyNet#curr][R[HowManyNet#curr]]);
  assert {:msg "Channel invariant might be falsified by network input (#80)"} ((M[HowManyNet#input][I[HowManyNet#input]] == 1) || (M[HowManyNet#input][I[HowManyNet#input]] == 2)) || (M[HowManyNet#input][I[HowManyNet#input]] == 100);
}
procedure HowManyNet#anon$5#exit#12()
  modifies C, R, M, I, H;
{
  var HowManyNet#a: Actor;
  var HowManyNet#input: Chan (int);
  var HowManyNet#curr: Chan (int);
  var HowManyNet#amount: Chan (int);
  var HowManyNet#output: Chan (bool);
  assume (HowManyNet#input != HowManyNet#curr) && (HowManyNet#input != HowManyNet#amount) && (HowManyNet#curr != HowManyNet#amount);
  assume 0 <= I[HowManyNet#input];
  assume I[HowManyNet#input] <= R[HowManyNet#input];
  assume R[HowManyNet#input] <= C[HowManyNet#input];
  assume 0 <= I[HowManyNet#curr];
  assume I[HowManyNet#curr] <= R[HowManyNet#curr];
  assume R[HowManyNet#curr] <= C[HowManyNet#curr];
  assume 0 <= I[HowManyNet#amount];
  assume I[HowManyNet#amount] <= R[HowManyNet#amount];
  assume R[HowManyNet#amount] <= C[HowManyNet#amount];
  assume 0 <= I[HowManyNet#output];
  assume I[HowManyNet#output] <= R[HowManyNet#output];
  assume R[HowManyNet#output] <= C[HowManyNet#output];
  assume I[HowManyNet#output] == R[HowManyNet#output];
  assume ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assume M[HowManyNet#curr][R[HowManyNet#curr]] <= M[HowManyNet#amount][R[HowManyNet#amount]];
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (M[HowManyNet#input][I[HowManyNet#input]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assume (C[HowManyNet#input] - I[HowManyNet#input]) <= 1;
  assume ((C[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (0 <= M[HowManyNet#input][I[HowManyNet#input]]);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == 0);
  assume ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == M[HowManyNet#curr][R[HowManyNet#curr]]);
  assume ((M[HowManyNet#input][I[HowManyNet#input]] == 1) || (M[HowManyNet#input][I[HowManyNet#input]] == 2)) || (M[HowManyNet#input][I[HowManyNet#input]] == 100);
  assume (C[HowManyNet#input] - I[HowManyNet#input]) == 1;
  assume M[HowManyNet#input][I[HowManyNet#input]] == 100;
  assume !((1 <= (C[HowManyNet#input] - R[HowManyNet#input])) && (1 <= (C[HowManyNet#curr] - R[HowManyNet#curr])) && (1 <= (C[HowManyNet#amount] - R[HowManyNet#amount])) && (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]));
  assume !((1 <= (C[HowManyNet#curr] - R[HowManyNet#curr])) && (1 <= (C[HowManyNet#amount] - R[HowManyNet#amount])) && (M[HowManyNet#curr][R[HowManyNet#curr]] < M[HowManyNet#amount][R[HowManyNet#amount]]));
  R[HowManyNet#output] := R[HowManyNet#output] + 100;
  I := R;
  assert {:msg "35.15: The network might not preserve the channel invariant (#81)"} ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assert {:msg "36.15: The network might not preserve the channel invariant (#82)"} M[HowManyNet#curr][R[HowManyNet#curr]] <= M[HowManyNet#amount][R[HowManyNet#amount]];
  assert {:msg "39.15: The network might not preserve the channel invariant (#83)"} ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> (M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assert {:msg "42.15: The network might not preserve the channel invariant (#84)"} ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (M[HowManyNet#input][I[HowManyNet#input]] == M[HowManyNet#amount][R[HowManyNet#amount]]);
  assert {:msg "45.15: The network might not preserve the channel invariant (#85)"} (C[HowManyNet#input] - I[HowManyNet#input]) <= 1;
  assert {:msg "48.15: The network might not preserve the channel invariant (#86)"} ((C[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> (0 <= M[HowManyNet#input][I[HowManyNet#input]]);
  assert {:msg "51.15: The network might not preserve the channel invariant (#87)"} ((R[HowManyNet#input] - I[HowManyNet#input]) == 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == 0);
  assert {:msg "54.15: The network might not preserve the channel invariant (#88)"} ((R[HowManyNet#input] - I[HowManyNet#input]) > 0) ==> ((C[HowManyNet#output] - I[HowManyNet#output]) == M[HowManyNet#curr][R[HowManyNet#curr]]);
  assert {:msg "31.13: The network might not preserve the network invariant (#89)"} ((C[HowManyNet#curr] - R[HowManyNet#curr]) == 1) && ((C[HowManyNet#amount] - R[HowManyNet#amount]) == 1);
  assert {:msg "32.13: The network might not preserve the network invariant (#90)"} M[HowManyNet#curr][R[HowManyNet#curr]] == M[HowManyNet#amount][R[HowManyNet#amount]];
  assert {:msg "The network might not preserve the network invariant: Unread tokens might be left on channel input (#91)"} (C[HowManyNet#input] - R[HowManyNet#input]) == 0;
  assert {:msg "The network might not preserve the network invariant: Unread tokens might be left on channel output (#92)"} (C[HowManyNet#output] - R[HowManyNet#output]) == 0;
}

// ---------------------------------------------------------------
// -- Types and global variables ---------------------------------
// ---------------------------------------------------------------
type Chan a;
type Actor;
type CType = <a>[Chan a]int;
type MType = <a>[Chan a][int]a;
type State;

var M: MType;
var C: CType;
var R: CType;
var I: CType;

const unique this#: Actor;
type List a = [int]a;
var AT#intlst: List int;

function AT#Min(x:int, y: int): int { if x <= y then x else y }

// ---------------------------------------------------------------
// -- End of prelude ---------------------------------------------
// ---------------------------------------------------------------

procedure pulseShape#init#0()
  modifies C, R, M, I;
{
  var symb: Chan (int);
  var len: Chan (int);
  var done: Chan (bool);
  var hsp: Chan (int);
  var this#: Actor;
  var rd_start: int;
  var tot_start: int;
  var symb0: int;
  var symb1: int;
  var symb2: int;
  var symb3: int;
  var body_iterations: int;
  var body_index: int;
  var hsp_count: int;
  var hsp_out: int;
  var St: int;
  assume (symb != len) && (symb != hsp) && (len != hsp);
  assume R[symb] == 0;
  assume R[len] == 0;
  assume C[done] == 0;
  assume C[hsp] == 0;
  rd_start := R[symb];
  tot_start := C[hsp];
  symb3 := 127;
  hsp_count := 0;
  St := 0;
  body_index := 0;
  body_iterations := 0;
  assert {:msg "24.15: Initialization might not establish the invariant (#0)"} (0 <= St) && (St < 6);
  assert {:msg "25.15: Initialization might not establish the invariant (#1)"} (0 <= hsp_count) && (hsp_count <= 8);
  assert {:msg "26.15: Initialization might not establish the invariant (#2)"} body_index <= body_iterations;
  assert {:msg "27.15: Initialization might not establish the invariant (#3)"} (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assert {:msg "28.15: Initialization might not establish the invariant (#4)"} ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assert {:msg "30.15: Initialization might not establish the invariant (#5)"} (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assert {:msg "31.15: Initialization might not establish the invariant (#6)"} (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assert {:msg "32.15: Initialization might not establish the invariant (#7)"} (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assert {:msg "33.15: Initialization might not establish the invariant (#8)"} ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assert {:msg "34.15: Initialization might not establish the invariant (#9)"} (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assert {:msg "35.15: Initialization might not establish the invariant (#10)"} (St == 0) ==> (R[len] == C[done]);
  assert {:msg "36.15: Initialization might not establish the invariant (#11)"} (St != 0) ==> (R[len] == (C[done] + 1));
  assert {:msg "38.15: Initialization might not establish the invariant (#12)"} (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assert {:msg "40.15: Initialization might not establish the invariant (#13)"} (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assert {:msg "41.15: Initialization might not establish the invariant (#14)"} (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "42.15: Initialization might not establish the invariant (#15)"} (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "43.15: Initialization might not establish the invariant (#16)"} (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assert {:msg "44.15: Initialization might not establish the invariant (#17)"} (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assert {:msg "45.15: Initialization might not establish the invariant (#18)"} (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
}
procedure pulseShape#init#1()
  modifies C, R, M, I;
{
  var symb: Chan (int);
  var len: Chan (int);
  var done: Chan (bool);
  var hsp: Chan (int);
  var this#: Actor;
  var rd_start: int;
  var tot_start: int;
  var symb0: int;
  var symb1: int;
  var symb2: int;
  var symb3: int;
  var body_iterations: int;
  var body_index: int;
  var hsp_count: int;
  var hsp_out: int;
  var St: int;
  var len#0: int;
  assume (symb != len) && (symb != hsp) && (len != hsp);
  assume 0 <= R[symb];
  assume 0 <= R[len];
  assume 0 <= C[done];
  assume 0 <= C[hsp];
  assume (0 <= St) && (St < 6);
  assume (0 <= hsp_count) && (hsp_count <= 8);
  assume body_index <= body_iterations;
  assume (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assume ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assume (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assume (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assume (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assume ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assume (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assume (St == 0) ==> (R[len] == C[done]);
  assume (St != 0) ==> (R[len] == (C[done] + 1));
  assume (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assume (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assume (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assume (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assume (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  len#0 := M[len][R[len]];
  R[len] := R[len] + 1;
  assume 0 < len#0;
  assume St == 0;
  rd_start := R[symb];
  tot_start := C[hsp];
  body_iterations := len#0 * 32;
  body_index := 0;
  symb2 := 127;
  St := 1;
  assert {:msg "24.15: Action at 61.2 might not preserve invariant (#19)"} (0 <= St) && (St < 6);
  assert {:msg "25.15: Action at 61.2 might not preserve invariant (#20)"} (0 <= hsp_count) && (hsp_count <= 8);
  assert {:msg "26.15: Action at 61.2 might not preserve invariant (#21)"} body_index <= body_iterations;
  assert {:msg "27.15: Action at 61.2 might not preserve invariant (#22)"} (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assert {:msg "28.15: Action at 61.2 might not preserve invariant (#23)"} ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assert {:msg "30.15: Action at 61.2 might not preserve invariant (#24)"} (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assert {:msg "31.15: Action at 61.2 might not preserve invariant (#25)"} (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assert {:msg "32.15: Action at 61.2 might not preserve invariant (#26)"} (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assert {:msg "33.15: Action at 61.2 might not preserve invariant (#27)"} ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assert {:msg "34.15: Action at 61.2 might not preserve invariant (#28)"} (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assert {:msg "35.15: Action at 61.2 might not preserve invariant (#29)"} (St == 0) ==> (R[len] == C[done]);
  assert {:msg "36.15: Action at 61.2 might not preserve invariant (#30)"} (St != 0) ==> (R[len] == (C[done] + 1));
  assert {:msg "38.15: Action at 61.2 might not preserve invariant (#31)"} (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assert {:msg "40.15: Action at 61.2 might not preserve invariant (#32)"} (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assert {:msg "41.15: Action at 61.2 might not preserve invariant (#33)"} (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "42.15: Action at 61.2 might not preserve invariant (#34)"} (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "43.15: Action at 61.2 might not preserve invariant (#35)"} (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assert {:msg "44.15: Action at 61.2 might not preserve invariant (#36)"} (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assert {:msg "45.15: Action at 61.2 might not preserve invariant (#37)"} (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
}
procedure pulseShape#read1#2()
  modifies C, R, M, I;
{
  var symb: Chan (int);
  var len: Chan (int);
  var done: Chan (bool);
  var hsp: Chan (int);
  var this#: Actor;
  var rd_start: int;
  var tot_start: int;
  var symb0: int;
  var symb1: int;
  var symb2: int;
  var symb3: int;
  var body_iterations: int;
  var body_index: int;
  var hsp_count: int;
  var hsp_out: int;
  var St: int;
  var symb#0: int;
  assume (symb != len) && (symb != hsp) && (len != hsp);
  assume 0 <= R[symb];
  assume 0 <= R[len];
  assume 0 <= C[done];
  assume 0 <= C[hsp];
  assume (0 <= St) && (St < 6);
  assume (0 <= hsp_count) && (hsp_count <= 8);
  assume body_index <= body_iterations;
  assume (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assume ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assume (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assume (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assume (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assume ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assume (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assume (St == 0) ==> (R[len] == C[done]);
  assume (St != 0) ==> (R[len] == (C[done] + 1));
  assume (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assume (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assume (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assume (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assume (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  symb#0 := M[symb][R[symb]];
  R[symb] := R[symb] + 1;
  assume (St == 1) && (body_index < body_iterations);
  symb0 := symb#0;
  St := 2;
  assert {:msg "24.15: Action at 75.2 might not preserve invariant (#38)"} (0 <= St) && (St < 6);
  assert {:msg "25.15: Action at 75.2 might not preserve invariant (#39)"} (0 <= hsp_count) && (hsp_count <= 8);
  assert {:msg "26.15: Action at 75.2 might not preserve invariant (#40)"} body_index <= body_iterations;
  assert {:msg "27.15: Action at 75.2 might not preserve invariant (#41)"} (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assert {:msg "28.15: Action at 75.2 might not preserve invariant (#42)"} ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assert {:msg "30.15: Action at 75.2 might not preserve invariant (#43)"} (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assert {:msg "31.15: Action at 75.2 might not preserve invariant (#44)"} (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assert {:msg "32.15: Action at 75.2 might not preserve invariant (#45)"} (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assert {:msg "33.15: Action at 75.2 might not preserve invariant (#46)"} ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assert {:msg "34.15: Action at 75.2 might not preserve invariant (#47)"} (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assert {:msg "35.15: Action at 75.2 might not preserve invariant (#48)"} (St == 0) ==> (R[len] == C[done]);
  assert {:msg "36.15: Action at 75.2 might not preserve invariant (#49)"} (St != 0) ==> (R[len] == (C[done] + 1));
  assert {:msg "38.15: Action at 75.2 might not preserve invariant (#50)"} (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assert {:msg "40.15: Action at 75.2 might not preserve invariant (#51)"} (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assert {:msg "41.15: Action at 75.2 might not preserve invariant (#52)"} (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "42.15: Action at 75.2 might not preserve invariant (#53)"} (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "43.15: Action at 75.2 might not preserve invariant (#54)"} (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assert {:msg "44.15: Action at 75.2 might not preserve invariant (#55)"} (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assert {:msg "45.15: Action at 75.2 might not preserve invariant (#56)"} (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
}
procedure pulseShape#read2#3()
  modifies C, R, M, I;
{
  var symb: Chan (int);
  var len: Chan (int);
  var done: Chan (bool);
  var hsp: Chan (int);
  var this#: Actor;
  var rd_start: int;
  var tot_start: int;
  var symb0: int;
  var symb1: int;
  var symb2: int;
  var symb3: int;
  var body_iterations: int;
  var body_index: int;
  var hsp_count: int;
  var hsp_out: int;
  var St: int;
  var symb#0: int;
  assume (symb != len) && (symb != hsp) && (len != hsp);
  assume 0 <= R[symb];
  assume 0 <= R[len];
  assume 0 <= C[done];
  assume 0 <= C[hsp];
  assume (0 <= St) && (St < 6);
  assume (0 <= hsp_count) && (hsp_count <= 8);
  assume body_index <= body_iterations;
  assume (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assume ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assume (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assume (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assume (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assume ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assume (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assume (St == 0) ==> (R[len] == C[done]);
  assume (St != 0) ==> (R[len] == (C[done] + 1));
  assume (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assume (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assume (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assume (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assume (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  symb#0 := M[symb][R[symb]];
  R[symb] := R[symb] + 1;
  assume St == 2;
  symb1 := symb#0;
  hsp_count := 0;
  St := 3;
  assert {:msg "24.15: Action at 84.2 might not preserve invariant (#57)"} (0 <= St) && (St < 6);
  assert {:msg "25.15: Action at 84.2 might not preserve invariant (#58)"} (0 <= hsp_count) && (hsp_count <= 8);
  assert {:msg "26.15: Action at 84.2 might not preserve invariant (#59)"} body_index <= body_iterations;
  assert {:msg "27.15: Action at 84.2 might not preserve invariant (#60)"} (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assert {:msg "28.15: Action at 84.2 might not preserve invariant (#61)"} ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assert {:msg "30.15: Action at 84.2 might not preserve invariant (#62)"} (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assert {:msg "31.15: Action at 84.2 might not preserve invariant (#63)"} (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assert {:msg "32.15: Action at 84.2 might not preserve invariant (#64)"} (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assert {:msg "33.15: Action at 84.2 might not preserve invariant (#65)"} ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assert {:msg "34.15: Action at 84.2 might not preserve invariant (#66)"} (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assert {:msg "35.15: Action at 84.2 might not preserve invariant (#67)"} (St == 0) ==> (R[len] == C[done]);
  assert {:msg "36.15: Action at 84.2 might not preserve invariant (#68)"} (St != 0) ==> (R[len] == (C[done] + 1));
  assert {:msg "38.15: Action at 84.2 might not preserve invariant (#69)"} (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assert {:msg "40.15: Action at 84.2 might not preserve invariant (#70)"} (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assert {:msg "41.15: Action at 84.2 might not preserve invariant (#71)"} (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "42.15: Action at 84.2 might not preserve invariant (#72)"} (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "43.15: Action at 84.2 might not preserve invariant (#73)"} (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assert {:msg "44.15: Action at 84.2 might not preserve invariant (#74)"} (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assert {:msg "45.15: Action at 84.2 might not preserve invariant (#75)"} (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
}
procedure pulseShape#tx_body1#4()
  modifies C, R, M, I;
{
  var symb: Chan (int);
  var len: Chan (int);
  var done: Chan (bool);
  var hsp: Chan (int);
  var this#: Actor;
  var rd_start: int;
  var tot_start: int;
  var symb0: int;
  var symb1: int;
  var symb2: int;
  var symb3: int;
  var body_iterations: int;
  var body_index: int;
  var hsp_count: int;
  var hsp_out: int;
  var St: int;
  assume (symb != len) && (symb != hsp) && (len != hsp);
  assume 0 <= R[symb];
  assume 0 <= R[len];
  assume 0 <= C[done];
  assume 0 <= C[hsp];
  assume (0 <= St) && (St < 6);
  assume (0 <= hsp_count) && (hsp_count <= 8);
  assume body_index <= body_iterations;
  assume (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assume ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assume (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assume (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assume (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assume ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assume (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assume (St == 0) ==> (R[len] == C[done]);
  assume (St != 0) ==> (R[len] == (C[done] + 1));
  assume (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assume (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assume (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assume (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assume (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assume (St == 3) && (hsp_count < 8);
  havoc hsp_out;
  hsp_count := hsp_count + 1;
  St := 3;
  M[hsp][C[hsp]] := hsp_out;
  C[hsp] := C[hsp] + 1;
  assert {:msg "24.15: Action at 94.2 might not preserve invariant (#76)"} (0 <= St) && (St < 6);
  assert {:msg "25.15: Action at 94.2 might not preserve invariant (#77)"} (0 <= hsp_count) && (hsp_count <= 8);
  assert {:msg "26.15: Action at 94.2 might not preserve invariant (#78)"} body_index <= body_iterations;
  assert {:msg "27.15: Action at 94.2 might not preserve invariant (#79)"} (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assert {:msg "28.15: Action at 94.2 might not preserve invariant (#80)"} ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assert {:msg "30.15: Action at 94.2 might not preserve invariant (#81)"} (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assert {:msg "31.15: Action at 94.2 might not preserve invariant (#82)"} (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assert {:msg "32.15: Action at 94.2 might not preserve invariant (#83)"} (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assert {:msg "33.15: Action at 94.2 might not preserve invariant (#84)"} ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assert {:msg "34.15: Action at 94.2 might not preserve invariant (#85)"} (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assert {:msg "35.15: Action at 94.2 might not preserve invariant (#86)"} (St == 0) ==> (R[len] == C[done]);
  assert {:msg "36.15: Action at 94.2 might not preserve invariant (#87)"} (St != 0) ==> (R[len] == (C[done] + 1));
  assert {:msg "38.15: Action at 94.2 might not preserve invariant (#88)"} (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assert {:msg "40.15: Action at 94.2 might not preserve invariant (#89)"} (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assert {:msg "41.15: Action at 94.2 might not preserve invariant (#90)"} (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "42.15: Action at 94.2 might not preserve invariant (#91)"} (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "43.15: Action at 94.2 might not preserve invariant (#92)"} (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assert {:msg "44.15: Action at 94.2 might not preserve invariant (#93)"} (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assert {:msg "45.15: Action at 94.2 might not preserve invariant (#94)"} (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
}
procedure pulseShape#tx_body1_done#5()
  modifies C, R, M, I;
{
  var symb: Chan (int);
  var len: Chan (int);
  var done: Chan (bool);
  var hsp: Chan (int);
  var this#: Actor;
  var rd_start: int;
  var tot_start: int;
  var symb0: int;
  var symb1: int;
  var symb2: int;
  var symb3: int;
  var body_iterations: int;
  var body_index: int;
  var hsp_count: int;
  var hsp_out: int;
  var St: int;
  assume (symb != len) && (symb != hsp) && (len != hsp);
  assume 0 <= R[symb];
  assume 0 <= R[len];
  assume 0 <= C[done];
  assume 0 <= C[hsp];
  assume (0 <= St) && (St < 6);
  assume (0 <= hsp_count) && (hsp_count <= 8);
  assume body_index <= body_iterations;
  assume (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assume ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assume (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assume (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assume (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assume ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assume (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assume (St == 0) ==> (R[len] == C[done]);
  assume (St != 0) ==> (R[len] == (C[done] + 1));
  assume (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assume (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assume (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assume (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assume (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assume !((St == 3) && (hsp_count < 8));
  assume St == 3;
  hsp_count := 0;
  St := 4;
  assert {:msg "24.15: Action at 104.2 might not preserve invariant (#95)"} (0 <= St) && (St < 6);
  assert {:msg "25.15: Action at 104.2 might not preserve invariant (#96)"} (0 <= hsp_count) && (hsp_count <= 8);
  assert {:msg "26.15: Action at 104.2 might not preserve invariant (#97)"} body_index <= body_iterations;
  assert {:msg "27.15: Action at 104.2 might not preserve invariant (#98)"} (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assert {:msg "28.15: Action at 104.2 might not preserve invariant (#99)"} ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assert {:msg "30.15: Action at 104.2 might not preserve invariant (#100)"} (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assert {:msg "31.15: Action at 104.2 might not preserve invariant (#101)"} (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assert {:msg "32.15: Action at 104.2 might not preserve invariant (#102)"} (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assert {:msg "33.15: Action at 104.2 might not preserve invariant (#103)"} ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assert {:msg "34.15: Action at 104.2 might not preserve invariant (#104)"} (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assert {:msg "35.15: Action at 104.2 might not preserve invariant (#105)"} (St == 0) ==> (R[len] == C[done]);
  assert {:msg "36.15: Action at 104.2 might not preserve invariant (#106)"} (St != 0) ==> (R[len] == (C[done] + 1));
  assert {:msg "38.15: Action at 104.2 might not preserve invariant (#107)"} (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assert {:msg "40.15: Action at 104.2 might not preserve invariant (#108)"} (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assert {:msg "41.15: Action at 104.2 might not preserve invariant (#109)"} (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "42.15: Action at 104.2 might not preserve invariant (#110)"} (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "43.15: Action at 104.2 might not preserve invariant (#111)"} (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assert {:msg "44.15: Action at 104.2 might not preserve invariant (#112)"} (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assert {:msg "45.15: Action at 104.2 might not preserve invariant (#113)"} (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
}
procedure pulseShape#tx_body2#6()
  modifies C, R, M, I;
{
  var symb: Chan (int);
  var len: Chan (int);
  var done: Chan (bool);
  var hsp: Chan (int);
  var this#: Actor;
  var rd_start: int;
  var tot_start: int;
  var symb0: int;
  var symb1: int;
  var symb2: int;
  var symb3: int;
  var body_iterations: int;
  var body_index: int;
  var hsp_count: int;
  var hsp_out: int;
  var St: int;
  assume (symb != len) && (symb != hsp) && (len != hsp);
  assume 0 <= R[symb];
  assume 0 <= R[len];
  assume 0 <= C[done];
  assume 0 <= C[hsp];
  assume (0 <= St) && (St < 6);
  assume (0 <= hsp_count) && (hsp_count <= 8);
  assume body_index <= body_iterations;
  assume (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assume ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assume (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assume (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assume (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assume ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assume (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assume (St == 0) ==> (R[len] == C[done]);
  assume (St != 0) ==> (R[len] == (C[done] + 1));
  assume (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assume (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assume (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assume (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assume (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assume (St == 4) && (hsp_count < 8);
  havoc hsp_out;
  hsp_count := hsp_count + 1;
  St := 4;
  M[hsp][C[hsp]] := hsp_out;
  C[hsp] := C[hsp] + 1;
  assert {:msg "24.15: Action at 113.2 might not preserve invariant (#114)"} (0 <= St) && (St < 6);
  assert {:msg "25.15: Action at 113.2 might not preserve invariant (#115)"} (0 <= hsp_count) && (hsp_count <= 8);
  assert {:msg "26.15: Action at 113.2 might not preserve invariant (#116)"} body_index <= body_iterations;
  assert {:msg "27.15: Action at 113.2 might not preserve invariant (#117)"} (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assert {:msg "28.15: Action at 113.2 might not preserve invariant (#118)"} ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assert {:msg "30.15: Action at 113.2 might not preserve invariant (#119)"} (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assert {:msg "31.15: Action at 113.2 might not preserve invariant (#120)"} (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assert {:msg "32.15: Action at 113.2 might not preserve invariant (#121)"} (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assert {:msg "33.15: Action at 113.2 might not preserve invariant (#122)"} ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assert {:msg "34.15: Action at 113.2 might not preserve invariant (#123)"} (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assert {:msg "35.15: Action at 113.2 might not preserve invariant (#124)"} (St == 0) ==> (R[len] == C[done]);
  assert {:msg "36.15: Action at 113.2 might not preserve invariant (#125)"} (St != 0) ==> (R[len] == (C[done] + 1));
  assert {:msg "38.15: Action at 113.2 might not preserve invariant (#126)"} (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assert {:msg "40.15: Action at 113.2 might not preserve invariant (#127)"} (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assert {:msg "41.15: Action at 113.2 might not preserve invariant (#128)"} (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "42.15: Action at 113.2 might not preserve invariant (#129)"} (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "43.15: Action at 113.2 might not preserve invariant (#130)"} (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assert {:msg "44.15: Action at 113.2 might not preserve invariant (#131)"} (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assert {:msg "45.15: Action at 113.2 might not preserve invariant (#132)"} (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
}
procedure pulseShape#tx_body2_done#7()
  modifies C, R, M, I;
{
  var symb: Chan (int);
  var len: Chan (int);
  var done: Chan (bool);
  var hsp: Chan (int);
  var this#: Actor;
  var rd_start: int;
  var tot_start: int;
  var symb0: int;
  var symb1: int;
  var symb2: int;
  var symb3: int;
  var body_iterations: int;
  var body_index: int;
  var hsp_count: int;
  var hsp_out: int;
  var St: int;
  assume (symb != len) && (symb != hsp) && (len != hsp);
  assume 0 <= R[symb];
  assume 0 <= R[len];
  assume 0 <= C[done];
  assume 0 <= C[hsp];
  assume (0 <= St) && (St < 6);
  assume (0 <= hsp_count) && (hsp_count <= 8);
  assume body_index <= body_iterations;
  assume (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assume ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assume (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assume (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assume (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assume ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assume (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assume (St == 0) ==> (R[len] == C[done]);
  assume (St != 0) ==> (R[len] == (C[done] + 1));
  assume (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assume (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assume (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assume (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assume (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assume !((St == 4) && (hsp_count < 8));
  assume St == 4;
  symb2 := symb1;
  body_index := body_index + 1;
  hsp_count := 0;
  St := 1;
  assert {:msg "24.15: Action at 123.2 might not preserve invariant (#133)"} (0 <= St) && (St < 6);
  assert {:msg "25.15: Action at 123.2 might not preserve invariant (#134)"} (0 <= hsp_count) && (hsp_count <= 8);
  assert {:msg "26.15: Action at 123.2 might not preserve invariant (#135)"} body_index <= body_iterations;
  assert {:msg "27.15: Action at 123.2 might not preserve invariant (#136)"} (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assert {:msg "28.15: Action at 123.2 might not preserve invariant (#137)"} ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assert {:msg "30.15: Action at 123.2 might not preserve invariant (#138)"} (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assert {:msg "31.15: Action at 123.2 might not preserve invariant (#139)"} (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assert {:msg "32.15: Action at 123.2 might not preserve invariant (#140)"} (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assert {:msg "33.15: Action at 123.2 might not preserve invariant (#141)"} ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assert {:msg "34.15: Action at 123.2 might not preserve invariant (#142)"} (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assert {:msg "35.15: Action at 123.2 might not preserve invariant (#143)"} (St == 0) ==> (R[len] == C[done]);
  assert {:msg "36.15: Action at 123.2 might not preserve invariant (#144)"} (St != 0) ==> (R[len] == (C[done] + 1));
  assert {:msg "38.15: Action at 123.2 might not preserve invariant (#145)"} (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assert {:msg "40.15: Action at 123.2 might not preserve invariant (#146)"} (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assert {:msg "41.15: Action at 123.2 might not preserve invariant (#147)"} (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "42.15: Action at 123.2 might not preserve invariant (#148)"} (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "43.15: Action at 123.2 might not preserve invariant (#149)"} (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assert {:msg "44.15: Action at 123.2 might not preserve invariant (#150)"} (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assert {:msg "45.15: Action at 123.2 might not preserve invariant (#151)"} (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
}
procedure pulseShape#tx_tail_start#8()
  modifies C, R, M, I;
{
  var symb: Chan (int);
  var len: Chan (int);
  var done: Chan (bool);
  var hsp: Chan (int);
  var this#: Actor;
  var rd_start: int;
  var tot_start: int;
  var symb0: int;
  var symb1: int;
  var symb2: int;
  var symb3: int;
  var body_iterations: int;
  var body_index: int;
  var hsp_count: int;
  var hsp_out: int;
  var St: int;
  assume (symb != len) && (symb != hsp) && (len != hsp);
  assume 0 <= R[symb];
  assume 0 <= R[len];
  assume 0 <= C[done];
  assume 0 <= C[hsp];
  assume (0 <= St) && (St < 6);
  assume (0 <= hsp_count) && (hsp_count <= 8);
  assume body_index <= body_iterations;
  assume (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assume ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assume (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assume (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assume (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assume ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assume (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assume (St == 0) ==> (R[len] == C[done]);
  assume (St != 0) ==> (R[len] == (C[done] + 1));
  assume (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assume (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assume (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assume (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assume (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assume (St == 1) && (body_index == body_iterations);
  St := 5;
  assert {:msg "24.15: Action at 134.2 might not preserve invariant (#152)"} (0 <= St) && (St < 6);
  assert {:msg "25.15: Action at 134.2 might not preserve invariant (#153)"} (0 <= hsp_count) && (hsp_count <= 8);
  assert {:msg "26.15: Action at 134.2 might not preserve invariant (#154)"} body_index <= body_iterations;
  assert {:msg "27.15: Action at 134.2 might not preserve invariant (#155)"} (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assert {:msg "28.15: Action at 134.2 might not preserve invariant (#156)"} ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assert {:msg "30.15: Action at 134.2 might not preserve invariant (#157)"} (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assert {:msg "31.15: Action at 134.2 might not preserve invariant (#158)"} (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assert {:msg "32.15: Action at 134.2 might not preserve invariant (#159)"} (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assert {:msg "33.15: Action at 134.2 might not preserve invariant (#160)"} ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assert {:msg "34.15: Action at 134.2 might not preserve invariant (#161)"} (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assert {:msg "35.15: Action at 134.2 might not preserve invariant (#162)"} (St == 0) ==> (R[len] == C[done]);
  assert {:msg "36.15: Action at 134.2 might not preserve invariant (#163)"} (St != 0) ==> (R[len] == (C[done] + 1));
  assert {:msg "38.15: Action at 134.2 might not preserve invariant (#164)"} (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assert {:msg "40.15: Action at 134.2 might not preserve invariant (#165)"} (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assert {:msg "41.15: Action at 134.2 might not preserve invariant (#166)"} (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "42.15: Action at 134.2 might not preserve invariant (#167)"} (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "43.15: Action at 134.2 might not preserve invariant (#168)"} (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assert {:msg "44.15: Action at 134.2 might not preserve invariant (#169)"} (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assert {:msg "45.15: Action at 134.2 might not preserve invariant (#170)"} (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
}
procedure pulseShape#tx_tail_body#9()
  modifies C, R, M, I;
{
  var symb: Chan (int);
  var len: Chan (int);
  var done: Chan (bool);
  var hsp: Chan (int);
  var this#: Actor;
  var rd_start: int;
  var tot_start: int;
  var symb0: int;
  var symb1: int;
  var symb2: int;
  var symb3: int;
  var body_iterations: int;
  var body_index: int;
  var hsp_count: int;
  var hsp_out: int;
  var St: int;
  assume (symb != len) && (symb != hsp) && (len != hsp);
  assume 0 <= R[symb];
  assume 0 <= R[len];
  assume 0 <= C[done];
  assume 0 <= C[hsp];
  assume (0 <= St) && (St < 6);
  assume (0 <= hsp_count) && (hsp_count <= 8);
  assume body_index <= body_iterations;
  assume (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assume ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assume (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assume (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assume (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assume ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assume (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assume (St == 0) ==> (R[len] == C[done]);
  assume (St != 0) ==> (R[len] == (C[done] + 1));
  assume (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assume (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assume (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assume (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assume (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assume (St == 5) && (hsp_count < 8);
  havoc hsp_out;
  hsp_count := hsp_count + 1;
  St := 5;
  M[hsp][C[hsp]] := hsp_out;
  C[hsp] := C[hsp] + 1;
  assert {:msg "24.15: Action at 142.2 might not preserve invariant (#171)"} (0 <= St) && (St < 6);
  assert {:msg "25.15: Action at 142.2 might not preserve invariant (#172)"} (0 <= hsp_count) && (hsp_count <= 8);
  assert {:msg "26.15: Action at 142.2 might not preserve invariant (#173)"} body_index <= body_iterations;
  assert {:msg "27.15: Action at 142.2 might not preserve invariant (#174)"} (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assert {:msg "28.15: Action at 142.2 might not preserve invariant (#175)"} ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assert {:msg "30.15: Action at 142.2 might not preserve invariant (#176)"} (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assert {:msg "31.15: Action at 142.2 might not preserve invariant (#177)"} (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assert {:msg "32.15: Action at 142.2 might not preserve invariant (#178)"} (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assert {:msg "33.15: Action at 142.2 might not preserve invariant (#179)"} ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assert {:msg "34.15: Action at 142.2 might not preserve invariant (#180)"} (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assert {:msg "35.15: Action at 142.2 might not preserve invariant (#181)"} (St == 0) ==> (R[len] == C[done]);
  assert {:msg "36.15: Action at 142.2 might not preserve invariant (#182)"} (St != 0) ==> (R[len] == (C[done] + 1));
  assert {:msg "38.15: Action at 142.2 might not preserve invariant (#183)"} (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assert {:msg "40.15: Action at 142.2 might not preserve invariant (#184)"} (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assert {:msg "41.15: Action at 142.2 might not preserve invariant (#185)"} (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "42.15: Action at 142.2 might not preserve invariant (#186)"} (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "43.15: Action at 142.2 might not preserve invariant (#187)"} (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assert {:msg "44.15: Action at 142.2 might not preserve invariant (#188)"} (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assert {:msg "45.15: Action at 142.2 might not preserve invariant (#189)"} (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
}
procedure pulseShape#tx_tail_done#10()
  modifies C, R, M, I;
{
  var symb: Chan (int);
  var len: Chan (int);
  var done: Chan (bool);
  var hsp: Chan (int);
  var this#: Actor;
  var rd_start: int;
  var tot_start: int;
  var symb0: int;
  var symb1: int;
  var symb2: int;
  var symb3: int;
  var body_iterations: int;
  var body_index: int;
  var hsp_count: int;
  var hsp_out: int;
  var St: int;
  assume (symb != len) && (symb != hsp) && (len != hsp);
  assume 0 <= R[symb];
  assume 0 <= R[len];
  assume 0 <= C[done];
  assume 0 <= C[hsp];
  assume (0 <= St) && (St < 6);
  assume (0 <= hsp_count) && (hsp_count <= 8);
  assume body_index <= body_iterations;
  assume (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assume ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assume (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assume (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assume (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assume ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assume (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assume (St == 0) ==> (R[len] == C[done]);
  assume (St != 0) ==> (R[len] == (C[done] + 1));
  assume (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assume (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assume (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assume (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assume (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assume (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assume !((St == 5) && (hsp_count < 8));
  assume St == 5;
  hsp_count := 0;
  St := 0;
  M[done][C[done]] := true;
  C[done] := C[done] + 1;
  assert {:msg "24.15: Action at 150.2 might not preserve invariant (#190)"} (0 <= St) && (St < 6);
  assert {:msg "25.15: Action at 150.2 might not preserve invariant (#191)"} (0 <= hsp_count) && (hsp_count <= 8);
  assert {:msg "26.15: Action at 150.2 might not preserve invariant (#192)"} body_index <= body_iterations;
  assert {:msg "27.15: Action at 150.2 might not preserve invariant (#193)"} (2 <= St) && (St <= 4) ==> (body_index < body_iterations);
  assert {:msg "28.15: Action at 150.2 might not preserve invariant (#194)"} ((St == 5) || (St == 0)) ==> (body_index == body_iterations);
  assert {:msg "30.15: Action at 150.2 might not preserve invariant (#195)"} (R[len] > 0) ==> (body_iterations == (32 * M[len][R[len] - 1]));
  assert {:msg "31.15: Action at 150.2 might not preserve invariant (#196)"} (((St == 0) || (St == 1)) || (St == 5)) ==> (R[symb] == (rd_start + (2 * body_index)));
  assert {:msg "32.15: Action at 150.2 might not preserve invariant (#197)"} (St == 2) ==> (R[symb] == ((rd_start + (2 * body_index)) + 1));
  assert {:msg "33.15: Action at 150.2 might not preserve invariant (#198)"} ((St == 3) || (St == 4)) ==> (R[symb] == ((rd_start + (2 * body_index)) + 2));
  assert {:msg "34.15: Action at 150.2 might not preserve invariant (#199)"} (St == 0) ==> (R[symb] == (rd_start + (2 * body_iterations)));
  assert {:msg "35.15: Action at 150.2 might not preserve invariant (#200)"} (St == 0) ==> (R[len] == C[done]);
  assert {:msg "36.15: Action at 150.2 might not preserve invariant (#201)"} (St != 0) ==> (R[len] == (C[done] + 1));
  assert {:msg "38.15: Action at 150.2 might not preserve invariant (#202)"} (St != 3) && (St != 4) && (St != 5) ==> (hsp_count == 0);
  assert {:msg "40.15: Action at 150.2 might not preserve invariant (#203)"} (St == 0) && (body_iterations > 0) ==> (C[hsp] == ((tot_start + (16 * body_iterations)) + 8));
  assert {:msg "41.15: Action at 150.2 might not preserve invariant (#204)"} (St == 1) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "42.15: Action at 150.2 might not preserve invariant (#205)"} (St == 2) ==> (C[hsp] == (tot_start + (16 * body_index)));
  assert {:msg "43.15: Action at 150.2 might not preserve invariant (#206)"} (St == 3) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
  assert {:msg "44.15: Action at 150.2 might not preserve invariant (#207)"} (St == 4) ==> (C[hsp] == (((tot_start + (16 * body_index)) + 8) + hsp_count));
  assert {:msg "45.15: Action at 150.2 might not preserve invariant (#208)"} (St == 5) ==> (C[hsp] == ((tot_start + (16 * body_index)) + hsp_count));
}
procedure pulseShape##GuardWD#11()
  modifies C, R, M, I;
{
  var symb: Chan (int);
  var len: Chan (int);
  var done: Chan (bool);
  var hsp: Chan (int);
  var this#: Actor;
  var rd_start: int;
  var tot_start: int;
  var symb0: int;
  var symb1: int;
  var symb2: int;
  var symb3: int;
  var body_iterations: int;
  var body_index: int;
  var hsp_count: int;
  var hsp_out: int;
  var St: int;
  var len#0: int;
  var symb#0: int;
  assume (symb != len) && (symb != hsp) && (len != hsp);
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#209)"} !((!((St == 4) && (hsp_count < 8))) && (St == 4) && (St == 1) && (body_index == body_iterations));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#210)"} !((!((St == 4) && (hsp_count < 8))) && (St == 4) && (!((St == 3) && (hsp_count < 8))) && (St == 3));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#211)"} !((!((St == 4) && (hsp_count < 8))) && (St == 4) && (1 <= (C[len] - R[len])) && (St == 0));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#212)"} !((!((St == 4) && (hsp_count < 8))) && (St == 4) && (St == 5) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#213)"} !((!((St == 4) && (hsp_count < 8))) && (St == 4) && (1 <= (C[symb] - R[symb])) && (St == 2));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#214)"} !((!((St == 4) && (hsp_count < 8))) && (St == 4) && (!((St == 5) && (hsp_count < 8))) && (St == 5));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#215)"} !((!((St == 4) && (hsp_count < 8))) && (St == 4) && (St == 3) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#216)"} !((!((St == 4) && (hsp_count < 8))) && (St == 4) && (St == 4) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#217)"} !((!((St == 4) && (hsp_count < 8))) && (St == 4) && (1 <= (C[symb] - R[symb])) && (St == 1) && (body_index < body_iterations));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#218)"} !((St == 1) && (body_index == body_iterations) && (!((St == 3) && (hsp_count < 8))) && (St == 3));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#219)"} !((St == 1) && (body_index == body_iterations) && (1 <= (C[len] - R[len])) && (St == 0));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#220)"} !((St == 1) && (body_index == body_iterations) && (St == 5) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#221)"} !((St == 1) && (body_index == body_iterations) && (1 <= (C[symb] - R[symb])) && (St == 2));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#222)"} !((St == 1) && (body_index == body_iterations) && (!((St == 5) && (hsp_count < 8))) && (St == 5));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#223)"} !((St == 1) && (body_index == body_iterations) && (St == 3) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#224)"} !((St == 1) && (body_index == body_iterations) && (St == 4) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#225)"} !((St == 1) && (body_index == body_iterations) && (1 <= (C[symb] - R[symb])) && (St == 1) && (body_index < body_iterations));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#226)"} !((!((St == 3) && (hsp_count < 8))) && (St == 3) && (1 <= (C[len] - R[len])) && (St == 0));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#227)"} !((!((St == 3) && (hsp_count < 8))) && (St == 3) && (St == 5) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#228)"} !((!((St == 3) && (hsp_count < 8))) && (St == 3) && (1 <= (C[symb] - R[symb])) && (St == 2));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#229)"} !((!((St == 3) && (hsp_count < 8))) && (St == 3) && (!((St == 5) && (hsp_count < 8))) && (St == 5));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#230)"} !((!((St == 3) && (hsp_count < 8))) && (St == 3) && (St == 3) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#231)"} !((!((St == 3) && (hsp_count < 8))) && (St == 3) && (St == 4) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#232)"} !((!((St == 3) && (hsp_count < 8))) && (St == 3) && (1 <= (C[symb] - R[symb])) && (St == 1) && (body_index < body_iterations));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#233)"} !((1 <= (C[len] - R[len])) && (St == 0) && (St == 5) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#234)"} !((1 <= (C[len] - R[len])) && (St == 0) && (1 <= (C[symb] - R[symb])) && (St == 2));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#235)"} !((1 <= (C[len] - R[len])) && (St == 0) && (!((St == 5) && (hsp_count < 8))) && (St == 5));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#236)"} !((1 <= (C[len] - R[len])) && (St == 0) && (St == 3) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#237)"} !((1 <= (C[len] - R[len])) && (St == 0) && (St == 4) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#238)"} !((1 <= (C[len] - R[len])) && (St == 0) && (1 <= (C[symb] - R[symb])) && (St == 1) && (body_index < body_iterations));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#239)"} !((St == 5) && (hsp_count < 8) && (1 <= (C[symb] - R[symb])) && (St == 2));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#240)"} !((St == 5) && (hsp_count < 8) && (!((St == 5) && (hsp_count < 8))) && (St == 5));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#241)"} !((St == 5) && (hsp_count < 8) && (St == 3) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#242)"} !((St == 5) && (hsp_count < 8) && (St == 4) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#243)"} !((St == 5) && (hsp_count < 8) && (1 <= (C[symb] - R[symb])) && (St == 1) && (body_index < body_iterations));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#244)"} !((1 <= (C[symb] - R[symb])) && (St == 2) && (!((St == 5) && (hsp_count < 8))) && (St == 5));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#245)"} !((1 <= (C[symb] - R[symb])) && (St == 2) && (St == 3) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#246)"} !((1 <= (C[symb] - R[symb])) && (St == 2) && (St == 4) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#247)"} !((1 <= (C[symb] - R[symb])) && (St == 2) && (1 <= (C[symb] - R[symb])) && (St == 1) && (body_index < body_iterations));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#248)"} !((!((St == 5) && (hsp_count < 8))) && (St == 5) && (St == 3) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#249)"} !((!((St == 5) && (hsp_count < 8))) && (St == 5) && (St == 4) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#250)"} !((!((St == 5) && (hsp_count < 8))) && (St == 5) && (1 <= (C[symb] - R[symb])) && (St == 1) && (body_index < body_iterations));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#251)"} !((St == 3) && (hsp_count < 8) && (St == 4) && (hsp_count < 8));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#252)"} !((St == 3) && (hsp_count < 8) && (1 <= (C[symb] - R[symb])) && (St == 1) && (body_index < body_iterations));
  assert {:msg "1.1: The actions of actor 'pulseShape' might not have mutually exclusive guards (#253)"} !((St == 4) && (hsp_count < 8) && (1 <= (C[symb] - R[symb])) && (St == 1) && (body_index < body_iterations));
}

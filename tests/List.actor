actor ListTest int in ==> int out :
  
  List(type: uint(size=32), size=16) Chip_map_table = [
								 0x744ac39b, 0x44ac39b7, 0x4ac39b74, 0xac39b744,
								 0xc39b744a, 0x39b744ac, 0x9b744ac3, 0xb744ac39,
								 0xdee06931, 0xee06931d, 0xe06931de, 0x6931dee,
								 0x6931dee0, 0x931dee06, 0x31dee069, 0x1dee0693];
  
  List(type: int, size=3) X = [10,11,12];

  invariant X == [10,11,12]
  invariant Chip_map_table = [
								 0x744ac39b, 0x44ac39b7, 0x4ac39b74, 0xac39b744,
								 0xc39b744a, 0x39b744ac, 0x9b744ac3, 0xb744ac39,
								 0xdee06931, 0xee06931d, 0xe06931de, 0x6931dee,
								 0x6931dee0, 0x931dee06, 0x31dee069, 0x1dee0693]

  action in:[i] ==> out:[X[i]] 
    guard 0 <= i && i < 3
  end
end

network Net int in ==> int out :
  action in:[i] ==> out:[y]
    var int y
    requires 0 <= i && i < 3
    ensures  i = 0 ==> y = 10
  end
  
  chinvariant 0 <= a[0] && a[0] < 3
  chinvariant rd(a) = tot(b)
  chinvariant (forall int i :: 0 <= i && i < tot(b) ==> 10 <= b[i] && b[i] <= 12)
  chinvariant (forall int i :: 0 <= i && i < tot(b) ==> a[i] = 0 ==> b[i] = 10)
  
  entities
    l = ListTest();
  end
  
  structure
    a: in --> l.in;
    b: l.out --> out;
  end
end
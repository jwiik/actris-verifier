actor ListTest int in ==> int out :
  
  invariant X[0] = 10 && X[1] = 11 && X[2] = 12
  
  List(type: int, size=3) X = [10,11,12];

  action in:[i] ==> out:[X[i]] 
    guard 0 <= i && i < 3
    var int o
  do 
    o := X[i];
  end
end

network Net int in ==> int out :
  action in:[i] ==> out:[y]
    var int y
    requires 0 <= i && i < 3
    ensures  i = 0 ==> y = 10
  end
  
  chinvariant 0 <= a[0] && a[0] < 3
  chinvariant rd(a) = tot(b)
  chinvariant (forall int i :: 0 <= i && i < tot(b) ==> 10 <= b[i] && b[i] <= 12)
  chinvariant (forall int i :: 0 <= i && i < tot(b) ==> a[i] = 0 ==> b[i] = 10)
  
  entities
    l = ListTest();
  end
  
  structure
    a: in --> l.in;
    b: l.out --> out;
  end
end
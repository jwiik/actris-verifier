package fi.oulu.ee.mpeg4.part2.sp;

import org.sc29.wg11.mpeg4.part2.Constants.*;

actor Algo_IAP () int(size=SAMPLE_SZ) PQF_AC, int(size=MB_COORD_SZ +
3) PTR, int(size=3) AC_PRED_DIR ==> int(size=SAMPLE_SZ) QF_AC :

  int(size=8) count;

  // Use 3 address lines for component index to save address calculation effort
  // Also, location 0 is reserved for all uncoded blocks. This protocol must
  // be identical to the buffer addressing in Predict.cal and Sequence.cal, since
  // pointer values are generated there.
  int BUF_SIZE = (MAXW_IN_MB + 2) * 8;

  int(size=MB_COORD_SZ + 3) ptr;

  int(size=MB_COORD_SZ + 3) pred_ptr;


  // Initialize to the dummy values needed for uncoded blocks (always mapped to index 0)
  // Add 4 address lines  so that we can store the left edge and top edge AC values (14 in all).
  List(type: int(size=SAMPLE_SZ), size=BUF_SIZE * 16) buf;

  int(size=4) comp;

  bool top;

  bool acpred_flag;

  newvop: action AC_PRED_DIR:[ s ] ==>
  guard
    s = -2
  do
    comp := 0;
    ptr := 8;
    // Start at 8, since 0-7 are reserved

  end

  skip: action AC_PRED_DIR:[ s ] ==>
  guard
    s < 0
  do
    count := 64;
  end	

  start: action AC_PRED_DIR:[ s ], PTR:[ p ] ==>
  do
    count := 1;
    pred_ptr := p;
    top := s = 2;
    acpred_flag := s != 0;
  end

  advance: action ==>
  guard
    count = 64
  do
    comp := comp + 1;
    if comp = 6 then
      comp := 0;
      ptr := if ptr = 8 then
        BUF_SIZE - 8
      else
        ptr - 8
      end;
    end
  end

  copy: action PQF_AC:[ ac ] ==> QF_AC:[ pred ]
  var
    int(size=SAMPLE_SZ) pred := ac , int(size=4) v = (count & 7) ,
    int(size=4) h = ((count >> 3) & 7) , bool top_edge = (h = 0) ,
    bool left_edge = (v = 0) , int(size=5) index = if top_edge then
      v
    else
      (h | 8)
    end
  do
    if acpred_flag and ((top and top_edge) or ((not top) and left_edge)) then
      pred := pred + buf[((pred_ptr << 4) | index)];
    end
    if left_edge or top_edge then
      buf[(((ptr | comp) << 4) | index)] := pred;
    end
    count := count + 1;
  end


  schedule fsm start :
    start ( newvop ) --> start;
    start ( skip ) --> pred;
    start ( start ) --> pred;
    pred ( copy ) --> pred;
    pred ( advance ) --> start;
  end

  priority
    newvop > skip > start;
    advance > copy;
  end

end

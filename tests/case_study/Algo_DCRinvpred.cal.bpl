// ---------------------------------------------------------------
// -- Types and global variables ---------------------------------
// ---------------------------------------------------------------
type Ref;
type Chan a;
type Field a;
type Actor;
type CType = <a>[Chan a]int;
type MType = <a>[Chan a][int]a;
type Obj = <a>[Field a]a;
type HType = [Ref]Obj;
type ModeType = [Actor]int;

var M#: MType;
var C#: CType;
var R#: CType;
var I#: CType;
var B#: CType;
var Mode#: ModeType;
var I#sub: CType;

var H#: HType;

const unique this#: Actor;

function AT#Min(x:int, y: int): int { if x <= y then x else y }

// ---------------------------------------------------------------
// -- Axiomatisation for map data type ---------------------------
// ---------------------------------------------------------------
type Map a b;

function Map#Select<T,U>(Map T U, T): U;
function Map#Store<T,U>(Map T U, T, U): Map T U;
axiom (
  forall<T,U> m: Map T U, k1: T, val: U :: { Map#Store(m,k1,val) }
    Map#Select(Map#Store(m,k1,val),k1) == val
);
axiom (
  forall<T,U> m: Map T U, k1: T, k2: T, val: U :: { Map#Select(Map#Store(m,k1,val),k2) }
    k1 != k2 ==> Map#Select(Map#Store(m,k1,val),k2) == Map#Select(m,k2)
);

// ---------------------------------------------------------------
// -- Bit vector operations --------------------------------------
// ---------------------------------------------------------------
// Size: 6
function {:bvbuiltin "bvand"} AT#BvAnd6(a: bv6, b: bv6): bv6;
function {:bvbuiltin "bvor"} AT#BvOr6(a: bv6, b: bv6): bv6;
function {:bvbuiltin "bvnot"} AT#BvNot6(a: bv6): bv6;
function {:bvbuiltin "bvneg"} AT#BvNeg6(a: bv6): bv6;
function {:bvbuiltin "bvadd"} AT#BvAdd6(a: bv6, b: bv6): bv6;
function {:bvbuiltin "bvsub"} AT#BvSub6(a: bv6, b: bv6): bv6;
function {:bvbuiltin "bvmul"} AT#BvMul6(a: bv6, b: bv6): bv6;
function {:bvbuiltin "bvsdiv"} AT#BvSdiv6(a: bv6, b: bv6): bv6;
function {:bvbuiltin "bvudiv"} AT#BvUdiv6(a: bv6, b: bv6): bv6;
function {:bvbuiltin "bvshl"} AT#BvShl6(bv6,bv6): bv6;
function {:bvbuiltin "bvlshr"} AT#BvLshr6(bv6,bv6): bv6;
function {:bvbuiltin "bvashr"} AT#BvAshr6(bv6,bv6): bv6;
function {:bvbuiltin "bvule"} AT#BvUle6(a: bv6, b: bv6): bool;
function {:bvbuiltin "bvult"} AT#BvUlt6(a: bv6, b: bv6): bool;
function {:bvbuiltin "bvuge"} AT#BvUge6(a: bv6, b: bv6): bool;
function {:bvbuiltin "bvugt"} AT#BvUgt6(a: bv6, b: bv6): bool;
function {:bvbuiltin "bvsle"} AT#BvSle6(a: bv6, b: bv6): bool;
function {:bvbuiltin "bvslt"} AT#BvSlt6(a: bv6, b: bv6): bool;
function {:bvbuiltin "bvsge"} AT#BvSge6(a: bv6, b: bv6): bool;
function {:bvbuiltin "bvsgt"} AT#BvSgt6(a: bv6, b: bv6): bool;
function AT#BvXor6(a: bv6, b: bv6): bv6;
function AT#BvAbs6(a: bv6): bv6;

axiom (forall a,b: bv6 :: AT#BvXor6(a,b) == AT#BvAnd6(AT#BvOr6(a,b), AT#BvNot6(AT#BvAnd6(a,b))) );
axiom (forall a,b: bv6 :: AT#BvAbs6(a) == (if AT#BvSle6(0bv6,a) then a else AT#BvNeg6(a)) );

// ---------------------------------------------------------------
// -- Bit vector operations --------------------------------------
// ---------------------------------------------------------------
// Size: 7
function {:bvbuiltin "bvand"} AT#BvAnd7(a: bv7, b: bv7): bv7;
function {:bvbuiltin "bvor"} AT#BvOr7(a: bv7, b: bv7): bv7;
function {:bvbuiltin "bvnot"} AT#BvNot7(a: bv7): bv7;
function {:bvbuiltin "bvneg"} AT#BvNeg7(a: bv7): bv7;
function {:bvbuiltin "bvadd"} AT#BvAdd7(a: bv7, b: bv7): bv7;
function {:bvbuiltin "bvsub"} AT#BvSub7(a: bv7, b: bv7): bv7;
function {:bvbuiltin "bvmul"} AT#BvMul7(a: bv7, b: bv7): bv7;
function {:bvbuiltin "bvsdiv"} AT#BvSdiv7(a: bv7, b: bv7): bv7;
function {:bvbuiltin "bvudiv"} AT#BvUdiv7(a: bv7, b: bv7): bv7;
function {:bvbuiltin "bvshl"} AT#BvShl7(bv7,bv7): bv7;
function {:bvbuiltin "bvlshr"} AT#BvLshr7(bv7,bv7): bv7;
function {:bvbuiltin "bvashr"} AT#BvAshr7(bv7,bv7): bv7;
function {:bvbuiltin "bvule"} AT#BvUle7(a: bv7, b: bv7): bool;
function {:bvbuiltin "bvult"} AT#BvUlt7(a: bv7, b: bv7): bool;
function {:bvbuiltin "bvuge"} AT#BvUge7(a: bv7, b: bv7): bool;
function {:bvbuiltin "bvugt"} AT#BvUgt7(a: bv7, b: bv7): bool;
function {:bvbuiltin "bvsle"} AT#BvSle7(a: bv7, b: bv7): bool;
function {:bvbuiltin "bvslt"} AT#BvSlt7(a: bv7, b: bv7): bool;
function {:bvbuiltin "bvsge"} AT#BvSge7(a: bv7, b: bv7): bool;
function {:bvbuiltin "bvsgt"} AT#BvSgt7(a: bv7, b: bv7): bool;
function AT#BvXor7(a: bv7, b: bv7): bv7;
function AT#BvAbs7(a: bv7): bv7;

axiom (forall a,b: bv7 :: AT#BvXor7(a,b) == AT#BvAnd7(AT#BvOr7(a,b), AT#BvNot7(AT#BvAnd7(a,b))) );
axiom (forall a,b: bv7 :: AT#BvAbs7(a) == (if AT#BvSle7(0bv7,a) then a else AT#BvNeg7(a)) );

// ---------------------------------------------------------------
// -- Bit vector operations --------------------------------------
// ---------------------------------------------------------------
// Size: 4
function {:bvbuiltin "bvand"} AT#BvAnd4(a: bv4, b: bv4): bv4;
function {:bvbuiltin "bvor"} AT#BvOr4(a: bv4, b: bv4): bv4;
function {:bvbuiltin "bvnot"} AT#BvNot4(a: bv4): bv4;
function {:bvbuiltin "bvneg"} AT#BvNeg4(a: bv4): bv4;
function {:bvbuiltin "bvadd"} AT#BvAdd4(a: bv4, b: bv4): bv4;
function {:bvbuiltin "bvsub"} AT#BvSub4(a: bv4, b: bv4): bv4;
function {:bvbuiltin "bvmul"} AT#BvMul4(a: bv4, b: bv4): bv4;
function {:bvbuiltin "bvsdiv"} AT#BvSdiv4(a: bv4, b: bv4): bv4;
function {:bvbuiltin "bvudiv"} AT#BvUdiv4(a: bv4, b: bv4): bv4;
function {:bvbuiltin "bvshl"} AT#BvShl4(bv4,bv4): bv4;
function {:bvbuiltin "bvlshr"} AT#BvLshr4(bv4,bv4): bv4;
function {:bvbuiltin "bvashr"} AT#BvAshr4(bv4,bv4): bv4;
function {:bvbuiltin "bvule"} AT#BvUle4(a: bv4, b: bv4): bool;
function {:bvbuiltin "bvult"} AT#BvUlt4(a: bv4, b: bv4): bool;
function {:bvbuiltin "bvuge"} AT#BvUge4(a: bv4, b: bv4): bool;
function {:bvbuiltin "bvugt"} AT#BvUgt4(a: bv4, b: bv4): bool;
function {:bvbuiltin "bvsle"} AT#BvSle4(a: bv4, b: bv4): bool;
function {:bvbuiltin "bvslt"} AT#BvSlt4(a: bv4, b: bv4): bool;
function {:bvbuiltin "bvsge"} AT#BvSge4(a: bv4, b: bv4): bool;
function {:bvbuiltin "bvsgt"} AT#BvSgt4(a: bv4, b: bv4): bool;
function AT#BvXor4(a: bv4, b: bv4): bv4;
function AT#BvAbs4(a: bv4): bv4;

axiom (forall a,b: bv4 :: AT#BvXor4(a,b) == AT#BvAnd4(AT#BvOr4(a,b), AT#BvNot4(AT#BvAnd4(a,b))) );
axiom (forall a,b: bv4 :: AT#BvAbs4(a) == (if AT#BvSle4(0bv4,a) then a else AT#BvNeg4(a)) );

// ---------------------------------------------------------------
// -- Bit vector operations --------------------------------------
// ---------------------------------------------------------------
// Size: 12
function {:bvbuiltin "bvand"} AT#BvAnd12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvor"} AT#BvOr12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvnot"} AT#BvNot12(a: bv12): bv12;
function {:bvbuiltin "bvneg"} AT#BvNeg12(a: bv12): bv12;
function {:bvbuiltin "bvadd"} AT#BvAdd12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvsub"} AT#BvSub12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvmul"} AT#BvMul12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvsdiv"} AT#BvSdiv12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvudiv"} AT#BvUdiv12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvshl"} AT#BvShl12(bv12,bv12): bv12;
function {:bvbuiltin "bvlshr"} AT#BvLshr12(bv12,bv12): bv12;
function {:bvbuiltin "bvashr"} AT#BvAshr12(bv12,bv12): bv12;
function {:bvbuiltin "bvule"} AT#BvUle12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvult"} AT#BvUlt12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvuge"} AT#BvUge12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvugt"} AT#BvUgt12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvsle"} AT#BvSle12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvslt"} AT#BvSlt12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvsge"} AT#BvSge12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvsgt"} AT#BvSgt12(a: bv12, b: bv12): bool;
function AT#BvXor12(a: bv12, b: bv12): bv12;
function AT#BvAbs12(a: bv12): bv12;

axiom (forall a,b: bv12 :: AT#BvXor12(a,b) == AT#BvAnd12(AT#BvOr12(a,b), AT#BvNot12(AT#BvAnd12(a,b))) );
axiom (forall a,b: bv12 :: AT#BvAbs12(a) == (if AT#BvSle12(0bv12,a) then a else AT#BvNeg12(a)) );

// ---------------------------------------------------------------
// -- Bit vector operations --------------------------------------
// ---------------------------------------------------------------
// Size: 32
function {:bvbuiltin "bvand"} AT#BvAnd32(a: bv32, b: bv32): bv32;
function {:bvbuiltin "bvor"} AT#BvOr32(a: bv32, b: bv32): bv32;
function {:bvbuiltin "bvnot"} AT#BvNot32(a: bv32): bv32;
function {:bvbuiltin "bvneg"} AT#BvNeg32(a: bv32): bv32;
function {:bvbuiltin "bvadd"} AT#BvAdd32(a: bv32, b: bv32): bv32;
function {:bvbuiltin "bvsub"} AT#BvSub32(a: bv32, b: bv32): bv32;
function {:bvbuiltin "bvmul"} AT#BvMul32(a: bv32, b: bv32): bv32;
function {:bvbuiltin "bvsdiv"} AT#BvSdiv32(a: bv32, b: bv32): bv32;
function {:bvbuiltin "bvudiv"} AT#BvUdiv32(a: bv32, b: bv32): bv32;
function {:bvbuiltin "bvshl"} AT#BvShl32(bv32,bv32): bv32;
function {:bvbuiltin "bvlshr"} AT#BvLshr32(bv32,bv32): bv32;
function {:bvbuiltin "bvashr"} AT#BvAshr32(bv32,bv32): bv32;
function {:bvbuiltin "bvule"} AT#BvUle32(a: bv32, b: bv32): bool;
function {:bvbuiltin "bvult"} AT#BvUlt32(a: bv32, b: bv32): bool;
function {:bvbuiltin "bvuge"} AT#BvUge32(a: bv32, b: bv32): bool;
function {:bvbuiltin "bvugt"} AT#BvUgt32(a: bv32, b: bv32): bool;
function {:bvbuiltin "bvsle"} AT#BvSle32(a: bv32, b: bv32): bool;
function {:bvbuiltin "bvslt"} AT#BvSlt32(a: bv32, b: bv32): bool;
function {:bvbuiltin "bvsge"} AT#BvSge32(a: bv32, b: bv32): bool;
function {:bvbuiltin "bvsgt"} AT#BvSgt32(a: bv32, b: bv32): bool;
function AT#BvXor32(a: bv32, b: bv32): bv32;
function AT#BvAbs32(a: bv32): bv32;

axiom (forall a,b: bv32 :: AT#BvXor32(a,b) == AT#BvAnd32(AT#BvOr32(a,b), AT#BvNot32(AT#BvAnd32(a,b))) );
axiom (forall a,b: bv32 :: AT#BvAbs32(a) == (if AT#BvSle32(0bv32,a) then a else AT#BvNeg32(a)) );

// ---------------------------------------------------------------
// -- Bit vector operations --------------------------------------
// ---------------------------------------------------------------
// Size: 3
function {:bvbuiltin "bvand"} AT#BvAnd3(a: bv3, b: bv3): bv3;
function {:bvbuiltin "bvor"} AT#BvOr3(a: bv3, b: bv3): bv3;
function {:bvbuiltin "bvnot"} AT#BvNot3(a: bv3): bv3;
function {:bvbuiltin "bvneg"} AT#BvNeg3(a: bv3): bv3;
function {:bvbuiltin "bvadd"} AT#BvAdd3(a: bv3, b: bv3): bv3;
function {:bvbuiltin "bvsub"} AT#BvSub3(a: bv3, b: bv3): bv3;
function {:bvbuiltin "bvmul"} AT#BvMul3(a: bv3, b: bv3): bv3;
function {:bvbuiltin "bvsdiv"} AT#BvSdiv3(a: bv3, b: bv3): bv3;
function {:bvbuiltin "bvudiv"} AT#BvUdiv3(a: bv3, b: bv3): bv3;
function {:bvbuiltin "bvshl"} AT#BvShl3(bv3,bv3): bv3;
function {:bvbuiltin "bvlshr"} AT#BvLshr3(bv3,bv3): bv3;
function {:bvbuiltin "bvashr"} AT#BvAshr3(bv3,bv3): bv3;
function {:bvbuiltin "bvule"} AT#BvUle3(a: bv3, b: bv3): bool;
function {:bvbuiltin "bvult"} AT#BvUlt3(a: bv3, b: bv3): bool;
function {:bvbuiltin "bvuge"} AT#BvUge3(a: bv3, b: bv3): bool;
function {:bvbuiltin "bvugt"} AT#BvUgt3(a: bv3, b: bv3): bool;
function {:bvbuiltin "bvsle"} AT#BvSle3(a: bv3, b: bv3): bool;
function {:bvbuiltin "bvslt"} AT#BvSlt3(a: bv3, b: bv3): bool;
function {:bvbuiltin "bvsge"} AT#BvSge3(a: bv3, b: bv3): bool;
function {:bvbuiltin "bvsgt"} AT#BvSgt3(a: bv3, b: bv3): bool;
function AT#BvXor3(a: bv3, b: bv3): bv3;
function AT#BvAbs3(a: bv3): bv3;

axiom (forall a,b: bv3 :: AT#BvXor3(a,b) == AT#BvAnd3(AT#BvOr3(a,b), AT#BvNot3(AT#BvAnd3(a,b))) );
axiom (forall a,b: bv3 :: AT#BvAbs3(a) == (if AT#BvSle3(0bv3,a) then a else AT#BvNeg3(a)) );

// ---------------------------------------------------------------
// -- Bit vector operations --------------------------------------
// ---------------------------------------------------------------
// Size: 13
function {:bvbuiltin "bvand"} AT#BvAnd13(a: bv13, b: bv13): bv13;
function {:bvbuiltin "bvor"} AT#BvOr13(a: bv13, b: bv13): bv13;
function {:bvbuiltin "bvnot"} AT#BvNot13(a: bv13): bv13;
function {:bvbuiltin "bvneg"} AT#BvNeg13(a: bv13): bv13;
function {:bvbuiltin "bvadd"} AT#BvAdd13(a: bv13, b: bv13): bv13;
function {:bvbuiltin "bvsub"} AT#BvSub13(a: bv13, b: bv13): bv13;
function {:bvbuiltin "bvmul"} AT#BvMul13(a: bv13, b: bv13): bv13;
function {:bvbuiltin "bvsdiv"} AT#BvSdiv13(a: bv13, b: bv13): bv13;
function {:bvbuiltin "bvudiv"} AT#BvUdiv13(a: bv13, b: bv13): bv13;
function {:bvbuiltin "bvshl"} AT#BvShl13(bv13,bv13): bv13;
function {:bvbuiltin "bvlshr"} AT#BvLshr13(bv13,bv13): bv13;
function {:bvbuiltin "bvashr"} AT#BvAshr13(bv13,bv13): bv13;
function {:bvbuiltin "bvule"} AT#BvUle13(a: bv13, b: bv13): bool;
function {:bvbuiltin "bvult"} AT#BvUlt13(a: bv13, b: bv13): bool;
function {:bvbuiltin "bvuge"} AT#BvUge13(a: bv13, b: bv13): bool;
function {:bvbuiltin "bvugt"} AT#BvUgt13(a: bv13, b: bv13): bool;
function {:bvbuiltin "bvsle"} AT#BvSle13(a: bv13, b: bv13): bool;
function {:bvbuiltin "bvslt"} AT#BvSlt13(a: bv13, b: bv13): bool;
function {:bvbuiltin "bvsge"} AT#BvSge13(a: bv13, b: bv13): bool;
function {:bvbuiltin "bvsgt"} AT#BvSgt13(a: bv13, b: bv13): bool;
function AT#BvXor13(a: bv13, b: bv13): bv13;
function AT#BvAbs13(a: bv13): bv13;

axiom (forall a,b: bv13 :: AT#BvXor13(a,b) == AT#BvAnd13(AT#BvOr13(a,b), AT#BvNot13(AT#BvAnd13(a,b))) );
axiom (forall a,b: bv13 :: AT#BvAbs13(a) == (if AT#BvSle13(0bv13,a) then a else AT#BvNeg13(a)) );

// ---------------------------------------------------------------
// -- End of prelude ---------------------------------------------
// ---------------------------------------------------------------

function Algo_DCRinvpred#saturate(x: bv13) returns (out: bv13);
function Algo_DCRinvpred#dc_scaler() returns (out: bv7);
procedure Algo_DCRinvpred#init#0()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (I#[BTYPE] == 0) && (R#[BTYPE] == 0) && (C#[BTYPE] == 0);
  assume (I#[A] == 0) && (R#[A] == 0) && (C#[A] == 0);
  assume (I#[B] == 0) && (R#[B] == 0) && (C#[B] == 0);
  assume (I#[C] == 0) && (R#[C] == 0) && (C#[C] == 0);
  assume (I#[QFS_DC] == 0) && (R#[QFS_DC] == 0) && (C#[QFS_DC] == 0);
  assume (I#[QP] == 0) && (R#[QP] == 0) && (C#[QP] == 0);
  assume (I#[QF_DC] == 0) && (R#[QF_DC] == 0) && (C#[QF_DC] == 0);
  assume (I#[PTR] == 0) && (R#[PTR] == 0) && (C#[PTR] == 0);
  assume (I#[AC_PRED_DIR] == 0) && (R#[AC_PRED_DIR] == 0) && (C#[AC_PRED_DIR] == 0);
  assume (I#[MODE] == 0) && (R#[MODE] == 0) && (C#[MODE] == 0);
  assume (I#[SIGNED] == 0) && (R#[SIGNED] == 0) && (C#[SIGNED] == 0);
  assume (I#[QUANT] == 0) && (R#[QUANT] == 0) && (C#[QUANT] == 0);
  comp := 0bv4;
  ptr := 8bv32;
  St# := read;
  assert {:msg "Algo_DCRinvpred.cal(86.12): Initialization might not establish the invariant (#0)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Initialization might not establish the invariant (#1)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Initialization might not establish the invariant (#2)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Initialization might not establish the invariant (#3)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Initialization might not establish the invariant (#4)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Initialization might not establish the invariant (#5)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Initialization might not establish the invariant (#6)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Initialization might not establish the invariant (#7)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Initialization might not establish the invariant (#8)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Initialization might not establish the invariant (#9)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Initialization might not establish the invariant (#10)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Initialization might not establish the invariant (#11)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Initialization might not establish the invariant (#12)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Initialization might not establish the invariant (#13)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Initialization might not establish the invariant (#14)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Initialization might not establish the invariant (#15)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Initialization might not establish the invariant (#16)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Initialization might not establish the invariant (#17)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Initialization might not establish the invariant (#18)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Initialization might not establish the invariant (#19)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Initialization might not establish the invariant (#20)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Initialization might not establish the invariant (#21)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Initialization might not establish the invariant (#22)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Initialization might not establish the invariant (#23)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Initialization might not establish the invariant (#24)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Initialization might not establish the invariant (#25)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Initialization might not establish the invariant (#26)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Initialization might not establish the invariant (#27)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Initialization might not establish the invariant (#28)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Initialization might not establish the invariant (#29)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#start#1()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  var QP#0: bv6;
  var C#0: bv11;
  var B#0: bv11;
  var BTYPE#0: bv12;
  var A#0: bv11;
  var QFS_DC#0: bv13;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume 1 <= (C#[BTYPE] - R#[BTYPE]);
  BTYPE#0 := M#[BTYPE][R#[BTYPE]];
  R#[BTYPE] := R#[BTYPE] + 1;
  assume (AT#BvAnd12(BTYPE#0, NEWVOP) != 0bv12) && (St# == read);
  comp := 0bv4;
  ptr := 8bv32;
  if (St# == read) {
    St# := getw;
  }
  M#[AC_PRED_DIR][C#[AC_PRED_DIR]] := AT#BvNeg3(2bv3);
  C#[AC_PRED_DIR] := C#[AC_PRED_DIR] + 1;
  assert {:msg "Algo_DCRinvpred.cal(86.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#30)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#31)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#32)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#33)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#34)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#35)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#36)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#37)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#38)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#39)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#40)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#41)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#42)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#43)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#44)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#45)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#46)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#47)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#48)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#49)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#50)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#51)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#52)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#53)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#54)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#55)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#56)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#57)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#58)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Action 'start' at Algo_DCRinvpred.cal(219.2) might not preserve the invariant (#59)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#skip#2()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  var QP#0: bv6;
  var C#0: bv11;
  var B#0: bv11;
  var BTYPE#0: bv12;
  var A#0: bv11;
  var QFS_DC#0: bv13;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume 1 <= (C#[BTYPE] - R#[BTYPE]);
  BTYPE#0 := M#[BTYPE][R#[BTYPE]];
  R#[BTYPE] := R#[BTYPE] + 1;
  assume (St# == getw) || (St# == geth);
  if (St# == getw) {
    St# := geth;
  } else {
    if (St# == geth) {
      St# := read;
    }
  }
  assert {:msg "Algo_DCRinvpred.cal(86.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#60)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#61)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#62)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#63)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#64)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#65)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#66)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#67)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#68)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#69)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#70)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#71)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#72)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#73)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#74)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#75)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#76)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#77)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#78)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#79)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#80)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#81)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#82)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#83)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#84)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#85)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#86)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#87)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#88)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Action 'skip' at Algo_DCRinvpred.cal(228.2) might not preserve the invariant (#89)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#read.inter_ac#3()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  var QP#0: bv6;
  var C#0: bv11;
  var B#0: bv11;
  var BTYPE#0: bv12;
  var A#0: bv11;
  var QFS_DC#0: bv13;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP]));
  BTYPE#0 := M#[BTYPE][R#[BTYPE]];
  R#[BTYPE] := R#[BTYPE] + 1;
  QP#0 := M#[QP][R#[QP]];
  R#[QP] := R#[QP] + 1;
  assume !((AT#BvAnd12(BTYPE#0, NEWVOP) != 0bv12) && (St# == read));
  assume (AT#BvAnd12(BTYPE#0, INTER) != 0bv12) && (AT#BvAnd12(BTYPE#0, ACCODED) != 0bv12) && (St# == read);
  is_signed := true;
  s_QP := QP#0;
  round := AT#BvXor6(AT#BvAnd6(s_QP, 1bv6), 1bv6)[2:0];
  if (St# == read) {
    St# := inter;
  }
  M#[AC_PRED_DIR][C#[AC_PRED_DIR]] := 0bv3;
  C#[AC_PRED_DIR] := C#[AC_PRED_DIR] + 1;
  M#[MODE][C#[MODE]] := 0bv3;
  C#[MODE] := C#[MODE] + 1;
  M#[PTR][C#[PTR]] := 0bv11;
  C#[PTR] := C#[PTR] + 1;
  M#[SIGNED][C#[SIGNED]] := true;
  C#[SIGNED] := C#[SIGNED] + 1;
  M#[QUANT][C#[QUANT]] := s_QP;
  C#[QUANT] := C#[QUANT] + 1;
  assert {:msg "Algo_DCRinvpred.cal(86.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#90)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#91)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#92)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#93)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#94)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#95)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#96)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#97)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#98)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#99)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#100)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#101)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#102)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#103)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#104)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#105)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#106)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#107)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#108)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#109)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#110)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#111)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#112)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#113)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#114)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#115)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#116)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#117)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#118)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Action 'read.inter_ac' at Algo_DCRinvpred.cal(231.2) might not preserve the invariant (#119)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#read.other#4()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  var QP#0: bv6;
  var C#0: bv11;
  var B#0: bv11;
  var BTYPE#0: bv12;
  var A#0: bv11;
  var QFS_DC#0: bv13;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP]));
  BTYPE#0 := M#[BTYPE][R#[BTYPE]];
  R#[BTYPE] := R#[BTYPE] + 1;
  QP#0 := M#[QP][R#[QP]];
  R#[QP] := R#[QP] + 1;
  assume !((AT#BvAnd12(BTYPE#0, INTER) != 0bv12) && (AT#BvAnd12(BTYPE#0, ACCODED) != 0bv12) && (St# == read));
  assume !((AT#BvAnd12(BTYPE#0, NEWVOP) != 0bv12) && (St# == read));
  assume (AT#BvAnd12(BTYPE#0, INTRA) == 0bv12) && (AT#BvAnd12(BTYPE#0, ACCODED) == 0bv12) && (St# == read);
  s_QP := QP#0;
  if (St# == read) {
    St# := advance;
  }
  M#[AC_PRED_DIR][C#[AC_PRED_DIR]] := AT#BvNeg3(1bv3);
  C#[AC_PRED_DIR] := C#[AC_PRED_DIR] + 1;
  assert {:msg "Algo_DCRinvpred.cal(86.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#120)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#121)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#122)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#123)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#124)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#125)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#126)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#127)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#128)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#129)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#130)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#131)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#132)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#133)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#134)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#135)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#136)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#137)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#138)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#139)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#140)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#141)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#142)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#143)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#144)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#145)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#146)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#147)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#148)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Action 'read.other' at Algo_DCRinvpred.cal(242.2) might not preserve the invariant (#149)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#read.intra#5()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  var QP#0: bv6;
  var C#0: bv11;
  var B#0: bv11;
  var BTYPE#0: bv12;
  var A#0: bv11;
  var QFS_DC#0: bv13;
  var dca: bv13;
  var dcb: bv13;
  var dcc: bv13;
  var horiz: bv13;
  var vert: bv13;
  var top: bool;
  var s: bv3;
  var ac: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (1 <= (C#[A] - R#[A])) && (1 <= (C#[B] - R#[B])) && (1 <= (C#[C] - R#[C]));
  BTYPE#0 := M#[BTYPE][R#[BTYPE]];
  R#[BTYPE] := R#[BTYPE] + 1;
  QP#0 := M#[QP][R#[QP]];
  R#[QP] := R#[QP] + 1;
  A#0 := M#[A][R#[A]];
  R#[A] := R#[A] + 1;
  B#0 := M#[B][R#[B]];
  R#[B] := R#[B] + 1;
  C#0 := M#[C][R#[C]];
  R#[C] := R#[C] + 1;
  assume !((AT#BvAnd12(BTYPE#0, INTRA) == 0bv12) && (AT#BvAnd12(BTYPE#0, ACCODED) == 0bv12) && (St# == read));
  assume !((AT#BvAnd12(BTYPE#0, INTER) != 0bv12) && (AT#BvAnd12(BTYPE#0, ACCODED) != 0bv12) && (St# == read));
  assume !((AT#BvAnd12(BTYPE#0, NEWVOP) != 0bv12) && (St# == read));
  assume St# == read;
  assume dca == Map#Select(dc_buf, 0bv21 ++ A#0);
  assume dcb == Map#Select(dc_buf, 0bv21 ++ B#0);
  assume dcc == Map#Select(dc_buf, 0bv21 ++ C#0);
  assume horiz == AT#BvAbs13(AT#BvSub13(dcb, dcc));
  assume vert == AT#BvAbs13(AT#BvSub13(dca, dcb));
  assume top == AT#BvSlt13(vert, horiz);
  assume ac == (AT#BvAnd12(BTYPE#0, ACPRED) != 0bv12);
  s_QP := QP#0;
  scaler := Algo_DCRinvpred#dc_scaler();
  dc_pred := AT#BvAdd13((if top then dcc else dca), 0bv6 ++ AT#BvSdiv7(AT#BvAshr7(scaler, 1bv7), scaler));
  s := (if !ac then 0bv3 else (if top then 2bv3 else 1bv3));
  is_signed := scaler == 0bv7;
  if (St# == read) {
    St# := intra;
  }
  M#[PTR][C#[PTR]] := (if top then C#0 else A#0);
  C#[PTR] := C#[PTR] + 1;
  M#[AC_PRED_DIR][C#[AC_PRED_DIR]] := s;
  C#[AC_PRED_DIR] := C#[AC_PRED_DIR] + 1;
  M#[MODE][C#[MODE]] := s;
  C#[MODE] := C#[MODE] + 1;
  M#[SIGNED][C#[SIGNED]] := is_signed;
  C#[SIGNED] := C#[SIGNED] + 1;
  M#[QUANT][C#[QUANT]] := s_QP;
  C#[QUANT] := C#[QUANT] + 1;
  assert {:msg "Algo_DCRinvpred.cal(86.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#150)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#151)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#152)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#153)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#154)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#155)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#156)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#157)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#158)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#159)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#160)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#161)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#162)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#163)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#164)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#165)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#166)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#167)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#168)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#169)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#170)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#171)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#172)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#173)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#174)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#175)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#176)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#177)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#178)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Action 'read.intra' at Algo_DCRinvpred.cal(251.2) might not preserve the invariant (#179)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#getdc.inter#6()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  var QP#0: bv6;
  var C#0: bv11;
  var B#0: bv11;
  var BTYPE#0: bv12;
  var A#0: bv11;
  var QFS_DC#0: bv13;
  var v: bv13;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume 1 <= (C#[QFS_DC] - R#[QFS_DC]);
  QFS_DC#0 := M#[QFS_DC][R#[QFS_DC]];
  R#[QFS_DC] := R#[QFS_DC] + 1;
  assume St# == inter;
  assume v == AT#BvSub13(AT#BvMul13(0bv7 ++ s_QP, AT#BvAdd13(AT#BvShl13(AT#BvAbs13(QFS_DC#0), 1bv13), 1bv13)), 0bv11 ++ round);
  dc_val := (if QFS_DC#0 == 0bv13 then 0bv13 else (if !is_signed then QFS_DC#0 else (if AT#BvSlt13(QFS_DC#0, 0bv13) then AT#BvNeg13(v) else v)));
  if (St# == inter) {
    St# := sat;
  }
  assert {:msg "Algo_DCRinvpred.cal(86.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#180)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#181)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#182)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#183)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#184)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#185)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#186)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#187)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#188)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#189)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#190)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#191)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#192)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#193)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#194)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#195)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#196)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#197)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#198)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#199)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#200)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#201)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#202)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#203)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#204)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#205)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#206)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#207)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#208)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Action 'getdc.inter' at Algo_DCRinvpred.cal(294.2) might not preserve the invariant (#209)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#getdc.intra#7()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  var QP#0: bv6;
  var C#0: bv11;
  var B#0: bv11;
  var BTYPE#0: bv12;
  var A#0: bv11;
  var QFS_DC#0: bv13;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume 1 <= (C#[QFS_DC] - R#[QFS_DC]);
  QFS_DC#0 := M#[QFS_DC][R#[QFS_DC]];
  R#[QFS_DC] := R#[QFS_DC] + 1;
  assume St# == intra;
  dc_val := AT#BvMul13(AT#BvAdd13(QFS_DC#0, dc_pred), 0bv6 ++ scaler);
  if (St# == intra) {
    St# := sat;
  }
  assert {:msg "Algo_DCRinvpred.cal(86.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#210)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#211)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#212)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#213)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#214)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#215)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#216)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#217)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#218)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#219)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#220)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#221)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#222)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#223)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#224)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#225)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#226)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#227)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#228)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#229)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#230)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#231)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#232)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#233)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#234)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#235)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#236)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#237)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#238)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Action 'getdc.intra' at Algo_DCRinvpred.cal(315.2) might not preserve the invariant (#239)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#sat#8()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  var QP#0: bv6;
  var C#0: bv11;
  var B#0: bv11;
  var BTYPE#0: bv12;
  var A#0: bv11;
  var QFS_DC#0: bv13;
  var dc: bv13;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume true;
  assume St# == sat;
  assume dc == Algo_DCRinvpred#saturate(dc_val);
  dc_buf := Map#Store(dc_buf, AT#BvOr32(ptr, 0bv28 ++ comp), dc);
  if (St# == sat) {
    St# := advance;
  }
  M#[QF_DC][C#[QF_DC]] := dc;
  C#[QF_DC] := C#[QF_DC] + 1;
  assert {:msg "Algo_DCRinvpred.cal(86.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#240)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#241)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#242)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#243)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#244)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#245)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#246)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#247)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#248)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#249)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#250)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#251)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#252)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#253)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#254)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#255)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#256)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#257)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#258)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#259)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#260)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#261)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#262)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#263)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#264)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#265)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#266)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#267)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#268)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Action 'sat' at Algo_DCRinvpred.cal(322.2) might not preserve the invariant (#269)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#advance#9()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  var QP#0: bv6;
  var C#0: bv11;
  var B#0: bv11;
  var BTYPE#0: bv12;
  var A#0: bv11;
  var QFS_DC#0: bv13;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume true;
  assume St# == advance;
  comp := AT#BvAdd4(comp, 1bv4);
  if (comp == 6bv4) {
    comp := 0bv4;
    ptr := (if ptr == 8bv32 then AT#BvSub32(BUF_SIZE, 8bv32) else AT#BvSub32(ptr, 8bv32));
  }
  if (St# == advance) {
    St# := read;
  }
  assert {:msg "Algo_DCRinvpred.cal(86.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#270)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#271)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#272)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#273)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#274)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#275)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#276)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#277)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#278)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#279)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#280)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#281)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#282)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#283)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#284)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#285)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#286)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#287)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#288)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#289)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#290)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#291)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#292)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#293)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#294)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#295)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#296)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#297)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#298)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Action 'advance' at Algo_DCRinvpred.cal(329.2) might not preserve the invariant (#299)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred##GuardWD#10()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  var BTYPE#0: bv12;
  var QFS_DC#0: bv13;
  var C#0: bv11;
  var B#0: bv11;
  var QP#0: bv6;
  var A#0: bv11;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'skip' and 'getdc.intra' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#300)"} !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && ((St# == getw) || (St# == geth)) && true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == intra));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'skip' and 'advance' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#301)"} !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && ((St# == getw) || (St# == geth)) && true && true && (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'skip' and 'start' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#302)"} !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && ((St# == getw) || (St# == geth)) && true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'skip' and 'read.inter_ac' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#303)"} !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && ((St# == getw) || (St# == geth)) && true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'skip' and 'read.other' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#304)"} !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && ((St# == getw) || (St# == geth)) && true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'skip' and 'getdc.inter' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#305)"} !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && ((St# == getw) || (St# == geth)) && true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == inter));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'skip' and 'read.intra' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#306)"} !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && ((St# == getw) || (St# == geth)) && true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (1 <= (C#[A] - R#[A])) && (1 <= (C#[B] - R#[B])) && (1 <= (C#[C] - R#[C])) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'skip' and 'sat' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#307)"} !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && ((St# == getw) || (St# == geth)) && true && true && (St# == sat));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'getdc.intra' and 'advance' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#308)"} !(true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == intra) && true && true && (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'getdc.intra' and 'start' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#309)"} !(true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == intra) && true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'getdc.intra' and 'read.inter_ac' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#310)"} !(true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == intra) && true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'getdc.intra' and 'read.other' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#311)"} !(true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == intra) && true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'getdc.intra' and 'getdc.inter' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#312)"} !(true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == intra) && true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == inter));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'getdc.intra' and 'read.intra' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#313)"} !(true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == intra) && true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (1 <= (C#[A] - R#[A])) && (1 <= (C#[B] - R#[B])) && (1 <= (C#[C] - R#[C])) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'getdc.intra' and 'sat' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#314)"} !(true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == intra) && true && true && (St# == sat));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'advance' and 'start' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#315)"} !(true && true && (St# == advance) && true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'advance' and 'read.inter_ac' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#316)"} !(true && true && (St# == advance) && true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'advance' and 'read.other' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#317)"} !(true && true && (St# == advance) && true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'advance' and 'getdc.inter' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#318)"} !(true && true && (St# == advance) && true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == inter));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'advance' and 'read.intra' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#319)"} !(true && true && (St# == advance) && true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (1 <= (C#[A] - R#[A])) && (1 <= (C#[B] - R#[B])) && (1 <= (C#[C] - R#[C])) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'advance' and 'sat' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#320)"} !(true && true && (St# == advance) && true && true && (St# == sat));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'start' and 'read.inter_ac' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#321)"} !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read) && true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'start' and 'read.other' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#322)"} !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read) && true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'start' and 'getdc.inter' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#323)"} !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read) && true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == inter));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'start' and 'read.intra' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#324)"} !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read) && true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (1 <= (C#[A] - R#[A])) && (1 <= (C#[B] - R#[B])) && (1 <= (C#[C] - R#[C])) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'start' and 'sat' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#325)"} !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read) && true && true && (St# == sat));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'read.inter_ac' and 'read.other' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#326)"} !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read) && true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'read.inter_ac' and 'getdc.inter' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#327)"} !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read) && true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == inter));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'read.inter_ac' and 'read.intra' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#328)"} !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read) && true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (1 <= (C#[A] - R#[A])) && (1 <= (C#[B] - R#[B])) && (1 <= (C#[C] - R#[C])) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'read.inter_ac' and 'sat' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#329)"} !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read) && true && true && (St# == sat));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'read.other' and 'getdc.inter' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#330)"} !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read) && true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == inter));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'read.other' and 'read.intra' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#331)"} !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read) && true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (1 <= (C#[A] - R#[A])) && (1 <= (C#[B] - R#[B])) && (1 <= (C#[C] - R#[C])) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'read.other' and 'sat' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#332)"} !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read) && true && true && (St# == sat));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'getdc.inter' and 'read.intra' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#333)"} !(true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == inter) && true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (1 <= (C#[A] - R#[A])) && (1 <= (C#[B] - R#[B])) && (1 <= (C#[C] - R#[C])) && (St# == read));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'getdc.inter' and 'sat' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#334)"} !(true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == inter) && true && true && (St# == sat));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'read.intra' and 'sat' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#335)"} !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (1 <= (C#[A] - R#[A])) && (1 <= (C#[B] - R#[B])) && (1 <= (C#[C] - R#[C])) && (St# == read) && true && true && (St# == sat));
}
procedure Algo_DCRinvpred#contract#StartMode#input#11()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume Mode#[this#] == StartMode;
  assume R#[QF_DC] == I#[QF_DC];
  assume R#[PTR] == I#[PTR];
  assume R#[AC_PRED_DIR] == I#[AC_PRED_DIR];
  assume R#[MODE] == I#[MODE];
  assume R#[SIGNED] == I#[SIGNED];
  assume R#[QUANT] == I#[QUANT];
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (C#[BTYPE] - I#[BTYPE]) < 3;
  C#[BTYPE] := C#[BTYPE] + 1;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12;
  assert {:msg "Algo_DCRinvpred.cal(86.12): Invariant might be falsified by actor input (#336)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Invariant might be falsified by actor input (#337)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Invariant might be falsified by actor input (#338)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Invariant might be falsified by actor input (#339)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Invariant might be falsified by actor input (#340)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Invariant might be falsified by actor input (#341)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Invariant might be falsified by actor input (#342)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Invariant might be falsified by actor input (#343)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Invariant might be falsified by actor input (#344)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Invariant might be falsified by actor input (#345)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Invariant might be falsified by actor input (#346)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Invariant might be falsified by actor input (#347)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Invariant might be falsified by actor input (#348)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Invariant might be falsified by actor input (#349)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Invariant might be falsified by actor input (#350)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Invariant might be falsified by actor input (#351)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Invariant might be falsified by actor input (#352)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Invariant might be falsified by actor input (#353)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Invariant might be falsified by actor input (#354)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Invariant might be falsified by actor input (#355)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Invariant might be falsified by actor input (#356)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Invariant might be falsified by actor input (#357)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#358)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#359)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#360)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#361)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#362)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#363)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#364)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#365)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#contract#StartMode#exit#12()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume Mode#[this#] == StartMode;
  assume R#[QF_DC] == I#[QF_DC];
  assume R#[PTR] == I#[PTR];
  assume R#[AC_PRED_DIR] == I#[AC_PRED_DIR];
  assume R#[MODE] == I#[MODE];
  assume R#[SIGNED] == I#[SIGNED];
  assume R#[QUANT] == I#[QUANT];
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (C#[BTYPE] - I#[BTYPE]) == 3;
  assume (C#[A] - I#[A]) == 0;
  assume (C#[B] - I#[B]) == 0;
  assume (C#[C] - I#[C]) == 0;
  assume (C#[QFS_DC] - I#[QFS_DC]) == 0;
  assume (C#[QP] - I#[QP]) == 0;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12;
  assume !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && ((St# == getw) || (St# == geth)));
  assume !(true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == intra));
  assume !(true && true && (St# == advance));
  assume !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read));
  assume !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read));
  assume !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read));
  assume !(true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == inter));
  assume !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (1 <= (C#[A] - R#[A])) && (1 <= (C#[B] - R#[B])) && (1 <= (C#[C] - R#[C])) && (St# == read));
  assume !(true && true && (St# == sat));
  assert {:msg "Algo_DCRinvpred.cal(24.2): The correct number of tokens might not be produced on output 'QF_DC' with contract 'StartMode' (#366)"} (C#[QF_DC] - I#[QF_DC]) == 0;
  assert {:msg "Algo_DCRinvpred.cal(24.2): The correct number of tokens might not be produced on output 'PTR' with contract 'StartMode' (#367)"} (C#[PTR] - I#[PTR]) == 0;
  assert {:msg "Algo_DCRinvpred.cal(24.2): The correct number of tokens might not be produced on output 'AC_PRED_DIR' with contract 'StartMode' (#368)"} (C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1;
  assert {:msg "Algo_DCRinvpred.cal(24.2): The correct number of tokens might not be produced on output 'MODE' with contract 'StartMode' (#369)"} (C#[MODE] - I#[MODE]) == 0;
  assert {:msg "Algo_DCRinvpred.cal(24.2): The correct number of tokens might not be produced on output 'SIGNED' with contract 'StartMode' (#370)"} (C#[SIGNED] - I#[SIGNED]) == 0;
  assert {:msg "Algo_DCRinvpred.cal(24.2): The correct number of tokens might not be produced on output 'QUANT' with contract 'StartMode' (#371)"} (C#[QUANT] - I#[QUANT]) == 0;
  R#[QF_DC] := R#[QF_DC] + 0;
  R#[PTR] := R#[PTR] + 0;
  R#[AC_PRED_DIR] := R#[AC_PRED_DIR] + 1;
  R#[MODE] := R#[MODE] + 0;
  R#[SIGNED] := R#[SIGNED] + 0;
  R#[QUANT] := R#[QUANT] + 0;
  I# := R#;
  assert {:msg "Algo_DCRinvpred.cal(86.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#372)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#373)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#374)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#375)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#376)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#377)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#378)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#379)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#380)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#381)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#382)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#383)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#384)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#385)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#386)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#387)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#388)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#389)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#390)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#391)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#392)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#393)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#394)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#395)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#396)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#397)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#398)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#399)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#400)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "The actor might not preserve the invariant with contract 'StartMode' at Algo_DCRinvpred.cal(24.2) (#401)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#contract#InterMode#input#13()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume Mode#[this#] == InterMode;
  assume R#[QF_DC] == I#[QF_DC];
  assume R#[PTR] == I#[PTR];
  assume R#[AC_PRED_DIR] == I#[AC_PRED_DIR];
  assume R#[MODE] == I#[MODE];
  assume R#[SIGNED] == I#[SIGNED];
  assume R#[QUANT] == I#[QUANT];
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (C#[BTYPE] - I#[BTYPE]) < 1;
  C#[BTYPE] := C#[BTYPE] + 1;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12;
  assume (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Algo_DCRinvpred.cal(86.12): Invariant might be falsified by actor input (#402)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Invariant might be falsified by actor input (#403)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Invariant might be falsified by actor input (#404)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Invariant might be falsified by actor input (#405)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Invariant might be falsified by actor input (#406)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Invariant might be falsified by actor input (#407)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Invariant might be falsified by actor input (#408)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Invariant might be falsified by actor input (#409)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Invariant might be falsified by actor input (#410)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Invariant might be falsified by actor input (#411)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Invariant might be falsified by actor input (#412)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Invariant might be falsified by actor input (#413)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Invariant might be falsified by actor input (#414)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Invariant might be falsified by actor input (#415)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Invariant might be falsified by actor input (#416)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Invariant might be falsified by actor input (#417)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Invariant might be falsified by actor input (#418)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Invariant might be falsified by actor input (#419)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Invariant might be falsified by actor input (#420)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Invariant might be falsified by actor input (#421)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Invariant might be falsified by actor input (#422)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Invariant might be falsified by actor input (#423)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#424)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#425)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#426)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#427)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#428)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#429)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#430)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#431)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#contract#InterMode#input#14()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume Mode#[this#] == InterMode;
  assume R#[QF_DC] == I#[QF_DC];
  assume R#[PTR] == I#[PTR];
  assume R#[AC_PRED_DIR] == I#[AC_PRED_DIR];
  assume R#[MODE] == I#[MODE];
  assume R#[SIGNED] == I#[SIGNED];
  assume R#[QUANT] == I#[QUANT];
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (C#[QP] - I#[QP]) < 1;
  C#[QP] := C#[QP] + 1;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12;
  assume (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Algo_DCRinvpred.cal(86.12): Invariant might be falsified by actor input (#432)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Invariant might be falsified by actor input (#433)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Invariant might be falsified by actor input (#434)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Invariant might be falsified by actor input (#435)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Invariant might be falsified by actor input (#436)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Invariant might be falsified by actor input (#437)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Invariant might be falsified by actor input (#438)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Invariant might be falsified by actor input (#439)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Invariant might be falsified by actor input (#440)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Invariant might be falsified by actor input (#441)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Invariant might be falsified by actor input (#442)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Invariant might be falsified by actor input (#443)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Invariant might be falsified by actor input (#444)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Invariant might be falsified by actor input (#445)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Invariant might be falsified by actor input (#446)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Invariant might be falsified by actor input (#447)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Invariant might be falsified by actor input (#448)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Invariant might be falsified by actor input (#449)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Invariant might be falsified by actor input (#450)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Invariant might be falsified by actor input (#451)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Invariant might be falsified by actor input (#452)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Invariant might be falsified by actor input (#453)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#454)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#455)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#456)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#457)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#458)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#459)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#460)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#461)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#contract#InterMode#input#15()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume Mode#[this#] == InterMode;
  assume R#[QF_DC] == I#[QF_DC];
  assume R#[PTR] == I#[PTR];
  assume R#[AC_PRED_DIR] == I#[AC_PRED_DIR];
  assume R#[MODE] == I#[MODE];
  assume R#[SIGNED] == I#[SIGNED];
  assume R#[QUANT] == I#[QUANT];
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (C#[QFS_DC] - I#[QFS_DC]) < 1;
  C#[QFS_DC] := C#[QFS_DC] + 1;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12;
  assume (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Algo_DCRinvpred.cal(86.12): Invariant might be falsified by actor input (#462)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Invariant might be falsified by actor input (#463)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Invariant might be falsified by actor input (#464)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Invariant might be falsified by actor input (#465)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Invariant might be falsified by actor input (#466)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Invariant might be falsified by actor input (#467)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Invariant might be falsified by actor input (#468)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Invariant might be falsified by actor input (#469)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Invariant might be falsified by actor input (#470)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Invariant might be falsified by actor input (#471)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Invariant might be falsified by actor input (#472)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Invariant might be falsified by actor input (#473)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Invariant might be falsified by actor input (#474)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Invariant might be falsified by actor input (#475)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Invariant might be falsified by actor input (#476)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Invariant might be falsified by actor input (#477)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Invariant might be falsified by actor input (#478)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Invariant might be falsified by actor input (#479)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Invariant might be falsified by actor input (#480)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Invariant might be falsified by actor input (#481)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Invariant might be falsified by actor input (#482)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Invariant might be falsified by actor input (#483)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#484)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#485)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#486)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#487)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#488)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#489)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#490)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#491)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#contract#InterMode#exit#16()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume Mode#[this#] == InterMode;
  assume R#[QF_DC] == I#[QF_DC];
  assume R#[PTR] == I#[PTR];
  assume R#[AC_PRED_DIR] == I#[AC_PRED_DIR];
  assume R#[MODE] == I#[MODE];
  assume R#[SIGNED] == I#[SIGNED];
  assume R#[QUANT] == I#[QUANT];
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (C#[BTYPE] - I#[BTYPE]) == 1;
  assume (C#[A] - I#[A]) == 0;
  assume (C#[B] - I#[B]) == 0;
  assume (C#[C] - I#[C]) == 0;
  assume (C#[QFS_DC] - I#[QFS_DC]) == 1;
  assume (C#[QP] - I#[QP]) == 1;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12;
  assume (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12);
  assume !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && ((St# == getw) || (St# == geth)));
  assume !(true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == intra));
  assume !(true && true && (St# == advance));
  assume !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read));
  assume !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read));
  assume !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read));
  assume !(true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == inter));
  assume !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (1 <= (C#[A] - R#[A])) && (1 <= (C#[B] - R#[B])) && (1 <= (C#[C] - R#[C])) && (St# == read));
  assume !(true && true && (St# == sat));
  assert {:msg "Algo_DCRinvpred.cal(34.2): The correct number of tokens might not be produced on output 'QF_DC' with contract 'InterMode' (#492)"} (C#[QF_DC] - I#[QF_DC]) == 1;
  assert {:msg "Algo_DCRinvpred.cal(34.2): The correct number of tokens might not be produced on output 'PTR' with contract 'InterMode' (#493)"} (C#[PTR] - I#[PTR]) == 1;
  assert {:msg "Algo_DCRinvpred.cal(34.2): The correct number of tokens might not be produced on output 'AC_PRED_DIR' with contract 'InterMode' (#494)"} (C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1;
  assert {:msg "Algo_DCRinvpred.cal(34.2): The correct number of tokens might not be produced on output 'MODE' with contract 'InterMode' (#495)"} (C#[MODE] - I#[MODE]) == 1;
  assert {:msg "Algo_DCRinvpred.cal(34.2): The correct number of tokens might not be produced on output 'SIGNED' with contract 'InterMode' (#496)"} (C#[SIGNED] - I#[SIGNED]) == 1;
  assert {:msg "Algo_DCRinvpred.cal(34.2): The correct number of tokens might not be produced on output 'QUANT' with contract 'InterMode' (#497)"} (C#[QUANT] - I#[QUANT]) == 1;
  R#[QF_DC] := R#[QF_DC] + 1;
  R#[PTR] := R#[PTR] + 1;
  R#[AC_PRED_DIR] := R#[AC_PRED_DIR] + 1;
  R#[MODE] := R#[MODE] + 1;
  R#[SIGNED] := R#[SIGNED] + 1;
  R#[QUANT] := R#[QUANT] + 1;
  I# := R#;
  assert {:msg "Algo_DCRinvpred.cal(86.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#498)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#499)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#500)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#501)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#502)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#503)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#504)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#505)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#506)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#507)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#508)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#509)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#510)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#511)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#512)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#513)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#514)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#515)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#516)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#517)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#518)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#519)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#520)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#521)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#522)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#523)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#524)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#525)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#526)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "The actor might not preserve the invariant with contract 'InterMode' at Algo_DCRinvpred.cal(34.2) (#527)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#contract#OtherMode#input#17()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume Mode#[this#] == OtherMode;
  assume R#[QF_DC] == I#[QF_DC];
  assume R#[PTR] == I#[PTR];
  assume R#[AC_PRED_DIR] == I#[AC_PRED_DIR];
  assume R#[MODE] == I#[MODE];
  assume R#[SIGNED] == I#[SIGNED];
  assume R#[QUANT] == I#[QUANT];
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (C#[BTYPE] - I#[BTYPE]) < 1;
  C#[BTYPE] := C#[BTYPE] + 1;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12;
  assert {:msg "Algo_DCRinvpred.cal(86.12): Invariant might be falsified by actor input (#528)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Invariant might be falsified by actor input (#529)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Invariant might be falsified by actor input (#530)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Invariant might be falsified by actor input (#531)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Invariant might be falsified by actor input (#532)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Invariant might be falsified by actor input (#533)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Invariant might be falsified by actor input (#534)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Invariant might be falsified by actor input (#535)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Invariant might be falsified by actor input (#536)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Invariant might be falsified by actor input (#537)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Invariant might be falsified by actor input (#538)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Invariant might be falsified by actor input (#539)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Invariant might be falsified by actor input (#540)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Invariant might be falsified by actor input (#541)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Invariant might be falsified by actor input (#542)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Invariant might be falsified by actor input (#543)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Invariant might be falsified by actor input (#544)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Invariant might be falsified by actor input (#545)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Invariant might be falsified by actor input (#546)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Invariant might be falsified by actor input (#547)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Invariant might be falsified by actor input (#548)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Invariant might be falsified by actor input (#549)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#550)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#551)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#552)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#553)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#554)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#555)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#556)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#557)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#contract#OtherMode#input#18()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume Mode#[this#] == OtherMode;
  assume R#[QF_DC] == I#[QF_DC];
  assume R#[PTR] == I#[PTR];
  assume R#[AC_PRED_DIR] == I#[AC_PRED_DIR];
  assume R#[MODE] == I#[MODE];
  assume R#[SIGNED] == I#[SIGNED];
  assume R#[QUANT] == I#[QUANT];
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (C#[QP] - I#[QP]) < 1;
  C#[QP] := C#[QP] + 1;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12;
  assert {:msg "Algo_DCRinvpred.cal(86.12): Invariant might be falsified by actor input (#558)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Invariant might be falsified by actor input (#559)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Invariant might be falsified by actor input (#560)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Invariant might be falsified by actor input (#561)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Invariant might be falsified by actor input (#562)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Invariant might be falsified by actor input (#563)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Invariant might be falsified by actor input (#564)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Invariant might be falsified by actor input (#565)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Invariant might be falsified by actor input (#566)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Invariant might be falsified by actor input (#567)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Invariant might be falsified by actor input (#568)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Invariant might be falsified by actor input (#569)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Invariant might be falsified by actor input (#570)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Invariant might be falsified by actor input (#571)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Invariant might be falsified by actor input (#572)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Invariant might be falsified by actor input (#573)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Invariant might be falsified by actor input (#574)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Invariant might be falsified by actor input (#575)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Invariant might be falsified by actor input (#576)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Invariant might be falsified by actor input (#577)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Invariant might be falsified by actor input (#578)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Invariant might be falsified by actor input (#579)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#580)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#581)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#582)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#583)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#584)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#585)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#586)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#587)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#contract#OtherMode#exit#19()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume Mode#[this#] == OtherMode;
  assume R#[QF_DC] == I#[QF_DC];
  assume R#[PTR] == I#[PTR];
  assume R#[AC_PRED_DIR] == I#[AC_PRED_DIR];
  assume R#[MODE] == I#[MODE];
  assume R#[SIGNED] == I#[SIGNED];
  assume R#[QUANT] == I#[QUANT];
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (C#[BTYPE] - I#[BTYPE]) == 1;
  assume (C#[A] - I#[A]) == 0;
  assume (C#[B] - I#[B]) == 0;
  assume (C#[C] - I#[C]) == 0;
  assume (C#[QFS_DC] - I#[QFS_DC]) == 0;
  assume (C#[QP] - I#[QP]) == 1;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12;
  assume !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && ((St# == getw) || (St# == geth)));
  assume !(true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == intra));
  assume !(true && true && (St# == advance));
  assume !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read));
  assume !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read));
  assume !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read));
  assume !(true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == inter));
  assume !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (1 <= (C#[A] - R#[A])) && (1 <= (C#[B] - R#[B])) && (1 <= (C#[C] - R#[C])) && (St# == read));
  assume !(true && true && (St# == sat));
  assert {:msg "Algo_DCRinvpred.cal(51.2): The correct number of tokens might not be produced on output 'QF_DC' with contract 'OtherMode' (#588)"} (C#[QF_DC] - I#[QF_DC]) == 0;
  assert {:msg "Algo_DCRinvpred.cal(51.2): The correct number of tokens might not be produced on output 'PTR' with contract 'OtherMode' (#589)"} (C#[PTR] - I#[PTR]) == 0;
  assert {:msg "Algo_DCRinvpred.cal(51.2): The correct number of tokens might not be produced on output 'AC_PRED_DIR' with contract 'OtherMode' (#590)"} (C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1;
  assert {:msg "Algo_DCRinvpred.cal(51.2): The correct number of tokens might not be produced on output 'MODE' with contract 'OtherMode' (#591)"} (C#[MODE] - I#[MODE]) == 0;
  assert {:msg "Algo_DCRinvpred.cal(51.2): The correct number of tokens might not be produced on output 'SIGNED' with contract 'OtherMode' (#592)"} (C#[SIGNED] - I#[SIGNED]) == 0;
  assert {:msg "Algo_DCRinvpred.cal(51.2): The correct number of tokens might not be produced on output 'QUANT' with contract 'OtherMode' (#593)"} (C#[QUANT] - I#[QUANT]) == 0;
  R#[QF_DC] := R#[QF_DC] + 0;
  R#[PTR] := R#[PTR] + 0;
  R#[AC_PRED_DIR] := R#[AC_PRED_DIR] + 1;
  R#[MODE] := R#[MODE] + 0;
  R#[SIGNED] := R#[SIGNED] + 0;
  R#[QUANT] := R#[QUANT] + 0;
  I# := R#;
  assert {:msg "Algo_DCRinvpred.cal(86.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#594)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#595)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#596)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#597)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#598)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#599)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#600)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#601)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#602)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#603)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#604)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#605)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#606)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#607)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#608)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#609)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#610)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#611)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#612)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#613)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#614)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#615)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#616)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#617)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#618)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#619)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#620)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#621)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#622)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "The actor might not preserve the invariant with contract 'OtherMode' at Algo_DCRinvpred.cal(51.2) (#623)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#contract#IntraMode#input#20()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume Mode#[this#] == IntraMode;
  assume R#[QF_DC] == I#[QF_DC];
  assume R#[PTR] == I#[PTR];
  assume R#[AC_PRED_DIR] == I#[AC_PRED_DIR];
  assume R#[MODE] == I#[MODE];
  assume R#[SIGNED] == I#[SIGNED];
  assume R#[QUANT] == I#[QUANT];
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (C#[BTYPE] - I#[BTYPE]) < 1;
  C#[BTYPE] := C#[BTYPE] + 1;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12;
  assert {:msg "Algo_DCRinvpred.cal(86.12): Invariant might be falsified by actor input (#624)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Invariant might be falsified by actor input (#625)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Invariant might be falsified by actor input (#626)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Invariant might be falsified by actor input (#627)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Invariant might be falsified by actor input (#628)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Invariant might be falsified by actor input (#629)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Invariant might be falsified by actor input (#630)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Invariant might be falsified by actor input (#631)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Invariant might be falsified by actor input (#632)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Invariant might be falsified by actor input (#633)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Invariant might be falsified by actor input (#634)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Invariant might be falsified by actor input (#635)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Invariant might be falsified by actor input (#636)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Invariant might be falsified by actor input (#637)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Invariant might be falsified by actor input (#638)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Invariant might be falsified by actor input (#639)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Invariant might be falsified by actor input (#640)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Invariant might be falsified by actor input (#641)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Invariant might be falsified by actor input (#642)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Invariant might be falsified by actor input (#643)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Invariant might be falsified by actor input (#644)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Invariant might be falsified by actor input (#645)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#646)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#647)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#648)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#649)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#650)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#651)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#652)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#653)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#contract#IntraMode#input#21()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume Mode#[this#] == IntraMode;
  assume R#[QF_DC] == I#[QF_DC];
  assume R#[PTR] == I#[PTR];
  assume R#[AC_PRED_DIR] == I#[AC_PRED_DIR];
  assume R#[MODE] == I#[MODE];
  assume R#[SIGNED] == I#[SIGNED];
  assume R#[QUANT] == I#[QUANT];
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (C#[A] - I#[A]) < 1;
  C#[A] := C#[A] + 1;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12;
  assert {:msg "Algo_DCRinvpred.cal(86.12): Invariant might be falsified by actor input (#654)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Invariant might be falsified by actor input (#655)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Invariant might be falsified by actor input (#656)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Invariant might be falsified by actor input (#657)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Invariant might be falsified by actor input (#658)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Invariant might be falsified by actor input (#659)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Invariant might be falsified by actor input (#660)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Invariant might be falsified by actor input (#661)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Invariant might be falsified by actor input (#662)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Invariant might be falsified by actor input (#663)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Invariant might be falsified by actor input (#664)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Invariant might be falsified by actor input (#665)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Invariant might be falsified by actor input (#666)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Invariant might be falsified by actor input (#667)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Invariant might be falsified by actor input (#668)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Invariant might be falsified by actor input (#669)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Invariant might be falsified by actor input (#670)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Invariant might be falsified by actor input (#671)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Invariant might be falsified by actor input (#672)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Invariant might be falsified by actor input (#673)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Invariant might be falsified by actor input (#674)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Invariant might be falsified by actor input (#675)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#676)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#677)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#678)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#679)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#680)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#681)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#682)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#683)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#contract#IntraMode#input#22()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume Mode#[this#] == IntraMode;
  assume R#[QF_DC] == I#[QF_DC];
  assume R#[PTR] == I#[PTR];
  assume R#[AC_PRED_DIR] == I#[AC_PRED_DIR];
  assume R#[MODE] == I#[MODE];
  assume R#[SIGNED] == I#[SIGNED];
  assume R#[QUANT] == I#[QUANT];
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (C#[B] - I#[B]) < 1;
  C#[B] := C#[B] + 1;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12;
  assert {:msg "Algo_DCRinvpred.cal(86.12): Invariant might be falsified by actor input (#684)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Invariant might be falsified by actor input (#685)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Invariant might be falsified by actor input (#686)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Invariant might be falsified by actor input (#687)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Invariant might be falsified by actor input (#688)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Invariant might be falsified by actor input (#689)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Invariant might be falsified by actor input (#690)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Invariant might be falsified by actor input (#691)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Invariant might be falsified by actor input (#692)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Invariant might be falsified by actor input (#693)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Invariant might be falsified by actor input (#694)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Invariant might be falsified by actor input (#695)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Invariant might be falsified by actor input (#696)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Invariant might be falsified by actor input (#697)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Invariant might be falsified by actor input (#698)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Invariant might be falsified by actor input (#699)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Invariant might be falsified by actor input (#700)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Invariant might be falsified by actor input (#701)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Invariant might be falsified by actor input (#702)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Invariant might be falsified by actor input (#703)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Invariant might be falsified by actor input (#704)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Invariant might be falsified by actor input (#705)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#706)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#707)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#708)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#709)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#710)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#711)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#712)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#713)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#contract#IntraMode#input#23()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume Mode#[this#] == IntraMode;
  assume R#[QF_DC] == I#[QF_DC];
  assume R#[PTR] == I#[PTR];
  assume R#[AC_PRED_DIR] == I#[AC_PRED_DIR];
  assume R#[MODE] == I#[MODE];
  assume R#[SIGNED] == I#[SIGNED];
  assume R#[QUANT] == I#[QUANT];
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (C#[C] - I#[C]) < 1;
  C#[C] := C#[C] + 1;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12;
  assert {:msg "Algo_DCRinvpred.cal(86.12): Invariant might be falsified by actor input (#714)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Invariant might be falsified by actor input (#715)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Invariant might be falsified by actor input (#716)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Invariant might be falsified by actor input (#717)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Invariant might be falsified by actor input (#718)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Invariant might be falsified by actor input (#719)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Invariant might be falsified by actor input (#720)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Invariant might be falsified by actor input (#721)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Invariant might be falsified by actor input (#722)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Invariant might be falsified by actor input (#723)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Invariant might be falsified by actor input (#724)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Invariant might be falsified by actor input (#725)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Invariant might be falsified by actor input (#726)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Invariant might be falsified by actor input (#727)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Invariant might be falsified by actor input (#728)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Invariant might be falsified by actor input (#729)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Invariant might be falsified by actor input (#730)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Invariant might be falsified by actor input (#731)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Invariant might be falsified by actor input (#732)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Invariant might be falsified by actor input (#733)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Invariant might be falsified by actor input (#734)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Invariant might be falsified by actor input (#735)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#736)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#737)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#738)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#739)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#740)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#741)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#742)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#743)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#contract#IntraMode#input#24()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume Mode#[this#] == IntraMode;
  assume R#[QF_DC] == I#[QF_DC];
  assume R#[PTR] == I#[PTR];
  assume R#[AC_PRED_DIR] == I#[AC_PRED_DIR];
  assume R#[MODE] == I#[MODE];
  assume R#[SIGNED] == I#[SIGNED];
  assume R#[QUANT] == I#[QUANT];
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (C#[QFS_DC] - I#[QFS_DC]) < 1;
  C#[QFS_DC] := C#[QFS_DC] + 1;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12;
  assert {:msg "Algo_DCRinvpred.cal(86.12): Invariant might be falsified by actor input (#744)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Invariant might be falsified by actor input (#745)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Invariant might be falsified by actor input (#746)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Invariant might be falsified by actor input (#747)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Invariant might be falsified by actor input (#748)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Invariant might be falsified by actor input (#749)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Invariant might be falsified by actor input (#750)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Invariant might be falsified by actor input (#751)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Invariant might be falsified by actor input (#752)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Invariant might be falsified by actor input (#753)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Invariant might be falsified by actor input (#754)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Invariant might be falsified by actor input (#755)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Invariant might be falsified by actor input (#756)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Invariant might be falsified by actor input (#757)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Invariant might be falsified by actor input (#758)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Invariant might be falsified by actor input (#759)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Invariant might be falsified by actor input (#760)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Invariant might be falsified by actor input (#761)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Invariant might be falsified by actor input (#762)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Invariant might be falsified by actor input (#763)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Invariant might be falsified by actor input (#764)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Invariant might be falsified by actor input (#765)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#766)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#767)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#768)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#769)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#770)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#771)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#772)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#773)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#contract#IntraMode#input#25()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume Mode#[this#] == IntraMode;
  assume R#[QF_DC] == I#[QF_DC];
  assume R#[PTR] == I#[PTR];
  assume R#[AC_PRED_DIR] == I#[AC_PRED_DIR];
  assume R#[MODE] == I#[MODE];
  assume R#[SIGNED] == I#[SIGNED];
  assume R#[QUANT] == I#[QUANT];
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (C#[QP] - I#[QP]) < 1;
  C#[QP] := C#[QP] + 1;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12;
  assert {:msg "Algo_DCRinvpred.cal(86.12): Invariant might be falsified by actor input (#774)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): Invariant might be falsified by actor input (#775)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): Invariant might be falsified by actor input (#776)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): Invariant might be falsified by actor input (#777)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): Invariant might be falsified by actor input (#778)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): Invariant might be falsified by actor input (#779)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): Invariant might be falsified by actor input (#780)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): Invariant might be falsified by actor input (#781)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): Invariant might be falsified by actor input (#782)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): Invariant might be falsified by actor input (#783)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): Invariant might be falsified by actor input (#784)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): Invariant might be falsified by actor input (#785)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): Invariant might be falsified by actor input (#786)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): Invariant might be falsified by actor input (#787)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): Invariant might be falsified by actor input (#788)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): Invariant might be falsified by actor input (#789)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): Invariant might be falsified by actor input (#790)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): Invariant might be falsified by actor input (#791)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): Invariant might be falsified by actor input (#792)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): Invariant might be falsified by actor input (#793)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): Invariant might be falsified by actor input (#794)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): Invariant might be falsified by actor input (#795)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#796)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#797)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#798)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#799)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Invariant might be falsified by actor input (#800)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "Invariant might be falsified by actor input (#801)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#802)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Invariant might be falsified by actor input (#803)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred#contract#IntraMode#exit#26()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume Mode#[this#] == IntraMode;
  assume R#[QF_DC] == I#[QF_DC];
  assume R#[PTR] == I#[PTR];
  assume R#[AC_PRED_DIR] == I#[AC_PRED_DIR];
  assume R#[MODE] == I#[MODE];
  assume R#[SIGNED] == I#[SIGNED];
  assume R#[QUANT] == I#[QUANT];
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (C#[BTYPE] - I#[BTYPE]) == 1;
  assume (C#[A] - I#[A]) == 1;
  assume (C#[B] - I#[B]) == 1;
  assume (C#[C] - I#[C]) == 1;
  assume (C#[QFS_DC] - I#[QFS_DC]) == 1;
  assume (C#[QP] - I#[QP]) == 1;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12;
  assume AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12;
  assume !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && ((St# == getw) || (St# == geth)));
  assume !(true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == intra));
  assume !(true && true && (St# == advance));
  assume !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read));
  assume !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read));
  assume !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read));
  assume !(true && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (St# == inter));
  assume !(true && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) == 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], ACCODED) != 0bv12) && (St# == read))) && (!((1 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][R#[BTYPE]], NEWVOP) != 0bv12) && (St# == read))) && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (1 <= (C#[A] - R#[A])) && (1 <= (C#[B] - R#[B])) && (1 <= (C#[C] - R#[C])) && (St# == read));
  assume !(true && true && (St# == sat));
  assert {:msg "Algo_DCRinvpred.cal(64.2): The correct number of tokens might not be produced on output 'QF_DC' with contract 'IntraMode' (#804)"} (C#[QF_DC] - I#[QF_DC]) == 1;
  assert {:msg "Algo_DCRinvpred.cal(64.2): The correct number of tokens might not be produced on output 'PTR' with contract 'IntraMode' (#805)"} (C#[PTR] - I#[PTR]) == 1;
  assert {:msg "Algo_DCRinvpred.cal(64.2): The correct number of tokens might not be produced on output 'AC_PRED_DIR' with contract 'IntraMode' (#806)"} (C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1;
  assert {:msg "Algo_DCRinvpred.cal(64.2): The correct number of tokens might not be produced on output 'MODE' with contract 'IntraMode' (#807)"} (C#[MODE] - I#[MODE]) == 1;
  assert {:msg "Algo_DCRinvpred.cal(64.2): The correct number of tokens might not be produced on output 'SIGNED' with contract 'IntraMode' (#808)"} (C#[SIGNED] - I#[SIGNED]) == 1;
  assert {:msg "Algo_DCRinvpred.cal(64.2): The correct number of tokens might not be produced on output 'QUANT' with contract 'IntraMode' (#809)"} (C#[QUANT] - I#[QUANT]) == 1;
  R#[QF_DC] := R#[QF_DC] + 1;
  R#[PTR] := R#[PTR] + 1;
  R#[AC_PRED_DIR] := R#[AC_PRED_DIR] + 1;
  R#[MODE] := R#[MODE] + 1;
  R#[SIGNED] := R#[SIGNED] + 1;
  R#[QUANT] := R#[QUANT] + 1;
  I# := R#;
  assert {:msg "Algo_DCRinvpred.cal(86.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#810)"} ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(89.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#811)"} (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assert {:msg "Algo_DCRinvpred.cal(90.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#812)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assert {:msg "Algo_DCRinvpred.cal(91.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#813)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assert {:msg "Algo_DCRinvpred.cal(92.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#814)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assert {:msg "Algo_DCRinvpred.cal(93.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#815)"} (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assert {:msg "Algo_DCRinvpred.cal(95.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#816)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(96.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#817)"} (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(100.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#818)"} (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(101.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#819)"} (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(103.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#820)"} (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(107.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#821)"} (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(109.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#822)"} (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(111.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#823)"} (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(116.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#824)"} (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(118.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#825)"} (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assert {:msg "Algo_DCRinvpred.cal(122.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#826)"} (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(124.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#827)"} (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "Algo_DCRinvpred.cal(126.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#828)"} (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assert {:msg "Algo_DCRinvpred.cal(130.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#829)"} (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assert {:msg "Algo_DCRinvpred.cal(132.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#830)"} (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assert {:msg "Algo_DCRinvpred.cal(136.12): The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#831)"} (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assert {:msg "The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#832)"} (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#833)"} (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#834)"} (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#835)"} (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#836)"} (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assert {:msg "The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#837)"} (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#838)"} (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "The actor might not preserve the invariant with contract 'IntraMode' at Algo_DCRinvpred.cal(64.2) (#839)"} (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
}
procedure Algo_DCRinvpred##GuardWD#27()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var BTYPE: Chan (bv12);
  var A: Chan (bv11);
  var B: Chan (bv11);
  var C: Chan (bv11);
  var QFS_DC: Chan (bv13);
  var QP: Chan (bv6);
  var QF_DC: Chan (bv13);
  var PTR: Chan (bv11);
  var AC_PRED_DIR: Chan (bv3);
  var MODE: Chan (bv3);
  var SIGNED: Chan (bool);
  var QUANT: Chan (bv6);
  var StartMode: int;
  var InterMode: int;
  var OtherMode: int;
  var IntraMode: int;
  var St#: int;
  var sat: int;
  var geth: int;
  var advance: int;
  var intra: int;
  var inter: int;
  var getw: int;
  var read: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var INTER: bv12;
  var MOTION: bv12;
  var ACCODED: bv12;
  var ACPRED: bv12;
  var s_QP: bv6;
  var round: bv2;
  var BUF_SIZE: bv32;
  var ptr: bv32;
  var comp: bv4;
  var dc_buf: Map (bv32) (bv13);
  var dc_pred: bv13;
  var scaler: bv7;
  var dc_val: bv13;
  var is_signed: bool;
  assume (A != B) && (A != C) && (A != PTR) && (B != C) && (B != PTR) && (C != PTR) && (QFS_DC != QF_DC) && (QP != QUANT) && (AC_PRED_DIR != MODE);
  assume StartMode == 0;
  assume InterMode == 1;
  assume OtherMode == 2;
  assume IntraMode == 3;
  assume (((Mode#[this#] == StartMode) || (Mode#[this#] == InterMode)) || (Mode#[this#] == OtherMode)) || (Mode#[this#] == IntraMode);
  assume sat == 6;
  assume geth == 5;
  assume advance == 4;
  assume intra == 3;
  assume inter == 2;
  assume getw == 1;
  assume read == 0;
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume INTER == 512bv12;
  assume MOTION == 8bv12;
  assume ACCODED == 2bv12;
  assume ACPRED == 1bv12;
  assume BUF_SIZE == 984bv32;
  assume (0 <= I#[BTYPE]) && (I#[BTYPE] <= R#[BTYPE]) && (R#[BTYPE] <= C#[BTYPE]);
  assume (0 <= I#[A]) && (I#[A] <= R#[A]) && (R#[A] <= C#[A]);
  assume (0 <= I#[B]) && (I#[B] <= R#[B]) && (R#[B] <= C#[B]);
  assume (0 <= I#[C]) && (I#[C] <= R#[C]) && (R#[C] <= C#[C]);
  assume (0 <= I#[QFS_DC]) && (I#[QFS_DC] <= R#[QFS_DC]) && (R#[QFS_DC] <= C#[QFS_DC]);
  assume (0 <= I#[QP]) && (I#[QP] <= R#[QP]) && (R#[QP] <= C#[QP]);
  assume (0 <= I#[QF_DC]) && (I#[QF_DC] <= R#[QF_DC]) && (R#[QF_DC] <= C#[QF_DC]);
  assume (0 <= I#[PTR]) && (I#[PTR] <= R#[PTR]) && (R#[PTR] <= C#[PTR]);
  assume (0 <= I#[AC_PRED_DIR]) && (I#[AC_PRED_DIR] <= R#[AC_PRED_DIR]) && (R#[AC_PRED_DIR] <= C#[AC_PRED_DIR]);
  assume (0 <= I#[MODE]) && (I#[MODE] <= R#[MODE]) && (R#[MODE] <= C#[MODE]);
  assume (0 <= I#[SIGNED]) && (I#[SIGNED] <= R#[SIGNED]) && (R#[SIGNED] <= C#[SIGNED]);
  assume (0 <= I#[QUANT]) && (I#[QUANT] <= R#[QUANT]) && (R#[QUANT] <= C#[QUANT]);
  assume ((R#[BTYPE] - I#[BTYPE]) == 0) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> (((St# == read) || (St# == getw)) || (St# == geth));
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 1) ==> (St# == getw);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 2) ==> (St# == geth);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 3) ==> (St# == read);
  assume (Mode#[this#] == StartMode) ==> ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && (C#[QF_DC] == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) == 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0);
  assume (Mode#[this#] == StartMode) && ((R#[BTYPE] - I#[BTYPE]) > 0) ==> ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1);
  assume (Mode#[this#] == InterMode) ==> ((((St# == read) || (St# == inter)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == InterMode) ==> ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == InterMode) && (St# == inter) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == InterMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == IntraMode) ==> ((((St# == read) || (St# == intra)) || (St# == sat)) || (St# == advance));
  assume (Mode#[this#] == IntraMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1)));
  assume (Mode#[this#] == IntraMode) && (St# == intra) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == sat) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == IntraMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 1) && ((R#[B] - I#[B]) == 1) && ((R#[C] - I#[C]) == 1) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 1) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 1) && ((C#[PTR] - I#[PTR]) == 1) && ((C#[SIGNED] - I#[SIGNED]) == 1) && ((C#[QUANT] - I#[QUANT]) == 1) && ((C#[QF_DC] - I#[QF_DC]) == 1);
  assume (Mode#[this#] == OtherMode) ==> ((St# == read) || (St# == advance));
  assume (Mode#[this#] == OtherMode) && (St# == read) ==> ((((R#[BTYPE] - I#[BTYPE]) == 0) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 0) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 0) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)) || (((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0)));
  assume (Mode#[this#] == OtherMode) && (St# == advance) ==> ((R#[BTYPE] - I#[BTYPE]) == 1) && ((R#[A] - I#[A]) == 0) && ((R#[B] - I#[B]) == 0) && ((R#[C] - I#[C]) == 0) && ((R#[QP] - I#[QP]) == 1) && ((R#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[AC_PRED_DIR] - I#[AC_PRED_DIR]) == 1) && ((C#[MODE] - I#[MODE]) == 0) && ((C#[PTR] - I#[PTR]) == 0) && ((C#[SIGNED] - I#[SIGNED]) == 0) && ((C#[QUANT] - I#[QUANT]) == 0) && ((C#[QF_DC] - I#[QF_DC]) == 0);
  assume (Mode#[this#] == StartMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12)) && (((C#[QFS_DC] - I#[QFS_DC]) >= 0) && ((C#[A] - I#[A]) >= 0) && ((C#[B] - I#[B]) >= 0) && ((C#[C] - I#[C]) >= 0) && ((C#[QP] - I#[QP]) >= 0) && ((C#[BTYPE] - I#[BTYPE]) >= 1) ==> (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 3) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) == 0) && ((C#[B] - I#[B]) == 0) && ((C#[C] - I#[C]) == 0) && ((C#[QFS_DC] - I#[QFS_DC]) == 0) && ((C#[QP] - I#[QP]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[BTYPE] - I#[BTYPE]) <= 1) && ((C#[A] - I#[A]) <= 1) && ((C#[B] - I#[B]) <= 1) && ((C#[C] - I#[C]) <= 1) && ((C#[QFS_DC] - I#[QFS_DC]) <= 1) && ((C#[QP] - I#[QP]) <= 1);
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'StartMode' and 'InterMode' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#840)"} !(true && (3 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12) && true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'StartMode' and 'OtherMode' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#841)"} !(true && (3 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12) && true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'StartMode' and 'IntraMode' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#842)"} !(true && (3 <= (C#[BTYPE] - R#[BTYPE])) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) != 0bv12) && true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[A] - R#[A])) && (1 <= (C#[B] - R#[B])) && (1 <= (C#[C] - R#[C])) && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'InterMode' and 'OtherMode' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#843)"} !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12) && true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'InterMode' and 'IntraMode' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#844)"} !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) != 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) != 0bv12) && true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[A] - R#[A])) && (1 <= (C#[B] - R#[B])) && (1 <= (C#[C] - R#[C])) && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Algo_DCRinvpred.cal(2.1): The actions 'OtherMode' and 'IntraMode' of actor 'Algo_DCRinvpred' might not have mutually exclusive guards (#845)"} !(true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) == 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], ACCODED) == 0bv12) && true && (1 <= (C#[BTYPE] - R#[BTYPE])) && (1 <= (C#[A] - R#[A])) && (1 <= (C#[B] - R#[B])) && (1 <= (C#[C] - R#[C])) && (1 <= (C#[QFS_DC] - R#[QFS_DC])) && (1 <= (C#[QP] - R#[QP])) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], NEWVOP) == 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTER) == 0bv12) && (AT#BvAnd12(M#[BTYPE][I#[BTYPE]], INTRA) != 0bv12));
}

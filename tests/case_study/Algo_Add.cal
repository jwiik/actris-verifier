// MPEG4_algo_Add.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
// Modified by: Christophe Lucarz (christophe.lucarz@epfl.ch)
//
// Copyright (c) 2004-2005 Xilinx Inc.
// All Rights Reserved
//
// Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
//              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
//              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.
// Add motion and texture to produce pixels

actor Algo_Add () int(size=9) MOT, int(size=9) TEX, int(size=12) BTYPE ==> int(size=9) VID :

	NewVop: contract BTYPE:3 ==> 
		guard (BTYPE[@] & NEWVOP) != int(0,12)
	end
	
	TextureOnly: contract BTYPE:1, TEX:64 ==> VID:64
		guard (BTYPE[@] & NEWVOP) = int(0,12)
		guard (BTYPE[@] & INTRA) != int(0,12)
	end
	
	MotionOnly: contract BTYPE:1, MOT:64 ==> VID:64
		guard (BTYPE[@] & NEWVOP) = int(0,12)
		guard (BTYPE[@] & INTRA) = int(0,12)
		guard (BTYPE[@] & ACCODED) = int(0,12)
	end
	
	Combine: contract BTYPE:1, TEX:64, MOT:64 ==> VID:64
		guard (BTYPE[@] & NEWVOP) = int(0,12)
		guard (BTYPE[@] & INTRA) = int(0,12)
		guard (BTYPE[@] & ACCODED) != int(0,12)
	end

	//_CAL_tokenMonitor := true;
	// Ignore new VOP command
	cmd.newVop: action BTYPE:[ cmd ] ==>
	guard
		(cmd & NEWVOP) != int(0,12)
	end

	// Pure texture
	cmd.textureOnly: action BTYPE:[ cmd ] ==>
	guard
		(cmd & INTRA) != int(0,12)
	end

	// Pure motion
	cmd.motionOnly: action BTYPE:[ cmd ] ==>
	guard
		(cmd & ACCODED) = int(0,12)
	end

	// Mixed texture and motion
	// (Also used to skip vop w,h)
	cmd.other: action BTYPE:[ cmd ] ==>
	end

	texture: action TEX:[ tex ] repeat 64 ==> VID:[ tex ] repeat 64
	end

	motion: action MOT:[ mot ] repeat 64 ==> VID:[ mot ] repeat 64
	end

	combine: action MOT:[ mot ] repeat 64, TEX:[ tex ] repeat 64 ==> VID:[ output ] repeat 64
	var int(size=9) output[64];
	do
		output := [ if tex[i] + mot[i] < int(0,9) then
						int(0,9)
					else
						if tex[i] + mot[i] > int(255,9) then
							int(255,9)
						else
							tex[i] + mot[i]
						end
					end : for int i in 0 .. 63 ] 
	end

	schedule fsm s_cmd :
		s_cmd ( cmd.newVop ) --> s_skipw;
		s_cmd ( cmd.textureOnly ) --> s_texture;
		s_cmd ( cmd.motionOnly ) --> s_motion;
		s_cmd ( cmd.other ) --> s_combine;
		s_texture ( texture ) --> s_cmd;
		s_motion ( motion ) --> s_cmd;
		s_combine ( combine ) --> s_cmd;
		s_skipw ( cmd.other ) --> s_skiph;
		s_skiph ( cmd.other ) --> s_cmd;
	end

	priority
		cmd.newVop > cmd.textureOnly;
		cmd.newVop > cmd.motionOnly;
		cmd.newVop > cmd.other;
		cmd.textureOnly > cmd.motionOnly;
		cmd.textureOnly > cmd.other;
		cmd.motionOnly > cmd.other;
	end

end
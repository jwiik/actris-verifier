// Mgnt_Framebuf
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//
// Copyright (c) 2004-2005 Xilinx Inc.
// All Rights Reserved
//
// Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
//              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
//              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.
// Frame buffer

actor Mgnt_Framebuf () int(size=12) BTYPE, int(size=24) RA, int(size=24) WA, int(size=9) WD
==> int(size=9) RD :

	//int BUF_SZ = MAXW_IN_MB * (BLOCK_SIZE*6 * MAXH_IN_MB + SEARCHWIN_IN_MB * 192 + BLOCK_SIZE*6);


	NewVop: contract BTYPE:3 ==>
	  guard (BTYPE[@] & NEWVOP) != int(0,12)
	end
	
	Intra: contract BTYPE:1, WD:64, WA:64 ==>
	  guard (BTYPE[@] & NEWVOP) = int(0,12)
	  guard (BTYPE[@] & INTRA) != int(0,12)
	end
	
	Inter: contract BTYPE:1, WD:64, WA:64, RA:81 ==> RD:81
	  guard (BTYPE[@] & NEWVOP) = int(0,12)
	  guard (BTYPE[@] & INTRA) = int(0,12)
	end
	
	@Uninterpreted
	Map(int(size=24) -> int(size=9), size=3322176) buf;
	
	int count := 0;
	
	cmd.newVop: action BTYPE:[ cmd ] ==>
	guard
		(cmd & NEWVOP) != int(0,12)
	end
	
	getw: action BTYPE:[ w ] ==> end
	
	geth: action BTYPE:[ h ] ==> end
	
	cmd.intra: action BTYPE:[ cmd ] ==>
	guard
		(cmd & INTRA) != int(0,12)
	do
		count := 64;
	end

	cmd.inter: action BTYPE:[ cmd ] ==>
	do
		count := 81;
	end

	done: action ==>
	guard
		count = 0
	do
		count := 64;
	end
	
	schedule fsm s_cmd:
		s_cmd ( cmd.newVop ) --> s_getw;
		s_cmd ( cmd.intra ) --> s_write;
		s_cmd ( cmd.inter ) --> s_read;
		s_write (write) --> s_write;
		s_read (read) --> s_read;
		s_write (done) --> s_cmd;
		s_read (done) --> s_write;
		s_getw ( getw ) --> s_geth;
		s_geth ( geth ) --> s_cmd;
	end
	
	priority
	  cmd.newVop > cmd.intra;
	  cmd.newVop > cmd.inter;
	  cmd.intra > cmd.inter;
	  done > read;
	  done > write;
	end

	read: action RA:[ a ] ==> RD:[ buf[a] ] //do
		//if a = 25344 + 115456 + 24 then
		//  println("buf["+a+"] contains "+buf[a]);
		//end
	do
		count := count-1;
	end

	write: action WA:[ a ], WD:[ d ] ==>
	do
		buf[a] := d;
		//if a = 25344 + 115456 + 24 then
		//  println("setting buf["+a+"] to "+d);
		//end
		
		// Mamma
		count := count-1;
	end

end
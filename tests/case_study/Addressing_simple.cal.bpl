// ---------------------------------------------------------------
// -- Types and global variables ---------------------------------
// ---------------------------------------------------------------
type Ref;
type Chan a;
type Field a;
type Actor;
type CType = <a>[Chan a]int;
type MType = <a>[Chan a][int]a;
type Obj = <a>[Field a]a;
type HType = [Ref]Obj;
type ModeType = [Actor]int;

var M#: MType;
var C#: CType;
var R#: CType;
var I#: CType;
var B#: CType;
var Mode#: ModeType;
var I#sub: CType;

var H#: HType;

const unique this#: Actor;

function AT#Min(x:int, y: int): int { if x <= y then x else y }

// ---------------------------------------------------------------
// -- Axiomatisation for map data type ---------------------------
// ---------------------------------------------------------------
type Map a b;

function Map#Select<T,U>(Map T U, T): U;
function Map#Store<T,U>(Map T U, T, U): Map T U;
axiom (
  forall<T,U> m: Map T U, k1: T, val: U :: { Map#Store(m,k1,val) }
    Map#Select(Map#Store(m,k1,val),k1) == val
);
axiom (
  forall<T,U> m: Map T U, k1: T, k2: T, val: U :: { Map#Select(Map#Store(m,k1,val),k2) }
    k1 != k2 ==> Map#Select(Map#Store(m,k1,val),k2) == Map#Select(m,k2)
);

// ---------------------------------------------------------------
// -- Bit vector operations --------------------------------------
// ---------------------------------------------------------------
// Size: 12
function {:bvbuiltin "bvand"} AT#BvAnd12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvor"} AT#BvOr12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvnot"} AT#BvNot12(a: bv12): bv12;
function {:bvbuiltin "bvneg"} AT#BvNeg12(a: bv12): bv12;
function {:bvbuiltin "bvadd"} AT#BvAdd12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvsub"} AT#BvSub12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvmul"} AT#BvMul12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvsdiv"} AT#BvSdiv12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvudiv"} AT#BvUdiv12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvshl"} AT#BvShl12(bv12,bv12): bv12;
function {:bvbuiltin "bvlshr"} AT#BvLshr12(bv12,bv12): bv12;
function {:bvbuiltin "bvashr"} AT#BvAshr12(bv12,bv12): bv12;
function {:bvbuiltin "bvule"} AT#BvUle12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvult"} AT#BvUlt12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvuge"} AT#BvUge12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvugt"} AT#BvUgt12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvsle"} AT#BvSle12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvslt"} AT#BvSlt12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvsge"} AT#BvSge12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvsgt"} AT#BvSgt12(a: bv12, b: bv12): bool;
function AT#BvXor12(a: bv12, b: bv12): bv12;
function AT#BvAbs12(a: bv12): bv12;

axiom (forall a,b: bv12 :: AT#BvXor12(a,b) == AT#BvAnd12(AT#BvOr12(a,b), AT#BvNot12(AT#BvAnd12(a,b))) );
axiom (forall a,b: bv12 :: AT#BvAbs12(a) == (if AT#BvSle12(0bv12,a) then a else AT#BvNeg12(a)) );

// ---------------------------------------------------------------
// -- End of prelude ---------------------------------------------
// ---------------------------------------------------------------

procedure DC_Reconstruction#init#0()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var DC_Reconstruction#broadcast: Actor;
  var DC_Reconstruction#addressing: Actor;
  var DC_Reconstruction#invpred: Actor;
  var DC_Reconstruction#anon$2: Chan (bv12);
  var DC_Reconstruction#anon$3: Chan (bv13);
  var DC_Reconstruction#anon$4: Chan (bv6);
  var DC_Reconstruction#anon$5: Chan (bv12);
  var DC_Reconstruction#anon$6: Chan (bv12);
  var DC_Reconstruction#anon$7: Chan (bv11);
  var DC_Reconstruction#anon$8: Chan (bv11);
  var DC_Reconstruction#anon$9: Chan (bv11);
  var DC_Reconstruction#anon$10: Chan (bv13);
  var DC_Reconstruction#anon$11: Chan (bv11);
  var DC_Reconstruction#anon$12: Chan (bv3);
  var DC_Reconstruction#anon$13: Chan (bv3);
  var DC_Reconstruction#anon$14: Chan (bool);
  var DC_Reconstruction#anon$15: Chan (bv6);
  var AV#addressing#St#: int;
  var AV#addressing#advance: int;
  var AV#addressing#predict: int;
  var AV#addressing#geth: int;
  var AV#addressing#getw: int;
  var AV#addressing#read: int;
  var AV#addressing#NEWVOP: bv12;
  var AV#addressing#INTRA: bv12;
  var AV#addressing#INTER: bv12;
  var AV#addressing#MOTION: bv12;
  var AV#addressing#ACCODED: bv12;
  var AV#addressing#ACPRED: bv12;
  var AV#addressing#mbx: bv8;
  var AV#addressing#top_edge: bool;
  var AV#addressing#left_edge: bool;
  var AV#addressing#comp: bv4;
  var AV#addressing#mbwidth: bv8;
  var AV#addressing#BUF_SIZE: int;
  var AV#addressing#coded: Map (bv11) (bool);
  var AV#addressing#ptr: bv8;
  var AV#addressing#ptr_left: bv8;
  var AV#addressing#ptr_above: bv8;
  var AV#addressing#ptr_above_left: bv8;
  var AV#invpred#St#: int;
  var AV#invpred#sat: int;
  var AV#invpred#geth: int;
  var AV#invpred#advance: int;
  var AV#invpred#intra: int;
  var AV#invpred#inter: int;
  var AV#invpred#getw: int;
  var AV#invpred#read: int;
  var AV#invpred#NEWVOP: bv12;
  var AV#invpred#INTRA: bv12;
  var AV#invpred#INTER: bv12;
  var AV#invpred#MOTION: bv12;
  var AV#invpred#ACCODED: bv12;
  var AV#invpred#ACPRED: bv12;
  var AV#invpred#s_QP: bv6;
  var AV#invpred#round: bv2;
  var AV#invpred#BUF_SIZE: bv32;
  var AV#invpred#ptr: bv32;
  var AV#invpred#comp: bv4;
  var AV#invpred#dc_buf: Map (bv32) (bv13);
  var AV#invpred#dc_pred: bv13;
  var AV#invpred#scaler: bv7;
  var AV#invpred#dc_val: bv13;
  var AV#invpred#is_signed: bool;
  assume (DC_Reconstruction#broadcast != DC_Reconstruction#addressing) && (DC_Reconstruction#broadcast != DC_Reconstruction#invpred) && (DC_Reconstruction#addressing != DC_Reconstruction#invpred);
  assume (DC_Reconstruction#anon$2 != DC_Reconstruction#anon$5) && (DC_Reconstruction#anon$2 != DC_Reconstruction#anon$6) && (DC_Reconstruction#anon$3 != DC_Reconstruction#anon$10) && (DC_Reconstruction#anon$4 != DC_Reconstruction#anon$15) && (DC_Reconstruction#anon$5 != DC_Reconstruction#anon$6) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$8) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$9) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$8 != DC_Reconstruction#anon$9) && (DC_Reconstruction#anon$8 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$9 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$12 != DC_Reconstruction#anon$13);
  assume 0 <= I#[DC_Reconstruction#anon$2];
  assume I#[DC_Reconstruction#anon$2] <= R#[DC_Reconstruction#anon$2];
  assume R#[DC_Reconstruction#anon$2] <= C#[DC_Reconstruction#anon$2];
  assume 0 <= I#[DC_Reconstruction#anon$3];
  assume I#[DC_Reconstruction#anon$3] <= R#[DC_Reconstruction#anon$3];
  assume R#[DC_Reconstruction#anon$3] <= C#[DC_Reconstruction#anon$3];
  assume 0 <= I#[DC_Reconstruction#anon$4];
  assume I#[DC_Reconstruction#anon$4] <= R#[DC_Reconstruction#anon$4];
  assume R#[DC_Reconstruction#anon$4] <= C#[DC_Reconstruction#anon$4];
  assume 0 <= I#[DC_Reconstruction#anon$5];
  assume I#[DC_Reconstruction#anon$5] <= R#[DC_Reconstruction#anon$5];
  assume R#[DC_Reconstruction#anon$5] <= C#[DC_Reconstruction#anon$5];
  assume 0 <= I#[DC_Reconstruction#anon$6];
  assume I#[DC_Reconstruction#anon$6] <= R#[DC_Reconstruction#anon$6];
  assume R#[DC_Reconstruction#anon$6] <= C#[DC_Reconstruction#anon$6];
  assume 0 <= I#[DC_Reconstruction#anon$7];
  assume I#[DC_Reconstruction#anon$7] <= R#[DC_Reconstruction#anon$7];
  assume R#[DC_Reconstruction#anon$7] <= C#[DC_Reconstruction#anon$7];
  assume 0 <= I#[DC_Reconstruction#anon$8];
  assume I#[DC_Reconstruction#anon$8] <= R#[DC_Reconstruction#anon$8];
  assume R#[DC_Reconstruction#anon$8] <= C#[DC_Reconstruction#anon$8];
  assume 0 <= I#[DC_Reconstruction#anon$9];
  assume I#[DC_Reconstruction#anon$9] <= R#[DC_Reconstruction#anon$9];
  assume R#[DC_Reconstruction#anon$9] <= C#[DC_Reconstruction#anon$9];
  assume 0 <= I#[DC_Reconstruction#anon$10];
  assume I#[DC_Reconstruction#anon$10] <= R#[DC_Reconstruction#anon$10];
  assume R#[DC_Reconstruction#anon$10] <= C#[DC_Reconstruction#anon$10];
  assume I#[DC_Reconstruction#anon$10] == R#[DC_Reconstruction#anon$10];
  assume 0 <= I#[DC_Reconstruction#anon$11];
  assume I#[DC_Reconstruction#anon$11] <= R#[DC_Reconstruction#anon$11];
  assume R#[DC_Reconstruction#anon$11] <= C#[DC_Reconstruction#anon$11];
  assume I#[DC_Reconstruction#anon$11] == R#[DC_Reconstruction#anon$11];
  assume 0 <= I#[DC_Reconstruction#anon$12];
  assume I#[DC_Reconstruction#anon$12] <= R#[DC_Reconstruction#anon$12];
  assume R#[DC_Reconstruction#anon$12] <= C#[DC_Reconstruction#anon$12];
  assume I#[DC_Reconstruction#anon$12] == R#[DC_Reconstruction#anon$12];
  assume 0 <= I#[DC_Reconstruction#anon$13];
  assume I#[DC_Reconstruction#anon$13] <= R#[DC_Reconstruction#anon$13];
  assume R#[DC_Reconstruction#anon$13] <= C#[DC_Reconstruction#anon$13];
  assume I#[DC_Reconstruction#anon$13] == R#[DC_Reconstruction#anon$13];
  assume 0 <= I#[DC_Reconstruction#anon$14];
  assume I#[DC_Reconstruction#anon$14] <= R#[DC_Reconstruction#anon$14];
  assume R#[DC_Reconstruction#anon$14] <= C#[DC_Reconstruction#anon$14];
  assume I#[DC_Reconstruction#anon$14] == R#[DC_Reconstruction#anon$14];
  assume 0 <= I#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$15] <= R#[DC_Reconstruction#anon$15];
  assume R#[DC_Reconstruction#anon$15] <= C#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$15] == R#[DC_Reconstruction#anon$15];
  assume true;
  assume C#[DC_Reconstruction#anon$2] == 0;
  assume R#[DC_Reconstruction#anon$2] == 0;
  assume C#[DC_Reconstruction#anon$3] == 0;
  assume R#[DC_Reconstruction#anon$3] == 0;
  assume C#[DC_Reconstruction#anon$4] == 0;
  assume R#[DC_Reconstruction#anon$4] == 0;
  assume C#[DC_Reconstruction#anon$5] == 0;
  assume R#[DC_Reconstruction#anon$5] == 0;
  assume C#[DC_Reconstruction#anon$6] == 0;
  assume R#[DC_Reconstruction#anon$6] == 0;
  assume C#[DC_Reconstruction#anon$7] == 0;
  assume R#[DC_Reconstruction#anon$7] == 0;
  assume C#[DC_Reconstruction#anon$8] == 0;
  assume R#[DC_Reconstruction#anon$8] == 0;
  assume C#[DC_Reconstruction#anon$9] == 0;
  assume R#[DC_Reconstruction#anon$9] == 0;
  assume C#[DC_Reconstruction#anon$10] == 0;
  assume R#[DC_Reconstruction#anon$10] == 0;
  assume C#[DC_Reconstruction#anon$11] == 0;
  assume R#[DC_Reconstruction#anon$11] == 0;
  assume C#[DC_Reconstruction#anon$12] == 0;
  assume R#[DC_Reconstruction#anon$12] == 0;
  assume C#[DC_Reconstruction#anon$13] == 0;
  assume R#[DC_Reconstruction#anon$13] == 0;
  assume C#[DC_Reconstruction#anon$14] == 0;
  assume R#[DC_Reconstruction#anon$14] == 0;
  assume C#[DC_Reconstruction#anon$15] == 0;
  assume R#[DC_Reconstruction#anon$15] == 0;
  assert {:msg "Initialization of network 'DC_Reconstruction' might not establish the channel invariant (#0)"} I#[DC_Reconstruction#anon$5] == I#[DC_Reconstruction#anon$2];
  assert {:msg "Initialization of network 'DC_Reconstruction' might not establish the channel invariant (#1)"} I#[DC_Reconstruction#anon$6] == I#[DC_Reconstruction#anon$2];
  I# := R#;
  assert {:msg "Initialization of network 'DC_Reconstruction' might not establish the network invariant: Unread tokens might be left on channel anon$2 (#2)"} (C#[DC_Reconstruction#anon$2] - R#[DC_Reconstruction#anon$2]) == 0;
  assert {:msg "Initialization of network 'DC_Reconstruction' might not establish the network invariant: Unread tokens might be left on channel anon$3 (#3)"} (C#[DC_Reconstruction#anon$3] - R#[DC_Reconstruction#anon$3]) == 0;
  assert {:msg "Initialization of network 'DC_Reconstruction' might not establish the network invariant: Unread tokens might be left on channel anon$4 (#4)"} (C#[DC_Reconstruction#anon$4] - R#[DC_Reconstruction#anon$4]) == 0;
  assert {:msg "Initialization of network 'DC_Reconstruction' might not establish the network invariant: Unread tokens might be left on channel anon$5 (#5)"} (C#[DC_Reconstruction#anon$5] - R#[DC_Reconstruction#anon$5]) == 0;
  assert {:msg "Initialization of network 'DC_Reconstruction' might not establish the network invariant: Unread tokens might be left on channel anon$6 (#6)"} (C#[DC_Reconstruction#anon$6] - R#[DC_Reconstruction#anon$6]) == 0;
  assert {:msg "Initialization of network 'DC_Reconstruction' might not establish the network invariant: Unread tokens might be left on channel anon$7 (#7)"} (C#[DC_Reconstruction#anon$7] - R#[DC_Reconstruction#anon$7]) == 0;
  assert {:msg "Initialization of network 'DC_Reconstruction' might not establish the network invariant: Unread tokens might be left on channel anon$8 (#8)"} (C#[DC_Reconstruction#anon$8] - R#[DC_Reconstruction#anon$8]) == 0;
  assert {:msg "Initialization of network 'DC_Reconstruction' might not establish the network invariant: Unread tokens might be left on channel anon$9 (#9)"} (C#[DC_Reconstruction#anon$9] - R#[DC_Reconstruction#anon$9]) == 0;
  assert {:msg "Initialization of network 'DC_Reconstruction' might not establish the network invariant: Unread tokens might be left on channel anon$10 (#10)"} (C#[DC_Reconstruction#anon$10] - R#[DC_Reconstruction#anon$10]) == 0;
  assert {:msg "Initialization of network 'DC_Reconstruction' might not establish the network invariant: Unread tokens might be left on channel anon$11 (#11)"} (C#[DC_Reconstruction#anon$11] - R#[DC_Reconstruction#anon$11]) == 0;
  assert {:msg "Initialization of network 'DC_Reconstruction' might not establish the network invariant: Unread tokens might be left on channel anon$12 (#12)"} (C#[DC_Reconstruction#anon$12] - R#[DC_Reconstruction#anon$12]) == 0;
  assert {:msg "Initialization of network 'DC_Reconstruction' might not establish the network invariant: Unread tokens might be left on channel anon$13 (#13)"} (C#[DC_Reconstruction#anon$13] - R#[DC_Reconstruction#anon$13]) == 0;
  assert {:msg "Initialization of network 'DC_Reconstruction' might not establish the network invariant: Unread tokens might be left on channel anon$14 (#14)"} (C#[DC_Reconstruction#anon$14] - R#[DC_Reconstruction#anon$14]) == 0;
  assert {:msg "Initialization of network 'DC_Reconstruction' might not establish the network invariant: Unread tokens might be left on channel anon$15 (#15)"} (C#[DC_Reconstruction#anon$15] - R#[DC_Reconstruction#anon$15]) == 0;
}
procedure DC_Reconstruction##Broadcast#anon$1#1()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var DC_Reconstruction#broadcast: Actor;
  var DC_Reconstruction#addressing: Actor;
  var DC_Reconstruction#invpred: Actor;
  var DC_Reconstruction#anon$2: Chan (bv12);
  var DC_Reconstruction#anon$3: Chan (bv13);
  var DC_Reconstruction#anon$4: Chan (bv6);
  var DC_Reconstruction#anon$5: Chan (bv12);
  var DC_Reconstruction#anon$6: Chan (bv12);
  var DC_Reconstruction#anon$7: Chan (bv11);
  var DC_Reconstruction#anon$8: Chan (bv11);
  var DC_Reconstruction#anon$9: Chan (bv11);
  var DC_Reconstruction#anon$10: Chan (bv13);
  var DC_Reconstruction#anon$11: Chan (bv11);
  var DC_Reconstruction#anon$12: Chan (bv3);
  var DC_Reconstruction#anon$13: Chan (bv3);
  var DC_Reconstruction#anon$14: Chan (bool);
  var DC_Reconstruction#anon$15: Chan (bv6);
  var AV#addressing#St#: int;
  var AV#addressing#advance: int;
  var AV#addressing#predict: int;
  var AV#addressing#geth: int;
  var AV#addressing#getw: int;
  var AV#addressing#read: int;
  var AV#addressing#NEWVOP: bv12;
  var AV#addressing#INTRA: bv12;
  var AV#addressing#INTER: bv12;
  var AV#addressing#MOTION: bv12;
  var AV#addressing#ACCODED: bv12;
  var AV#addressing#ACPRED: bv12;
  var AV#addressing#mbx: bv8;
  var AV#addressing#top_edge: bool;
  var AV#addressing#left_edge: bool;
  var AV#addressing#comp: bv4;
  var AV#addressing#mbwidth: bv8;
  var AV#addressing#BUF_SIZE: int;
  var AV#addressing#coded: Map (bv11) (bool);
  var AV#addressing#ptr: bv8;
  var AV#addressing#ptr_left: bv8;
  var AV#addressing#ptr_above: bv8;
  var AV#addressing#ptr_above_left: bv8;
  var AV#invpred#St#: int;
  var AV#invpred#sat: int;
  var AV#invpred#geth: int;
  var AV#invpred#advance: int;
  var AV#invpred#intra: int;
  var AV#invpred#inter: int;
  var AV#invpred#getw: int;
  var AV#invpred#read: int;
  var AV#invpred#NEWVOP: bv12;
  var AV#invpred#INTRA: bv12;
  var AV#invpred#INTER: bv12;
  var AV#invpred#MOTION: bv12;
  var AV#invpred#ACCODED: bv12;
  var AV#invpred#ACPRED: bv12;
  var AV#invpred#s_QP: bv6;
  var AV#invpred#round: bv2;
  var AV#invpred#BUF_SIZE: bv32;
  var AV#invpred#ptr: bv32;
  var AV#invpred#comp: bv4;
  var AV#invpred#dc_buf: Map (bv32) (bv13);
  var AV#invpred#dc_pred: bv13;
  var AV#invpred#scaler: bv7;
  var AV#invpred#dc_val: bv13;
  var AV#invpred#is_signed: bool;
  var X#t: bv12;
  assume (DC_Reconstruction#broadcast != DC_Reconstruction#addressing) && (DC_Reconstruction#broadcast != DC_Reconstruction#invpred) && (DC_Reconstruction#addressing != DC_Reconstruction#invpred);
  assume (DC_Reconstruction#anon$2 != DC_Reconstruction#anon$5) && (DC_Reconstruction#anon$2 != DC_Reconstruction#anon$6) && (DC_Reconstruction#anon$3 != DC_Reconstruction#anon$10) && (DC_Reconstruction#anon$4 != DC_Reconstruction#anon$15) && (DC_Reconstruction#anon$5 != DC_Reconstruction#anon$6) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$8) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$9) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$8 != DC_Reconstruction#anon$9) && (DC_Reconstruction#anon$8 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$9 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$12 != DC_Reconstruction#anon$13);
  assume 0 <= I#[DC_Reconstruction#anon$2];
  assume I#[DC_Reconstruction#anon$2] <= R#[DC_Reconstruction#anon$2];
  assume R#[DC_Reconstruction#anon$2] <= C#[DC_Reconstruction#anon$2];
  assume 0 <= I#[DC_Reconstruction#anon$3];
  assume I#[DC_Reconstruction#anon$3] <= R#[DC_Reconstruction#anon$3];
  assume R#[DC_Reconstruction#anon$3] <= C#[DC_Reconstruction#anon$3];
  assume 0 <= I#[DC_Reconstruction#anon$4];
  assume I#[DC_Reconstruction#anon$4] <= R#[DC_Reconstruction#anon$4];
  assume R#[DC_Reconstruction#anon$4] <= C#[DC_Reconstruction#anon$4];
  assume 0 <= I#[DC_Reconstruction#anon$5];
  assume I#[DC_Reconstruction#anon$5] <= R#[DC_Reconstruction#anon$5];
  assume R#[DC_Reconstruction#anon$5] <= C#[DC_Reconstruction#anon$5];
  assume 0 <= I#[DC_Reconstruction#anon$6];
  assume I#[DC_Reconstruction#anon$6] <= R#[DC_Reconstruction#anon$6];
  assume R#[DC_Reconstruction#anon$6] <= C#[DC_Reconstruction#anon$6];
  assume 0 <= I#[DC_Reconstruction#anon$7];
  assume I#[DC_Reconstruction#anon$7] <= R#[DC_Reconstruction#anon$7];
  assume R#[DC_Reconstruction#anon$7] <= C#[DC_Reconstruction#anon$7];
  assume 0 <= I#[DC_Reconstruction#anon$8];
  assume I#[DC_Reconstruction#anon$8] <= R#[DC_Reconstruction#anon$8];
  assume R#[DC_Reconstruction#anon$8] <= C#[DC_Reconstruction#anon$8];
  assume 0 <= I#[DC_Reconstruction#anon$9];
  assume I#[DC_Reconstruction#anon$9] <= R#[DC_Reconstruction#anon$9];
  assume R#[DC_Reconstruction#anon$9] <= C#[DC_Reconstruction#anon$9];
  assume 0 <= I#[DC_Reconstruction#anon$10];
  assume I#[DC_Reconstruction#anon$10] <= R#[DC_Reconstruction#anon$10];
  assume R#[DC_Reconstruction#anon$10] <= C#[DC_Reconstruction#anon$10];
  assume I#[DC_Reconstruction#anon$10] == R#[DC_Reconstruction#anon$10];
  assume 0 <= I#[DC_Reconstruction#anon$11];
  assume I#[DC_Reconstruction#anon$11] <= R#[DC_Reconstruction#anon$11];
  assume R#[DC_Reconstruction#anon$11] <= C#[DC_Reconstruction#anon$11];
  assume I#[DC_Reconstruction#anon$11] == R#[DC_Reconstruction#anon$11];
  assume 0 <= I#[DC_Reconstruction#anon$12];
  assume I#[DC_Reconstruction#anon$12] <= R#[DC_Reconstruction#anon$12];
  assume R#[DC_Reconstruction#anon$12] <= C#[DC_Reconstruction#anon$12];
  assume I#[DC_Reconstruction#anon$12] == R#[DC_Reconstruction#anon$12];
  assume 0 <= I#[DC_Reconstruction#anon$13];
  assume I#[DC_Reconstruction#anon$13] <= R#[DC_Reconstruction#anon$13];
  assume R#[DC_Reconstruction#anon$13] <= C#[DC_Reconstruction#anon$13];
  assume I#[DC_Reconstruction#anon$13] == R#[DC_Reconstruction#anon$13];
  assume 0 <= I#[DC_Reconstruction#anon$14];
  assume I#[DC_Reconstruction#anon$14] <= R#[DC_Reconstruction#anon$14];
  assume R#[DC_Reconstruction#anon$14] <= C#[DC_Reconstruction#anon$14];
  assume I#[DC_Reconstruction#anon$14] == R#[DC_Reconstruction#anon$14];
  assume 0 <= I#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$15] <= R#[DC_Reconstruction#anon$15];
  assume R#[DC_Reconstruction#anon$15] <= C#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$15] == R#[DC_Reconstruction#anon$15];
  assume true;
  I#sub[DC_Reconstruction#anon$2] := R#[DC_Reconstruction#anon$2];
  I#sub[DC_Reconstruction#anon$5] := C#[DC_Reconstruction#anon$5];
  I#sub[DC_Reconstruction#anon$6] := C#[DC_Reconstruction#anon$6];
  assume I#[DC_Reconstruction#anon$5] == I#[DC_Reconstruction#anon$2];
  assume I#[DC_Reconstruction#anon$6] == I#[DC_Reconstruction#anon$2];
  assume R#[DC_Reconstruction#anon$2] == C#[DC_Reconstruction#anon$5];
  assume R#[DC_Reconstruction#anon$2] == C#[DC_Reconstruction#anon$6];
  assume (forall idx$: int :: 
    (0 <= idx$) && (idx$ < C#[DC_Reconstruction#anon$5]) ==> (M#[DC_Reconstruction#anon$5][idx$] == M#[DC_Reconstruction#anon$2][idx$])
  );
  assume (forall idx$: int :: 
    (0 <= idx$) && (idx$ < C#[DC_Reconstruction#anon$6]) ==> (M#[DC_Reconstruction#anon$6][idx$] == M#[DC_Reconstruction#anon$2][idx$])
  );
  assume (Mode#[this#] == StartMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) != 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#INTRA) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#INTRA) == 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 3);
  assume (Mode#[this#] == IntraMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 1);
  assume (Mode#[this#] == StartMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) != 0bv12) && (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTRA) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 3) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) == 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) <= 1) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) == 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) <= 1) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) <= 1) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) <= 1) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) <= 1) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume 1 <= (C#[DC_Reconstruction#anon$2] - R#[DC_Reconstruction#anon$2]);
  X#t := M#[DC_Reconstruction#anon$2][R#[DC_Reconstruction#anon$2]];
  R#[DC_Reconstruction#anon$2] := R#[DC_Reconstruction#anon$2] + 1;
  M#[DC_Reconstruction#anon$5][C#[DC_Reconstruction#anon$5]] := X#t;
  C#[DC_Reconstruction#anon$5] := C#[DC_Reconstruction#anon$5] + 1;
  M#[DC_Reconstruction#anon$6][C#[DC_Reconstruction#anon$6]] := X#t;
  C#[DC_Reconstruction#anon$6] := C#[DC_Reconstruction#anon$6] + 1;
  assert {:msg "Action at DC_reconstruction.actor(2.3) ('anon$1') for actor instance 'broadcast' might not preserve the channel invariant (#16)"} I#[DC_Reconstruction#anon$5] == I#[DC_Reconstruction#anon$2];
  assert {:msg "Action at DC_reconstruction.actor(2.3) ('anon$1') for actor instance 'broadcast' might not preserve the channel invariant (#17)"} I#[DC_Reconstruction#anon$6] == I#[DC_Reconstruction#anon$2];
}
procedure DC_Reconstruction##Addressing_simple#StartMode#2()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var DC_Reconstruction#broadcast: Actor;
  var DC_Reconstruction#addressing: Actor;
  var DC_Reconstruction#invpred: Actor;
  var DC_Reconstruction#anon$2: Chan (bv12);
  var DC_Reconstruction#anon$3: Chan (bv13);
  var DC_Reconstruction#anon$4: Chan (bv6);
  var DC_Reconstruction#anon$5: Chan (bv12);
  var DC_Reconstruction#anon$6: Chan (bv12);
  var DC_Reconstruction#anon$7: Chan (bv11);
  var DC_Reconstruction#anon$8: Chan (bv11);
  var DC_Reconstruction#anon$9: Chan (bv11);
  var DC_Reconstruction#anon$10: Chan (bv13);
  var DC_Reconstruction#anon$11: Chan (bv11);
  var DC_Reconstruction#anon$12: Chan (bv3);
  var DC_Reconstruction#anon$13: Chan (bv3);
  var DC_Reconstruction#anon$14: Chan (bool);
  var DC_Reconstruction#anon$15: Chan (bv6);
  var AV#addressing#St#: int;
  var AV#addressing#advance: int;
  var AV#addressing#predict: int;
  var AV#addressing#geth: int;
  var AV#addressing#getw: int;
  var AV#addressing#read: int;
  var AV#addressing#NEWVOP: bv12;
  var AV#addressing#INTRA: bv12;
  var AV#addressing#INTER: bv12;
  var AV#addressing#MOTION: bv12;
  var AV#addressing#ACCODED: bv12;
  var AV#addressing#ACPRED: bv12;
  var AV#addressing#mbx: bv8;
  var AV#addressing#top_edge: bool;
  var AV#addressing#left_edge: bool;
  var AV#addressing#comp: bv4;
  var AV#addressing#mbwidth: bv8;
  var AV#addressing#BUF_SIZE: int;
  var AV#addressing#coded: Map (bv11) (bool);
  var AV#addressing#ptr: bv8;
  var AV#addressing#ptr_left: bv8;
  var AV#addressing#ptr_above: bv8;
  var AV#addressing#ptr_above_left: bv8;
  var AV#invpred#St#: int;
  var AV#invpred#sat: int;
  var AV#invpred#geth: int;
  var AV#invpred#advance: int;
  var AV#invpred#intra: int;
  var AV#invpred#inter: int;
  var AV#invpred#getw: int;
  var AV#invpred#read: int;
  var AV#invpred#NEWVOP: bv12;
  var AV#invpred#INTRA: bv12;
  var AV#invpred#INTER: bv12;
  var AV#invpred#MOTION: bv12;
  var AV#invpred#ACCODED: bv12;
  var AV#invpred#ACPRED: bv12;
  var AV#invpred#s_QP: bv6;
  var AV#invpred#round: bv2;
  var AV#invpred#BUF_SIZE: bv32;
  var AV#invpred#ptr: bv32;
  var AV#invpred#comp: bv4;
  var AV#invpred#dc_buf: Map (bv32) (bv13);
  var AV#invpred#dc_pred: bv13;
  var AV#invpred#scaler: bv7;
  var AV#invpred#dc_val: bv13;
  var AV#invpred#is_signed: bool;
  assume (DC_Reconstruction#broadcast != DC_Reconstruction#addressing) && (DC_Reconstruction#broadcast != DC_Reconstruction#invpred) && (DC_Reconstruction#addressing != DC_Reconstruction#invpred);
  assume (DC_Reconstruction#anon$2 != DC_Reconstruction#anon$5) && (DC_Reconstruction#anon$2 != DC_Reconstruction#anon$6) && (DC_Reconstruction#anon$3 != DC_Reconstruction#anon$10) && (DC_Reconstruction#anon$4 != DC_Reconstruction#anon$15) && (DC_Reconstruction#anon$5 != DC_Reconstruction#anon$6) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$8) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$9) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$8 != DC_Reconstruction#anon$9) && (DC_Reconstruction#anon$8 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$9 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$12 != DC_Reconstruction#anon$13);
  assume 0 <= I#[DC_Reconstruction#anon$2];
  assume I#[DC_Reconstruction#anon$2] <= R#[DC_Reconstruction#anon$2];
  assume R#[DC_Reconstruction#anon$2] <= C#[DC_Reconstruction#anon$2];
  assume 0 <= I#[DC_Reconstruction#anon$3];
  assume I#[DC_Reconstruction#anon$3] <= R#[DC_Reconstruction#anon$3];
  assume R#[DC_Reconstruction#anon$3] <= C#[DC_Reconstruction#anon$3];
  assume 0 <= I#[DC_Reconstruction#anon$4];
  assume I#[DC_Reconstruction#anon$4] <= R#[DC_Reconstruction#anon$4];
  assume R#[DC_Reconstruction#anon$4] <= C#[DC_Reconstruction#anon$4];
  assume 0 <= I#[DC_Reconstruction#anon$5];
  assume I#[DC_Reconstruction#anon$5] <= R#[DC_Reconstruction#anon$5];
  assume R#[DC_Reconstruction#anon$5] <= C#[DC_Reconstruction#anon$5];
  assume 0 <= I#[DC_Reconstruction#anon$6];
  assume I#[DC_Reconstruction#anon$6] <= R#[DC_Reconstruction#anon$6];
  assume R#[DC_Reconstruction#anon$6] <= C#[DC_Reconstruction#anon$6];
  assume 0 <= I#[DC_Reconstruction#anon$7];
  assume I#[DC_Reconstruction#anon$7] <= R#[DC_Reconstruction#anon$7];
  assume R#[DC_Reconstruction#anon$7] <= C#[DC_Reconstruction#anon$7];
  assume 0 <= I#[DC_Reconstruction#anon$8];
  assume I#[DC_Reconstruction#anon$8] <= R#[DC_Reconstruction#anon$8];
  assume R#[DC_Reconstruction#anon$8] <= C#[DC_Reconstruction#anon$8];
  assume 0 <= I#[DC_Reconstruction#anon$9];
  assume I#[DC_Reconstruction#anon$9] <= R#[DC_Reconstruction#anon$9];
  assume R#[DC_Reconstruction#anon$9] <= C#[DC_Reconstruction#anon$9];
  assume 0 <= I#[DC_Reconstruction#anon$10];
  assume I#[DC_Reconstruction#anon$10] <= R#[DC_Reconstruction#anon$10];
  assume R#[DC_Reconstruction#anon$10] <= C#[DC_Reconstruction#anon$10];
  assume I#[DC_Reconstruction#anon$10] == R#[DC_Reconstruction#anon$10];
  assume 0 <= I#[DC_Reconstruction#anon$11];
  assume I#[DC_Reconstruction#anon$11] <= R#[DC_Reconstruction#anon$11];
  assume R#[DC_Reconstruction#anon$11] <= C#[DC_Reconstruction#anon$11];
  assume I#[DC_Reconstruction#anon$11] == R#[DC_Reconstruction#anon$11];
  assume 0 <= I#[DC_Reconstruction#anon$12];
  assume I#[DC_Reconstruction#anon$12] <= R#[DC_Reconstruction#anon$12];
  assume R#[DC_Reconstruction#anon$12] <= C#[DC_Reconstruction#anon$12];
  assume I#[DC_Reconstruction#anon$12] == R#[DC_Reconstruction#anon$12];
  assume 0 <= I#[DC_Reconstruction#anon$13];
  assume I#[DC_Reconstruction#anon$13] <= R#[DC_Reconstruction#anon$13];
  assume R#[DC_Reconstruction#anon$13] <= C#[DC_Reconstruction#anon$13];
  assume I#[DC_Reconstruction#anon$13] == R#[DC_Reconstruction#anon$13];
  assume 0 <= I#[DC_Reconstruction#anon$14];
  assume I#[DC_Reconstruction#anon$14] <= R#[DC_Reconstruction#anon$14];
  assume R#[DC_Reconstruction#anon$14] <= C#[DC_Reconstruction#anon$14];
  assume I#[DC_Reconstruction#anon$14] == R#[DC_Reconstruction#anon$14];
  assume 0 <= I#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$15] <= R#[DC_Reconstruction#anon$15];
  assume R#[DC_Reconstruction#anon$15] <= C#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$15] == R#[DC_Reconstruction#anon$15];
  assume true;
  I#sub[DC_Reconstruction#anon$6] := R#[DC_Reconstruction#anon$6];
  I#sub[DC_Reconstruction#anon$7] := C#[DC_Reconstruction#anon$7];
  I#sub[DC_Reconstruction#anon$8] := C#[DC_Reconstruction#anon$8];
  I#sub[DC_Reconstruction#anon$9] := C#[DC_Reconstruction#anon$9];
  assume I#[DC_Reconstruction#anon$5] == I#[DC_Reconstruction#anon$2];
  assume I#[DC_Reconstruction#anon$6] == I#[DC_Reconstruction#anon$2];
  assume R#[DC_Reconstruction#anon$2] == C#[DC_Reconstruction#anon$5];
  assume R#[DC_Reconstruction#anon$2] == C#[DC_Reconstruction#anon$6];
  assume (forall idx$: int :: 
    (0 <= idx$) && (idx$ < C#[DC_Reconstruction#anon$5]) ==> (M#[DC_Reconstruction#anon$5][idx$] == M#[DC_Reconstruction#anon$2][idx$])
  );
  assume (forall idx$: int :: 
    (0 <= idx$) && (idx$ < C#[DC_Reconstruction#anon$6]) ==> (M#[DC_Reconstruction#anon$6][idx$] == M#[DC_Reconstruction#anon$2][idx$])
  );
  assume (Mode#[this#] == StartMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) != 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#INTRA) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#INTRA) == 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 3);
  assume (Mode#[this#] == IntraMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 1);
  assume (Mode#[this#] == StartMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) != 0bv12) && (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTRA) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 3) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) == 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) <= 1) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) == 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) <= 1) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) <= 1) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) <= 1) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) <= 1) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume 3 <= (C#[DC_Reconstruction#anon$6] - R#[DC_Reconstruction#anon$6]);
  R#[DC_Reconstruction#anon$6] := R#[DC_Reconstruction#anon$6] + 3;
  assert {:msg "Addressing_simple.cal(52.12): Precondition might not hold for instance at DC_reconstruction.actor(17.5) (#18)"} AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#sub[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) != 0bv12;
  assert {:msg "Action at Addressing_simple.cal(50.2) ('StartMode') for actor instance 'addressing' might not preserve the channel invariant (#19)"} I#[DC_Reconstruction#anon$5] == I#[DC_Reconstruction#anon$2];
  assert {:msg "Action at Addressing_simple.cal(50.2) ('StartMode') for actor instance 'addressing' might not preserve the channel invariant (#20)"} I#[DC_Reconstruction#anon$6] == I#[DC_Reconstruction#anon$2];
}
procedure DC_Reconstruction##Addressing_simple#IntraMode#3()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var DC_Reconstruction#broadcast: Actor;
  var DC_Reconstruction#addressing: Actor;
  var DC_Reconstruction#invpred: Actor;
  var DC_Reconstruction#anon$2: Chan (bv12);
  var DC_Reconstruction#anon$3: Chan (bv13);
  var DC_Reconstruction#anon$4: Chan (bv6);
  var DC_Reconstruction#anon$5: Chan (bv12);
  var DC_Reconstruction#anon$6: Chan (bv12);
  var DC_Reconstruction#anon$7: Chan (bv11);
  var DC_Reconstruction#anon$8: Chan (bv11);
  var DC_Reconstruction#anon$9: Chan (bv11);
  var DC_Reconstruction#anon$10: Chan (bv13);
  var DC_Reconstruction#anon$11: Chan (bv11);
  var DC_Reconstruction#anon$12: Chan (bv3);
  var DC_Reconstruction#anon$13: Chan (bv3);
  var DC_Reconstruction#anon$14: Chan (bool);
  var DC_Reconstruction#anon$15: Chan (bv6);
  var AV#addressing#St#: int;
  var AV#addressing#advance: int;
  var AV#addressing#predict: int;
  var AV#addressing#geth: int;
  var AV#addressing#getw: int;
  var AV#addressing#read: int;
  var AV#addressing#NEWVOP: bv12;
  var AV#addressing#INTRA: bv12;
  var AV#addressing#INTER: bv12;
  var AV#addressing#MOTION: bv12;
  var AV#addressing#ACCODED: bv12;
  var AV#addressing#ACPRED: bv12;
  var AV#addressing#mbx: bv8;
  var AV#addressing#top_edge: bool;
  var AV#addressing#left_edge: bool;
  var AV#addressing#comp: bv4;
  var AV#addressing#mbwidth: bv8;
  var AV#addressing#BUF_SIZE: int;
  var AV#addressing#coded: Map (bv11) (bool);
  var AV#addressing#ptr: bv8;
  var AV#addressing#ptr_left: bv8;
  var AV#addressing#ptr_above: bv8;
  var AV#addressing#ptr_above_left: bv8;
  var AV#invpred#St#: int;
  var AV#invpred#sat: int;
  var AV#invpred#geth: int;
  var AV#invpred#advance: int;
  var AV#invpred#intra: int;
  var AV#invpred#inter: int;
  var AV#invpred#getw: int;
  var AV#invpred#read: int;
  var AV#invpred#NEWVOP: bv12;
  var AV#invpred#INTRA: bv12;
  var AV#invpred#INTER: bv12;
  var AV#invpred#MOTION: bv12;
  var AV#invpred#ACCODED: bv12;
  var AV#invpred#ACPRED: bv12;
  var AV#invpred#s_QP: bv6;
  var AV#invpred#round: bv2;
  var AV#invpred#BUF_SIZE: bv32;
  var AV#invpred#ptr: bv32;
  var AV#invpred#comp: bv4;
  var AV#invpred#dc_buf: Map (bv32) (bv13);
  var AV#invpred#dc_pred: bv13;
  var AV#invpred#scaler: bv7;
  var AV#invpred#dc_val: bv13;
  var AV#invpred#is_signed: bool;
  assume (DC_Reconstruction#broadcast != DC_Reconstruction#addressing) && (DC_Reconstruction#broadcast != DC_Reconstruction#invpred) && (DC_Reconstruction#addressing != DC_Reconstruction#invpred);
  assume (DC_Reconstruction#anon$2 != DC_Reconstruction#anon$5) && (DC_Reconstruction#anon$2 != DC_Reconstruction#anon$6) && (DC_Reconstruction#anon$3 != DC_Reconstruction#anon$10) && (DC_Reconstruction#anon$4 != DC_Reconstruction#anon$15) && (DC_Reconstruction#anon$5 != DC_Reconstruction#anon$6) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$8) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$9) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$8 != DC_Reconstruction#anon$9) && (DC_Reconstruction#anon$8 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$9 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$12 != DC_Reconstruction#anon$13);
  assume 0 <= I#[DC_Reconstruction#anon$2];
  assume I#[DC_Reconstruction#anon$2] <= R#[DC_Reconstruction#anon$2];
  assume R#[DC_Reconstruction#anon$2] <= C#[DC_Reconstruction#anon$2];
  assume 0 <= I#[DC_Reconstruction#anon$3];
  assume I#[DC_Reconstruction#anon$3] <= R#[DC_Reconstruction#anon$3];
  assume R#[DC_Reconstruction#anon$3] <= C#[DC_Reconstruction#anon$3];
  assume 0 <= I#[DC_Reconstruction#anon$4];
  assume I#[DC_Reconstruction#anon$4] <= R#[DC_Reconstruction#anon$4];
  assume R#[DC_Reconstruction#anon$4] <= C#[DC_Reconstruction#anon$4];
  assume 0 <= I#[DC_Reconstruction#anon$5];
  assume I#[DC_Reconstruction#anon$5] <= R#[DC_Reconstruction#anon$5];
  assume R#[DC_Reconstruction#anon$5] <= C#[DC_Reconstruction#anon$5];
  assume 0 <= I#[DC_Reconstruction#anon$6];
  assume I#[DC_Reconstruction#anon$6] <= R#[DC_Reconstruction#anon$6];
  assume R#[DC_Reconstruction#anon$6] <= C#[DC_Reconstruction#anon$6];
  assume 0 <= I#[DC_Reconstruction#anon$7];
  assume I#[DC_Reconstruction#anon$7] <= R#[DC_Reconstruction#anon$7];
  assume R#[DC_Reconstruction#anon$7] <= C#[DC_Reconstruction#anon$7];
  assume 0 <= I#[DC_Reconstruction#anon$8];
  assume I#[DC_Reconstruction#anon$8] <= R#[DC_Reconstruction#anon$8];
  assume R#[DC_Reconstruction#anon$8] <= C#[DC_Reconstruction#anon$8];
  assume 0 <= I#[DC_Reconstruction#anon$9];
  assume I#[DC_Reconstruction#anon$9] <= R#[DC_Reconstruction#anon$9];
  assume R#[DC_Reconstruction#anon$9] <= C#[DC_Reconstruction#anon$9];
  assume 0 <= I#[DC_Reconstruction#anon$10];
  assume I#[DC_Reconstruction#anon$10] <= R#[DC_Reconstruction#anon$10];
  assume R#[DC_Reconstruction#anon$10] <= C#[DC_Reconstruction#anon$10];
  assume I#[DC_Reconstruction#anon$10] == R#[DC_Reconstruction#anon$10];
  assume 0 <= I#[DC_Reconstruction#anon$11];
  assume I#[DC_Reconstruction#anon$11] <= R#[DC_Reconstruction#anon$11];
  assume R#[DC_Reconstruction#anon$11] <= C#[DC_Reconstruction#anon$11];
  assume I#[DC_Reconstruction#anon$11] == R#[DC_Reconstruction#anon$11];
  assume 0 <= I#[DC_Reconstruction#anon$12];
  assume I#[DC_Reconstruction#anon$12] <= R#[DC_Reconstruction#anon$12];
  assume R#[DC_Reconstruction#anon$12] <= C#[DC_Reconstruction#anon$12];
  assume I#[DC_Reconstruction#anon$12] == R#[DC_Reconstruction#anon$12];
  assume 0 <= I#[DC_Reconstruction#anon$13];
  assume I#[DC_Reconstruction#anon$13] <= R#[DC_Reconstruction#anon$13];
  assume R#[DC_Reconstruction#anon$13] <= C#[DC_Reconstruction#anon$13];
  assume I#[DC_Reconstruction#anon$13] == R#[DC_Reconstruction#anon$13];
  assume 0 <= I#[DC_Reconstruction#anon$14];
  assume I#[DC_Reconstruction#anon$14] <= R#[DC_Reconstruction#anon$14];
  assume R#[DC_Reconstruction#anon$14] <= C#[DC_Reconstruction#anon$14];
  assume I#[DC_Reconstruction#anon$14] == R#[DC_Reconstruction#anon$14];
  assume 0 <= I#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$15] <= R#[DC_Reconstruction#anon$15];
  assume R#[DC_Reconstruction#anon$15] <= C#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$15] == R#[DC_Reconstruction#anon$15];
  assume true;
  I#sub[DC_Reconstruction#anon$6] := R#[DC_Reconstruction#anon$6];
  I#sub[DC_Reconstruction#anon$7] := C#[DC_Reconstruction#anon$7];
  I#sub[DC_Reconstruction#anon$8] := C#[DC_Reconstruction#anon$8];
  I#sub[DC_Reconstruction#anon$9] := C#[DC_Reconstruction#anon$9];
  assume I#[DC_Reconstruction#anon$5] == I#[DC_Reconstruction#anon$2];
  assume I#[DC_Reconstruction#anon$6] == I#[DC_Reconstruction#anon$2];
  assume R#[DC_Reconstruction#anon$2] == C#[DC_Reconstruction#anon$5];
  assume R#[DC_Reconstruction#anon$2] == C#[DC_Reconstruction#anon$6];
  assume (forall idx$: int :: 
    (0 <= idx$) && (idx$ < C#[DC_Reconstruction#anon$5]) ==> (M#[DC_Reconstruction#anon$5][idx$] == M#[DC_Reconstruction#anon$2][idx$])
  );
  assume (forall idx$: int :: 
    (0 <= idx$) && (idx$ < C#[DC_Reconstruction#anon$6]) ==> (M#[DC_Reconstruction#anon$6][idx$] == M#[DC_Reconstruction#anon$2][idx$])
  );
  assume (Mode#[this#] == StartMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) != 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#INTRA) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#INTRA) == 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 3);
  assume (Mode#[this#] == IntraMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 1);
  assume (Mode#[this#] == StartMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) != 0bv12) && (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTRA) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 3) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) == 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) <= 1) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) == 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) <= 1) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) <= 1) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) <= 1) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) <= 1) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume 1 <= (C#[DC_Reconstruction#anon$6] - R#[DC_Reconstruction#anon$6]);
  R#[DC_Reconstruction#anon$6] := R#[DC_Reconstruction#anon$6] + 1;
  assert {:msg "Addressing_simple.cal(57.12): Precondition might not hold for instance at DC_reconstruction.actor(17.5) (#21)"} AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#sub[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) == 0bv12;
  assert {:msg "Addressing_simple.cal(58.12): Precondition might not hold for instance at DC_reconstruction.actor(17.5) (#22)"} AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#sub[DC_Reconstruction#anon$6]], AV#addressing#INTRA) != 0bv12;
  C#[DC_Reconstruction#anon$7] := C#[DC_Reconstruction#anon$7] + 1;
  C#[DC_Reconstruction#anon$8] := C#[DC_Reconstruction#anon$8] + 1;
  C#[DC_Reconstruction#anon$9] := C#[DC_Reconstruction#anon$9] + 1;
  assert {:msg "Action at Addressing_simple.cal(55.2) ('IntraMode') for actor instance 'addressing' might not preserve the channel invariant (#23)"} I#[DC_Reconstruction#anon$5] == I#[DC_Reconstruction#anon$2];
  assert {:msg "Action at Addressing_simple.cal(55.2) ('IntraMode') for actor instance 'addressing' might not preserve the channel invariant (#24)"} I#[DC_Reconstruction#anon$6] == I#[DC_Reconstruction#anon$2];
}
procedure DC_Reconstruction##Addressing_simple#OtherMode#4()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var DC_Reconstruction#broadcast: Actor;
  var DC_Reconstruction#addressing: Actor;
  var DC_Reconstruction#invpred: Actor;
  var DC_Reconstruction#anon$2: Chan (bv12);
  var DC_Reconstruction#anon$3: Chan (bv13);
  var DC_Reconstruction#anon$4: Chan (bv6);
  var DC_Reconstruction#anon$5: Chan (bv12);
  var DC_Reconstruction#anon$6: Chan (bv12);
  var DC_Reconstruction#anon$7: Chan (bv11);
  var DC_Reconstruction#anon$8: Chan (bv11);
  var DC_Reconstruction#anon$9: Chan (bv11);
  var DC_Reconstruction#anon$10: Chan (bv13);
  var DC_Reconstruction#anon$11: Chan (bv11);
  var DC_Reconstruction#anon$12: Chan (bv3);
  var DC_Reconstruction#anon$13: Chan (bv3);
  var DC_Reconstruction#anon$14: Chan (bool);
  var DC_Reconstruction#anon$15: Chan (bv6);
  var AV#addressing#St#: int;
  var AV#addressing#advance: int;
  var AV#addressing#predict: int;
  var AV#addressing#geth: int;
  var AV#addressing#getw: int;
  var AV#addressing#read: int;
  var AV#addressing#NEWVOP: bv12;
  var AV#addressing#INTRA: bv12;
  var AV#addressing#INTER: bv12;
  var AV#addressing#MOTION: bv12;
  var AV#addressing#ACCODED: bv12;
  var AV#addressing#ACPRED: bv12;
  var AV#addressing#mbx: bv8;
  var AV#addressing#top_edge: bool;
  var AV#addressing#left_edge: bool;
  var AV#addressing#comp: bv4;
  var AV#addressing#mbwidth: bv8;
  var AV#addressing#BUF_SIZE: int;
  var AV#addressing#coded: Map (bv11) (bool);
  var AV#addressing#ptr: bv8;
  var AV#addressing#ptr_left: bv8;
  var AV#addressing#ptr_above: bv8;
  var AV#addressing#ptr_above_left: bv8;
  var AV#invpred#St#: int;
  var AV#invpred#sat: int;
  var AV#invpred#geth: int;
  var AV#invpred#advance: int;
  var AV#invpred#intra: int;
  var AV#invpred#inter: int;
  var AV#invpred#getw: int;
  var AV#invpred#read: int;
  var AV#invpred#NEWVOP: bv12;
  var AV#invpred#INTRA: bv12;
  var AV#invpred#INTER: bv12;
  var AV#invpred#MOTION: bv12;
  var AV#invpred#ACCODED: bv12;
  var AV#invpred#ACPRED: bv12;
  var AV#invpred#s_QP: bv6;
  var AV#invpred#round: bv2;
  var AV#invpred#BUF_SIZE: bv32;
  var AV#invpred#ptr: bv32;
  var AV#invpred#comp: bv4;
  var AV#invpred#dc_buf: Map (bv32) (bv13);
  var AV#invpred#dc_pred: bv13;
  var AV#invpred#scaler: bv7;
  var AV#invpred#dc_val: bv13;
  var AV#invpred#is_signed: bool;
  assume (DC_Reconstruction#broadcast != DC_Reconstruction#addressing) && (DC_Reconstruction#broadcast != DC_Reconstruction#invpred) && (DC_Reconstruction#addressing != DC_Reconstruction#invpred);
  assume (DC_Reconstruction#anon$2 != DC_Reconstruction#anon$5) && (DC_Reconstruction#anon$2 != DC_Reconstruction#anon$6) && (DC_Reconstruction#anon$3 != DC_Reconstruction#anon$10) && (DC_Reconstruction#anon$4 != DC_Reconstruction#anon$15) && (DC_Reconstruction#anon$5 != DC_Reconstruction#anon$6) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$8) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$9) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$8 != DC_Reconstruction#anon$9) && (DC_Reconstruction#anon$8 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$9 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$12 != DC_Reconstruction#anon$13);
  assume 0 <= I#[DC_Reconstruction#anon$2];
  assume I#[DC_Reconstruction#anon$2] <= R#[DC_Reconstruction#anon$2];
  assume R#[DC_Reconstruction#anon$2] <= C#[DC_Reconstruction#anon$2];
  assume 0 <= I#[DC_Reconstruction#anon$3];
  assume I#[DC_Reconstruction#anon$3] <= R#[DC_Reconstruction#anon$3];
  assume R#[DC_Reconstruction#anon$3] <= C#[DC_Reconstruction#anon$3];
  assume 0 <= I#[DC_Reconstruction#anon$4];
  assume I#[DC_Reconstruction#anon$4] <= R#[DC_Reconstruction#anon$4];
  assume R#[DC_Reconstruction#anon$4] <= C#[DC_Reconstruction#anon$4];
  assume 0 <= I#[DC_Reconstruction#anon$5];
  assume I#[DC_Reconstruction#anon$5] <= R#[DC_Reconstruction#anon$5];
  assume R#[DC_Reconstruction#anon$5] <= C#[DC_Reconstruction#anon$5];
  assume 0 <= I#[DC_Reconstruction#anon$6];
  assume I#[DC_Reconstruction#anon$6] <= R#[DC_Reconstruction#anon$6];
  assume R#[DC_Reconstruction#anon$6] <= C#[DC_Reconstruction#anon$6];
  assume 0 <= I#[DC_Reconstruction#anon$7];
  assume I#[DC_Reconstruction#anon$7] <= R#[DC_Reconstruction#anon$7];
  assume R#[DC_Reconstruction#anon$7] <= C#[DC_Reconstruction#anon$7];
  assume 0 <= I#[DC_Reconstruction#anon$8];
  assume I#[DC_Reconstruction#anon$8] <= R#[DC_Reconstruction#anon$8];
  assume R#[DC_Reconstruction#anon$8] <= C#[DC_Reconstruction#anon$8];
  assume 0 <= I#[DC_Reconstruction#anon$9];
  assume I#[DC_Reconstruction#anon$9] <= R#[DC_Reconstruction#anon$9];
  assume R#[DC_Reconstruction#anon$9] <= C#[DC_Reconstruction#anon$9];
  assume 0 <= I#[DC_Reconstruction#anon$10];
  assume I#[DC_Reconstruction#anon$10] <= R#[DC_Reconstruction#anon$10];
  assume R#[DC_Reconstruction#anon$10] <= C#[DC_Reconstruction#anon$10];
  assume I#[DC_Reconstruction#anon$10] == R#[DC_Reconstruction#anon$10];
  assume 0 <= I#[DC_Reconstruction#anon$11];
  assume I#[DC_Reconstruction#anon$11] <= R#[DC_Reconstruction#anon$11];
  assume R#[DC_Reconstruction#anon$11] <= C#[DC_Reconstruction#anon$11];
  assume I#[DC_Reconstruction#anon$11] == R#[DC_Reconstruction#anon$11];
  assume 0 <= I#[DC_Reconstruction#anon$12];
  assume I#[DC_Reconstruction#anon$12] <= R#[DC_Reconstruction#anon$12];
  assume R#[DC_Reconstruction#anon$12] <= C#[DC_Reconstruction#anon$12];
  assume I#[DC_Reconstruction#anon$12] == R#[DC_Reconstruction#anon$12];
  assume 0 <= I#[DC_Reconstruction#anon$13];
  assume I#[DC_Reconstruction#anon$13] <= R#[DC_Reconstruction#anon$13];
  assume R#[DC_Reconstruction#anon$13] <= C#[DC_Reconstruction#anon$13];
  assume I#[DC_Reconstruction#anon$13] == R#[DC_Reconstruction#anon$13];
  assume 0 <= I#[DC_Reconstruction#anon$14];
  assume I#[DC_Reconstruction#anon$14] <= R#[DC_Reconstruction#anon$14];
  assume R#[DC_Reconstruction#anon$14] <= C#[DC_Reconstruction#anon$14];
  assume I#[DC_Reconstruction#anon$14] == R#[DC_Reconstruction#anon$14];
  assume 0 <= I#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$15] <= R#[DC_Reconstruction#anon$15];
  assume R#[DC_Reconstruction#anon$15] <= C#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$15] == R#[DC_Reconstruction#anon$15];
  assume true;
  I#sub[DC_Reconstruction#anon$6] := R#[DC_Reconstruction#anon$6];
  I#sub[DC_Reconstruction#anon$7] := C#[DC_Reconstruction#anon$7];
  I#sub[DC_Reconstruction#anon$8] := C#[DC_Reconstruction#anon$8];
  I#sub[DC_Reconstruction#anon$9] := C#[DC_Reconstruction#anon$9];
  assume I#[DC_Reconstruction#anon$5] == I#[DC_Reconstruction#anon$2];
  assume I#[DC_Reconstruction#anon$6] == I#[DC_Reconstruction#anon$2];
  assume R#[DC_Reconstruction#anon$2] == C#[DC_Reconstruction#anon$5];
  assume R#[DC_Reconstruction#anon$2] == C#[DC_Reconstruction#anon$6];
  assume (forall idx$: int :: 
    (0 <= idx$) && (idx$ < C#[DC_Reconstruction#anon$5]) ==> (M#[DC_Reconstruction#anon$5][idx$] == M#[DC_Reconstruction#anon$2][idx$])
  );
  assume (forall idx$: int :: 
    (0 <= idx$) && (idx$ < C#[DC_Reconstruction#anon$6]) ==> (M#[DC_Reconstruction#anon$6][idx$] == M#[DC_Reconstruction#anon$2][idx$])
  );
  assume (Mode#[this#] == StartMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) != 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#INTRA) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#INTRA) == 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 3);
  assume (Mode#[this#] == IntraMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 1);
  assume (Mode#[this#] == StartMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) != 0bv12) && (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTRA) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 3) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) == 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) <= 1) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) == 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) <= 1) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) <= 1) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) <= 1) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) <= 1) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume 1 <= (C#[DC_Reconstruction#anon$6] - R#[DC_Reconstruction#anon$6]);
  R#[DC_Reconstruction#anon$6] := R#[DC_Reconstruction#anon$6] + 1;
  assert {:msg "Addressing_simple.cal(63.12): Precondition might not hold for instance at DC_reconstruction.actor(17.5) (#25)"} AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#sub[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) == 0bv12;
  assert {:msg "Addressing_simple.cal(64.12): Precondition might not hold for instance at DC_reconstruction.actor(17.5) (#26)"} AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#sub[DC_Reconstruction#anon$6]], AV#addressing#INTRA) == 0bv12;
  assert {:msg "Action at Addressing_simple.cal(61.2) ('OtherMode') for actor instance 'addressing' might not preserve the channel invariant (#27)"} I#[DC_Reconstruction#anon$5] == I#[DC_Reconstruction#anon$2];
  assert {:msg "Action at Addressing_simple.cal(61.2) ('OtherMode') for actor instance 'addressing' might not preserve the channel invariant (#28)"} I#[DC_Reconstruction#anon$6] == I#[DC_Reconstruction#anon$2];
}
procedure DC_Reconstruction##Algo_DCRinvpred#StartMode#5()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var DC_Reconstruction#broadcast: Actor;
  var DC_Reconstruction#addressing: Actor;
  var DC_Reconstruction#invpred: Actor;
  var DC_Reconstruction#anon$2: Chan (bv12);
  var DC_Reconstruction#anon$3: Chan (bv13);
  var DC_Reconstruction#anon$4: Chan (bv6);
  var DC_Reconstruction#anon$5: Chan (bv12);
  var DC_Reconstruction#anon$6: Chan (bv12);
  var DC_Reconstruction#anon$7: Chan (bv11);
  var DC_Reconstruction#anon$8: Chan (bv11);
  var DC_Reconstruction#anon$9: Chan (bv11);
  var DC_Reconstruction#anon$10: Chan (bv13);
  var DC_Reconstruction#anon$11: Chan (bv11);
  var DC_Reconstruction#anon$12: Chan (bv3);
  var DC_Reconstruction#anon$13: Chan (bv3);
  var DC_Reconstruction#anon$14: Chan (bool);
  var DC_Reconstruction#anon$15: Chan (bv6);
  var AV#addressing#St#: int;
  var AV#addressing#advance: int;
  var AV#addressing#predict: int;
  var AV#addressing#geth: int;
  var AV#addressing#getw: int;
  var AV#addressing#read: int;
  var AV#addressing#NEWVOP: bv12;
  var AV#addressing#INTRA: bv12;
  var AV#addressing#INTER: bv12;
  var AV#addressing#MOTION: bv12;
  var AV#addressing#ACCODED: bv12;
  var AV#addressing#ACPRED: bv12;
  var AV#addressing#mbx: bv8;
  var AV#addressing#top_edge: bool;
  var AV#addressing#left_edge: bool;
  var AV#addressing#comp: bv4;
  var AV#addressing#mbwidth: bv8;
  var AV#addressing#BUF_SIZE: int;
  var AV#addressing#coded: Map (bv11) (bool);
  var AV#addressing#ptr: bv8;
  var AV#addressing#ptr_left: bv8;
  var AV#addressing#ptr_above: bv8;
  var AV#addressing#ptr_above_left: bv8;
  var AV#invpred#St#: int;
  var AV#invpred#sat: int;
  var AV#invpred#geth: int;
  var AV#invpred#advance: int;
  var AV#invpred#intra: int;
  var AV#invpred#inter: int;
  var AV#invpred#getw: int;
  var AV#invpred#read: int;
  var AV#invpred#NEWVOP: bv12;
  var AV#invpred#INTRA: bv12;
  var AV#invpred#INTER: bv12;
  var AV#invpred#MOTION: bv12;
  var AV#invpred#ACCODED: bv12;
  var AV#invpred#ACPRED: bv12;
  var AV#invpred#s_QP: bv6;
  var AV#invpred#round: bv2;
  var AV#invpred#BUF_SIZE: bv32;
  var AV#invpred#ptr: bv32;
  var AV#invpred#comp: bv4;
  var AV#invpred#dc_buf: Map (bv32) (bv13);
  var AV#invpred#dc_pred: bv13;
  var AV#invpred#scaler: bv7;
  var AV#invpred#dc_val: bv13;
  var AV#invpred#is_signed: bool;
  assume (DC_Reconstruction#broadcast != DC_Reconstruction#addressing) && (DC_Reconstruction#broadcast != DC_Reconstruction#invpred) && (DC_Reconstruction#addressing != DC_Reconstruction#invpred);
  assume (DC_Reconstruction#anon$2 != DC_Reconstruction#anon$5) && (DC_Reconstruction#anon$2 != DC_Reconstruction#anon$6) && (DC_Reconstruction#anon$3 != DC_Reconstruction#anon$10) && (DC_Reconstruction#anon$4 != DC_Reconstruction#anon$15) && (DC_Reconstruction#anon$5 != DC_Reconstruction#anon$6) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$8) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$9) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$8 != DC_Reconstruction#anon$9) && (DC_Reconstruction#anon$8 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$9 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$12 != DC_Reconstruction#anon$13);
  assume 0 <= I#[DC_Reconstruction#anon$2];
  assume I#[DC_Reconstruction#anon$2] <= R#[DC_Reconstruction#anon$2];
  assume R#[DC_Reconstruction#anon$2] <= C#[DC_Reconstruction#anon$2];
  assume 0 <= I#[DC_Reconstruction#anon$3];
  assume I#[DC_Reconstruction#anon$3] <= R#[DC_Reconstruction#anon$3];
  assume R#[DC_Reconstruction#anon$3] <= C#[DC_Reconstruction#anon$3];
  assume 0 <= I#[DC_Reconstruction#anon$4];
  assume I#[DC_Reconstruction#anon$4] <= R#[DC_Reconstruction#anon$4];
  assume R#[DC_Reconstruction#anon$4] <= C#[DC_Reconstruction#anon$4];
  assume 0 <= I#[DC_Reconstruction#anon$5];
  assume I#[DC_Reconstruction#anon$5] <= R#[DC_Reconstruction#anon$5];
  assume R#[DC_Reconstruction#anon$5] <= C#[DC_Reconstruction#anon$5];
  assume 0 <= I#[DC_Reconstruction#anon$6];
  assume I#[DC_Reconstruction#anon$6] <= R#[DC_Reconstruction#anon$6];
  assume R#[DC_Reconstruction#anon$6] <= C#[DC_Reconstruction#anon$6];
  assume 0 <= I#[DC_Reconstruction#anon$7];
  assume I#[DC_Reconstruction#anon$7] <= R#[DC_Reconstruction#anon$7];
  assume R#[DC_Reconstruction#anon$7] <= C#[DC_Reconstruction#anon$7];
  assume 0 <= I#[DC_Reconstruction#anon$8];
  assume I#[DC_Reconstruction#anon$8] <= R#[DC_Reconstruction#anon$8];
  assume R#[DC_Reconstruction#anon$8] <= C#[DC_Reconstruction#anon$8];
  assume 0 <= I#[DC_Reconstruction#anon$9];
  assume I#[DC_Reconstruction#anon$9] <= R#[DC_Reconstruction#anon$9];
  assume R#[DC_Reconstruction#anon$9] <= C#[DC_Reconstruction#anon$9];
  assume 0 <= I#[DC_Reconstruction#anon$10];
  assume I#[DC_Reconstruction#anon$10] <= R#[DC_Reconstruction#anon$10];
  assume R#[DC_Reconstruction#anon$10] <= C#[DC_Reconstruction#anon$10];
  assume I#[DC_Reconstruction#anon$10] == R#[DC_Reconstruction#anon$10];
  assume 0 <= I#[DC_Reconstruction#anon$11];
  assume I#[DC_Reconstruction#anon$11] <= R#[DC_Reconstruction#anon$11];
  assume R#[DC_Reconstruction#anon$11] <= C#[DC_Reconstruction#anon$11];
  assume I#[DC_Reconstruction#anon$11] == R#[DC_Reconstruction#anon$11];
  assume 0 <= I#[DC_Reconstruction#anon$12];
  assume I#[DC_Reconstruction#anon$12] <= R#[DC_Reconstruction#anon$12];
  assume R#[DC_Reconstruction#anon$12] <= C#[DC_Reconstruction#anon$12];
  assume I#[DC_Reconstruction#anon$12] == R#[DC_Reconstruction#anon$12];
  assume 0 <= I#[DC_Reconstruction#anon$13];
  assume I#[DC_Reconstruction#anon$13] <= R#[DC_Reconstruction#anon$13];
  assume R#[DC_Reconstruction#anon$13] <= C#[DC_Reconstruction#anon$13];
  assume I#[DC_Reconstruction#anon$13] == R#[DC_Reconstruction#anon$13];
  assume 0 <= I#[DC_Reconstruction#anon$14];
  assume I#[DC_Reconstruction#anon$14] <= R#[DC_Reconstruction#anon$14];
  assume R#[DC_Reconstruction#anon$14] <= C#[DC_Reconstruction#anon$14];
  assume I#[DC_Reconstruction#anon$14] == R#[DC_Reconstruction#anon$14];
  assume 0 <= I#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$15] <= R#[DC_Reconstruction#anon$15];
  assume R#[DC_Reconstruction#anon$15] <= C#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$15] == R#[DC_Reconstruction#anon$15];
  assume true;
  I#sub[DC_Reconstruction#anon$5] := R#[DC_Reconstruction#anon$5];
  I#sub[DC_Reconstruction#anon$7] := R#[DC_Reconstruction#anon$7];
  I#sub[DC_Reconstruction#anon$8] := R#[DC_Reconstruction#anon$8];
  I#sub[DC_Reconstruction#anon$9] := R#[DC_Reconstruction#anon$9];
  I#sub[DC_Reconstruction#anon$3] := R#[DC_Reconstruction#anon$3];
  I#sub[DC_Reconstruction#anon$4] := R#[DC_Reconstruction#anon$4];
  I#sub[DC_Reconstruction#anon$10] := C#[DC_Reconstruction#anon$10];
  I#sub[DC_Reconstruction#anon$11] := C#[DC_Reconstruction#anon$11];
  I#sub[DC_Reconstruction#anon$12] := C#[DC_Reconstruction#anon$12];
  I#sub[DC_Reconstruction#anon$13] := C#[DC_Reconstruction#anon$13];
  I#sub[DC_Reconstruction#anon$14] := C#[DC_Reconstruction#anon$14];
  I#sub[DC_Reconstruction#anon$15] := C#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$5] == I#[DC_Reconstruction#anon$2];
  assume I#[DC_Reconstruction#anon$6] == I#[DC_Reconstruction#anon$2];
  assume R#[DC_Reconstruction#anon$2] == C#[DC_Reconstruction#anon$5];
  assume R#[DC_Reconstruction#anon$2] == C#[DC_Reconstruction#anon$6];
  assume (forall idx$: int :: 
    (0 <= idx$) && (idx$ < C#[DC_Reconstruction#anon$5]) ==> (M#[DC_Reconstruction#anon$5][idx$] == M#[DC_Reconstruction#anon$2][idx$])
  );
  assume (forall idx$: int :: 
    (0 <= idx$) && (idx$ < C#[DC_Reconstruction#anon$6]) ==> (M#[DC_Reconstruction#anon$6][idx$] == M#[DC_Reconstruction#anon$2][idx$])
  );
  assume (Mode#[this#] == StartMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) != 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#INTRA) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#INTRA) == 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 3);
  assume (Mode#[this#] == IntraMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 1);
  assume (Mode#[this#] == StartMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) != 0bv12) && (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTRA) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 3) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) == 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) <= 1) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) == 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) <= 1) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) <= 1) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) <= 1) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) <= 1) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume 3 <= (C#[DC_Reconstruction#anon$5] - R#[DC_Reconstruction#anon$5]);
  R#[DC_Reconstruction#anon$5] := R#[DC_Reconstruction#anon$5] + 3;
  assert {:msg "Algo_DCRinvpred.cal(30.12): Precondition might not hold for instance at DC_reconstruction.actor(18.5) (#29)"} AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#sub[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) != 0bv12;
  C#[DC_Reconstruction#anon$12] := C#[DC_Reconstruction#anon$12] + 1;
  assert {:msg "Action at Algo_DCRinvpred.cal(24.2) ('StartMode') for actor instance 'invpred' might not preserve the channel invariant (#30)"} I#[DC_Reconstruction#anon$5] == I#[DC_Reconstruction#anon$2];
  assert {:msg "Action at Algo_DCRinvpred.cal(24.2) ('StartMode') for actor instance 'invpred' might not preserve the channel invariant (#31)"} I#[DC_Reconstruction#anon$6] == I#[DC_Reconstruction#anon$2];
}
procedure DC_Reconstruction##Algo_DCRinvpred#InterMode#6()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var DC_Reconstruction#broadcast: Actor;
  var DC_Reconstruction#addressing: Actor;
  var DC_Reconstruction#invpred: Actor;
  var DC_Reconstruction#anon$2: Chan (bv12);
  var DC_Reconstruction#anon$3: Chan (bv13);
  var DC_Reconstruction#anon$4: Chan (bv6);
  var DC_Reconstruction#anon$5: Chan (bv12);
  var DC_Reconstruction#anon$6: Chan (bv12);
  var DC_Reconstruction#anon$7: Chan (bv11);
  var DC_Reconstruction#anon$8: Chan (bv11);
  var DC_Reconstruction#anon$9: Chan (bv11);
  var DC_Reconstruction#anon$10: Chan (bv13);
  var DC_Reconstruction#anon$11: Chan (bv11);
  var DC_Reconstruction#anon$12: Chan (bv3);
  var DC_Reconstruction#anon$13: Chan (bv3);
  var DC_Reconstruction#anon$14: Chan (bool);
  var DC_Reconstruction#anon$15: Chan (bv6);
  var AV#addressing#St#: int;
  var AV#addressing#advance: int;
  var AV#addressing#predict: int;
  var AV#addressing#geth: int;
  var AV#addressing#getw: int;
  var AV#addressing#read: int;
  var AV#addressing#NEWVOP: bv12;
  var AV#addressing#INTRA: bv12;
  var AV#addressing#INTER: bv12;
  var AV#addressing#MOTION: bv12;
  var AV#addressing#ACCODED: bv12;
  var AV#addressing#ACPRED: bv12;
  var AV#addressing#mbx: bv8;
  var AV#addressing#top_edge: bool;
  var AV#addressing#left_edge: bool;
  var AV#addressing#comp: bv4;
  var AV#addressing#mbwidth: bv8;
  var AV#addressing#BUF_SIZE: int;
  var AV#addressing#coded: Map (bv11) (bool);
  var AV#addressing#ptr: bv8;
  var AV#addressing#ptr_left: bv8;
  var AV#addressing#ptr_above: bv8;
  var AV#addressing#ptr_above_left: bv8;
  var AV#invpred#St#: int;
  var AV#invpred#sat: int;
  var AV#invpred#geth: int;
  var AV#invpred#advance: int;
  var AV#invpred#intra: int;
  var AV#invpred#inter: int;
  var AV#invpred#getw: int;
  var AV#invpred#read: int;
  var AV#invpred#NEWVOP: bv12;
  var AV#invpred#INTRA: bv12;
  var AV#invpred#INTER: bv12;
  var AV#invpred#MOTION: bv12;
  var AV#invpred#ACCODED: bv12;
  var AV#invpred#ACPRED: bv12;
  var AV#invpred#s_QP: bv6;
  var AV#invpred#round: bv2;
  var AV#invpred#BUF_SIZE: bv32;
  var AV#invpred#ptr: bv32;
  var AV#invpred#comp: bv4;
  var AV#invpred#dc_buf: Map (bv32) (bv13);
  var AV#invpred#dc_pred: bv13;
  var AV#invpred#scaler: bv7;
  var AV#invpred#dc_val: bv13;
  var AV#invpred#is_signed: bool;
  assume (DC_Reconstruction#broadcast != DC_Reconstruction#addressing) && (DC_Reconstruction#broadcast != DC_Reconstruction#invpred) && (DC_Reconstruction#addressing != DC_Reconstruction#invpred);
  assume (DC_Reconstruction#anon$2 != DC_Reconstruction#anon$5) && (DC_Reconstruction#anon$2 != DC_Reconstruction#anon$6) && (DC_Reconstruction#anon$3 != DC_Reconstruction#anon$10) && (DC_Reconstruction#anon$4 != DC_Reconstruction#anon$15) && (DC_Reconstruction#anon$5 != DC_Reconstruction#anon$6) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$8) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$9) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$8 != DC_Reconstruction#anon$9) && (DC_Reconstruction#anon$8 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$9 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$12 != DC_Reconstruction#anon$13);
  assume 0 <= I#[DC_Reconstruction#anon$2];
  assume I#[DC_Reconstruction#anon$2] <= R#[DC_Reconstruction#anon$2];
  assume R#[DC_Reconstruction#anon$2] <= C#[DC_Reconstruction#anon$2];
  assume 0 <= I#[DC_Reconstruction#anon$3];
  assume I#[DC_Reconstruction#anon$3] <= R#[DC_Reconstruction#anon$3];
  assume R#[DC_Reconstruction#anon$3] <= C#[DC_Reconstruction#anon$3];
  assume 0 <= I#[DC_Reconstruction#anon$4];
  assume I#[DC_Reconstruction#anon$4] <= R#[DC_Reconstruction#anon$4];
  assume R#[DC_Reconstruction#anon$4] <= C#[DC_Reconstruction#anon$4];
  assume 0 <= I#[DC_Reconstruction#anon$5];
  assume I#[DC_Reconstruction#anon$5] <= R#[DC_Reconstruction#anon$5];
  assume R#[DC_Reconstruction#anon$5] <= C#[DC_Reconstruction#anon$5];
  assume 0 <= I#[DC_Reconstruction#anon$6];
  assume I#[DC_Reconstruction#anon$6] <= R#[DC_Reconstruction#anon$6];
  assume R#[DC_Reconstruction#anon$6] <= C#[DC_Reconstruction#anon$6];
  assume 0 <= I#[DC_Reconstruction#anon$7];
  assume I#[DC_Reconstruction#anon$7] <= R#[DC_Reconstruction#anon$7];
  assume R#[DC_Reconstruction#anon$7] <= C#[DC_Reconstruction#anon$7];
  assume 0 <= I#[DC_Reconstruction#anon$8];
  assume I#[DC_Reconstruction#anon$8] <= R#[DC_Reconstruction#anon$8];
  assume R#[DC_Reconstruction#anon$8] <= C#[DC_Reconstruction#anon$8];
  assume 0 <= I#[DC_Reconstruction#anon$9];
  assume I#[DC_Reconstruction#anon$9] <= R#[DC_Reconstruction#anon$9];
  assume R#[DC_Reconstruction#anon$9] <= C#[DC_Reconstruction#anon$9];
  assume 0 <= I#[DC_Reconstruction#anon$10];
  assume I#[DC_Reconstruction#anon$10] <= R#[DC_Reconstruction#anon$10];
  assume R#[DC_Reconstruction#anon$10] <= C#[DC_Reconstruction#anon$10];
  assume I#[DC_Reconstruction#anon$10] == R#[DC_Reconstruction#anon$10];
  assume 0 <= I#[DC_Reconstruction#anon$11];
  assume I#[DC_Reconstruction#anon$11] <= R#[DC_Reconstruction#anon$11];
  assume R#[DC_Reconstruction#anon$11] <= C#[DC_Reconstruction#anon$11];
  assume I#[DC_Reconstruction#anon$11] == R#[DC_Reconstruction#anon$11];
  assume 0 <= I#[DC_Reconstruction#anon$12];
  assume I#[DC_Reconstruction#anon$12] <= R#[DC_Reconstruction#anon$12];
  assume R#[DC_Reconstruction#anon$12] <= C#[DC_Reconstruction#anon$12];
  assume I#[DC_Reconstruction#anon$12] == R#[DC_Reconstruction#anon$12];
  assume 0 <= I#[DC_Reconstruction#anon$13];
  assume I#[DC_Reconstruction#anon$13] <= R#[DC_Reconstruction#anon$13];
  assume R#[DC_Reconstruction#anon$13] <= C#[DC_Reconstruction#anon$13];
  assume I#[DC_Reconstruction#anon$13] == R#[DC_Reconstruction#anon$13];
  assume 0 <= I#[DC_Reconstruction#anon$14];
  assume I#[DC_Reconstruction#anon$14] <= R#[DC_Reconstruction#anon$14];
  assume R#[DC_Reconstruction#anon$14] <= C#[DC_Reconstruction#anon$14];
  assume I#[DC_Reconstruction#anon$14] == R#[DC_Reconstruction#anon$14];
  assume 0 <= I#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$15] <= R#[DC_Reconstruction#anon$15];
  assume R#[DC_Reconstruction#anon$15] <= C#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$15] == R#[DC_Reconstruction#anon$15];
  assume true;
  I#sub[DC_Reconstruction#anon$5] := R#[DC_Reconstruction#anon$5];
  I#sub[DC_Reconstruction#anon$7] := R#[DC_Reconstruction#anon$7];
  I#sub[DC_Reconstruction#anon$8] := R#[DC_Reconstruction#anon$8];
  I#sub[DC_Reconstruction#anon$9] := R#[DC_Reconstruction#anon$9];
  I#sub[DC_Reconstruction#anon$3] := R#[DC_Reconstruction#anon$3];
  I#sub[DC_Reconstruction#anon$4] := R#[DC_Reconstruction#anon$4];
  I#sub[DC_Reconstruction#anon$10] := C#[DC_Reconstruction#anon$10];
  I#sub[DC_Reconstruction#anon$11] := C#[DC_Reconstruction#anon$11];
  I#sub[DC_Reconstruction#anon$12] := C#[DC_Reconstruction#anon$12];
  I#sub[DC_Reconstruction#anon$13] := C#[DC_Reconstruction#anon$13];
  I#sub[DC_Reconstruction#anon$14] := C#[DC_Reconstruction#anon$14];
  I#sub[DC_Reconstruction#anon$15] := C#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$5] == I#[DC_Reconstruction#anon$2];
  assume I#[DC_Reconstruction#anon$6] == I#[DC_Reconstruction#anon$2];
  assume R#[DC_Reconstruction#anon$2] == C#[DC_Reconstruction#anon$5];
  assume R#[DC_Reconstruction#anon$2] == C#[DC_Reconstruction#anon$6];
  assume (forall idx$: int :: 
    (0 <= idx$) && (idx$ < C#[DC_Reconstruction#anon$5]) ==> (M#[DC_Reconstruction#anon$5][idx$] == M#[DC_Reconstruction#anon$2][idx$])
  );
  assume (forall idx$: int :: 
    (0 <= idx$) && (idx$ < C#[DC_Reconstruction#anon$6]) ==> (M#[DC_Reconstruction#anon$6][idx$] == M#[DC_Reconstruction#anon$2][idx$])
  );
  assume (Mode#[this#] == StartMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) != 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#INTRA) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#INTRA) == 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 3);
  assume (Mode#[this#] == IntraMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 1);
  assume (Mode#[this#] == StartMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) != 0bv12) && (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTRA) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 3) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) == 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) <= 1) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) == 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) <= 1) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) <= 1) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) <= 1) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) <= 1) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (1 <= (C#[DC_Reconstruction#anon$5] - R#[DC_Reconstruction#anon$5])) && (1 <= (C#[DC_Reconstruction#anon$4] - R#[DC_Reconstruction#anon$4])) && (1 <= (C#[DC_Reconstruction#anon$3] - R#[DC_Reconstruction#anon$3]));
  R#[DC_Reconstruction#anon$5] := R#[DC_Reconstruction#anon$5] + 1;
  R#[DC_Reconstruction#anon$4] := R#[DC_Reconstruction#anon$4] + 1;
  R#[DC_Reconstruction#anon$3] := R#[DC_Reconstruction#anon$3] + 1;
  assert {:msg "Algo_DCRinvpred.cal(47.12): Precondition might not hold for instance at DC_reconstruction.actor(18.5) (#32)"} AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#sub[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12;
  assert {:msg "Algo_DCRinvpred.cal(48.12): Precondition might not hold for instance at DC_reconstruction.actor(18.5) (#33)"} (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#sub[DC_Reconstruction#anon$5]], AV#invpred#INTER) != 0bv12) && (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#sub[DC_Reconstruction#anon$5]], AV#invpred#ACCODED) != 0bv12);
  C#[DC_Reconstruction#anon$10] := C#[DC_Reconstruction#anon$10] + 1;
  C#[DC_Reconstruction#anon$11] := C#[DC_Reconstruction#anon$11] + 1;
  C#[DC_Reconstruction#anon$12] := C#[DC_Reconstruction#anon$12] + 1;
  C#[DC_Reconstruction#anon$13] := C#[DC_Reconstruction#anon$13] + 1;
  C#[DC_Reconstruction#anon$14] := C#[DC_Reconstruction#anon$14] + 1;
  C#[DC_Reconstruction#anon$15] := C#[DC_Reconstruction#anon$15] + 1;
  assert {:msg "Action at Algo_DCRinvpred.cal(34.2) ('InterMode') for actor instance 'invpred' might not preserve the channel invariant (#34)"} I#[DC_Reconstruction#anon$5] == I#[DC_Reconstruction#anon$2];
  assert {:msg "Action at Algo_DCRinvpred.cal(34.2) ('InterMode') for actor instance 'invpred' might not preserve the channel invariant (#35)"} I#[DC_Reconstruction#anon$6] == I#[DC_Reconstruction#anon$2];
}
procedure DC_Reconstruction##Algo_DCRinvpred#OtherMode#7()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var DC_Reconstruction#broadcast: Actor;
  var DC_Reconstruction#addressing: Actor;
  var DC_Reconstruction#invpred: Actor;
  var DC_Reconstruction#anon$2: Chan (bv12);
  var DC_Reconstruction#anon$3: Chan (bv13);
  var DC_Reconstruction#anon$4: Chan (bv6);
  var DC_Reconstruction#anon$5: Chan (bv12);
  var DC_Reconstruction#anon$6: Chan (bv12);
  var DC_Reconstruction#anon$7: Chan (bv11);
  var DC_Reconstruction#anon$8: Chan (bv11);
  var DC_Reconstruction#anon$9: Chan (bv11);
  var DC_Reconstruction#anon$10: Chan (bv13);
  var DC_Reconstruction#anon$11: Chan (bv11);
  var DC_Reconstruction#anon$12: Chan (bv3);
  var DC_Reconstruction#anon$13: Chan (bv3);
  var DC_Reconstruction#anon$14: Chan (bool);
  var DC_Reconstruction#anon$15: Chan (bv6);
  var AV#addressing#St#: int;
  var AV#addressing#advance: int;
  var AV#addressing#predict: int;
  var AV#addressing#geth: int;
  var AV#addressing#getw: int;
  var AV#addressing#read: int;
  var AV#addressing#NEWVOP: bv12;
  var AV#addressing#INTRA: bv12;
  var AV#addressing#INTER: bv12;
  var AV#addressing#MOTION: bv12;
  var AV#addressing#ACCODED: bv12;
  var AV#addressing#ACPRED: bv12;
  var AV#addressing#mbx: bv8;
  var AV#addressing#top_edge: bool;
  var AV#addressing#left_edge: bool;
  var AV#addressing#comp: bv4;
  var AV#addressing#mbwidth: bv8;
  var AV#addressing#BUF_SIZE: int;
  var AV#addressing#coded: Map (bv11) (bool);
  var AV#addressing#ptr: bv8;
  var AV#addressing#ptr_left: bv8;
  var AV#addressing#ptr_above: bv8;
  var AV#addressing#ptr_above_left: bv8;
  var AV#invpred#St#: int;
  var AV#invpred#sat: int;
  var AV#invpred#geth: int;
  var AV#invpred#advance: int;
  var AV#invpred#intra: int;
  var AV#invpred#inter: int;
  var AV#invpred#getw: int;
  var AV#invpred#read: int;
  var AV#invpred#NEWVOP: bv12;
  var AV#invpred#INTRA: bv12;
  var AV#invpred#INTER: bv12;
  var AV#invpred#MOTION: bv12;
  var AV#invpred#ACCODED: bv12;
  var AV#invpred#ACPRED: bv12;
  var AV#invpred#s_QP: bv6;
  var AV#invpred#round: bv2;
  var AV#invpred#BUF_SIZE: bv32;
  var AV#invpred#ptr: bv32;
  var AV#invpred#comp: bv4;
  var AV#invpred#dc_buf: Map (bv32) (bv13);
  var AV#invpred#dc_pred: bv13;
  var AV#invpred#scaler: bv7;
  var AV#invpred#dc_val: bv13;
  var AV#invpred#is_signed: bool;
  assume (DC_Reconstruction#broadcast != DC_Reconstruction#addressing) && (DC_Reconstruction#broadcast != DC_Reconstruction#invpred) && (DC_Reconstruction#addressing != DC_Reconstruction#invpred);
  assume (DC_Reconstruction#anon$2 != DC_Reconstruction#anon$5) && (DC_Reconstruction#anon$2 != DC_Reconstruction#anon$6) && (DC_Reconstruction#anon$3 != DC_Reconstruction#anon$10) && (DC_Reconstruction#anon$4 != DC_Reconstruction#anon$15) && (DC_Reconstruction#anon$5 != DC_Reconstruction#anon$6) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$8) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$9) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$8 != DC_Reconstruction#anon$9) && (DC_Reconstruction#anon$8 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$9 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$12 != DC_Reconstruction#anon$13);
  assume 0 <= I#[DC_Reconstruction#anon$2];
  assume I#[DC_Reconstruction#anon$2] <= R#[DC_Reconstruction#anon$2];
  assume R#[DC_Reconstruction#anon$2] <= C#[DC_Reconstruction#anon$2];
  assume 0 <= I#[DC_Reconstruction#anon$3];
  assume I#[DC_Reconstruction#anon$3] <= R#[DC_Reconstruction#anon$3];
  assume R#[DC_Reconstruction#anon$3] <= C#[DC_Reconstruction#anon$3];
  assume 0 <= I#[DC_Reconstruction#anon$4];
  assume I#[DC_Reconstruction#anon$4] <= R#[DC_Reconstruction#anon$4];
  assume R#[DC_Reconstruction#anon$4] <= C#[DC_Reconstruction#anon$4];
  assume 0 <= I#[DC_Reconstruction#anon$5];
  assume I#[DC_Reconstruction#anon$5] <= R#[DC_Reconstruction#anon$5];
  assume R#[DC_Reconstruction#anon$5] <= C#[DC_Reconstruction#anon$5];
  assume 0 <= I#[DC_Reconstruction#anon$6];
  assume I#[DC_Reconstruction#anon$6] <= R#[DC_Reconstruction#anon$6];
  assume R#[DC_Reconstruction#anon$6] <= C#[DC_Reconstruction#anon$6];
  assume 0 <= I#[DC_Reconstruction#anon$7];
  assume I#[DC_Reconstruction#anon$7] <= R#[DC_Reconstruction#anon$7];
  assume R#[DC_Reconstruction#anon$7] <= C#[DC_Reconstruction#anon$7];
  assume 0 <= I#[DC_Reconstruction#anon$8];
  assume I#[DC_Reconstruction#anon$8] <= R#[DC_Reconstruction#anon$8];
  assume R#[DC_Reconstruction#anon$8] <= C#[DC_Reconstruction#anon$8];
  assume 0 <= I#[DC_Reconstruction#anon$9];
  assume I#[DC_Reconstruction#anon$9] <= R#[DC_Reconstruction#anon$9];
  assume R#[DC_Reconstruction#anon$9] <= C#[DC_Reconstruction#anon$9];
  assume 0 <= I#[DC_Reconstruction#anon$10];
  assume I#[DC_Reconstruction#anon$10] <= R#[DC_Reconstruction#anon$10];
  assume R#[DC_Reconstruction#anon$10] <= C#[DC_Reconstruction#anon$10];
  assume I#[DC_Reconstruction#anon$10] == R#[DC_Reconstruction#anon$10];
  assume 0 <= I#[DC_Reconstruction#anon$11];
  assume I#[DC_Reconstruction#anon$11] <= R#[DC_Reconstruction#anon$11];
  assume R#[DC_Reconstruction#anon$11] <= C#[DC_Reconstruction#anon$11];
  assume I#[DC_Reconstruction#anon$11] == R#[DC_Reconstruction#anon$11];
  assume 0 <= I#[DC_Reconstruction#anon$12];
  assume I#[DC_Reconstruction#anon$12] <= R#[DC_Reconstruction#anon$12];
  assume R#[DC_Reconstruction#anon$12] <= C#[DC_Reconstruction#anon$12];
  assume I#[DC_Reconstruction#anon$12] == R#[DC_Reconstruction#anon$12];
  assume 0 <= I#[DC_Reconstruction#anon$13];
  assume I#[DC_Reconstruction#anon$13] <= R#[DC_Reconstruction#anon$13];
  assume R#[DC_Reconstruction#anon$13] <= C#[DC_Reconstruction#anon$13];
  assume I#[DC_Reconstruction#anon$13] == R#[DC_Reconstruction#anon$13];
  assume 0 <= I#[DC_Reconstruction#anon$14];
  assume I#[DC_Reconstruction#anon$14] <= R#[DC_Reconstruction#anon$14];
  assume R#[DC_Reconstruction#anon$14] <= C#[DC_Reconstruction#anon$14];
  assume I#[DC_Reconstruction#anon$14] == R#[DC_Reconstruction#anon$14];
  assume 0 <= I#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$15] <= R#[DC_Reconstruction#anon$15];
  assume R#[DC_Reconstruction#anon$15] <= C#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$15] == R#[DC_Reconstruction#anon$15];
  assume true;
  I#sub[DC_Reconstruction#anon$5] := R#[DC_Reconstruction#anon$5];
  I#sub[DC_Reconstruction#anon$7] := R#[DC_Reconstruction#anon$7];
  I#sub[DC_Reconstruction#anon$8] := R#[DC_Reconstruction#anon$8];
  I#sub[DC_Reconstruction#anon$9] := R#[DC_Reconstruction#anon$9];
  I#sub[DC_Reconstruction#anon$3] := R#[DC_Reconstruction#anon$3];
  I#sub[DC_Reconstruction#anon$4] := R#[DC_Reconstruction#anon$4];
  I#sub[DC_Reconstruction#anon$10] := C#[DC_Reconstruction#anon$10];
  I#sub[DC_Reconstruction#anon$11] := C#[DC_Reconstruction#anon$11];
  I#sub[DC_Reconstruction#anon$12] := C#[DC_Reconstruction#anon$12];
  I#sub[DC_Reconstruction#anon$13] := C#[DC_Reconstruction#anon$13];
  I#sub[DC_Reconstruction#anon$14] := C#[DC_Reconstruction#anon$14];
  I#sub[DC_Reconstruction#anon$15] := C#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$5] == I#[DC_Reconstruction#anon$2];
  assume I#[DC_Reconstruction#anon$6] == I#[DC_Reconstruction#anon$2];
  assume R#[DC_Reconstruction#anon$2] == C#[DC_Reconstruction#anon$5];
  assume R#[DC_Reconstruction#anon$2] == C#[DC_Reconstruction#anon$6];
  assume (forall idx$: int :: 
    (0 <= idx$) && (idx$ < C#[DC_Reconstruction#anon$5]) ==> (M#[DC_Reconstruction#anon$5][idx$] == M#[DC_Reconstruction#anon$2][idx$])
  );
  assume (forall idx$: int :: 
    (0 <= idx$) && (idx$ < C#[DC_Reconstruction#anon$6]) ==> (M#[DC_Reconstruction#anon$6][idx$] == M#[DC_Reconstruction#anon$2][idx$])
  );
  assume (Mode#[this#] == StartMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) != 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#INTRA) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#INTRA) == 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 3);
  assume (Mode#[this#] == IntraMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 1);
  assume (Mode#[this#] == StartMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) != 0bv12) && (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTRA) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 3) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) == 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) <= 1) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) == 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) <= 1) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) <= 1) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) <= 1) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) <= 1) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (1 <= (C#[DC_Reconstruction#anon$5] - R#[DC_Reconstruction#anon$5])) && (1 <= (C#[DC_Reconstruction#anon$4] - R#[DC_Reconstruction#anon$4]));
  R#[DC_Reconstruction#anon$5] := R#[DC_Reconstruction#anon$5] + 1;
  R#[DC_Reconstruction#anon$4] := R#[DC_Reconstruction#anon$4] + 1;
  assert {:msg "Algo_DCRinvpred.cal(58.12): Precondition might not hold for instance at DC_reconstruction.actor(18.5) (#36)"} AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#sub[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12;
  assert {:msg "Algo_DCRinvpred.cal(59.12): Precondition might not hold for instance at DC_reconstruction.actor(18.5) (#37)"} AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#sub[DC_Reconstruction#anon$5]], AV#invpred#INTER) == 0bv12;
  assert {:msg "Algo_DCRinvpred.cal(60.12): Precondition might not hold for instance at DC_reconstruction.actor(18.5) (#38)"} AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#sub[DC_Reconstruction#anon$5]], AV#invpred#INTRA) == 0bv12;
  assert {:msg "Algo_DCRinvpred.cal(61.12): Precondition might not hold for instance at DC_reconstruction.actor(18.5) (#39)"} AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#sub[DC_Reconstruction#anon$5]], AV#invpred#ACCODED) == 0bv12;
  C#[DC_Reconstruction#anon$12] := C#[DC_Reconstruction#anon$12] + 1;
  assert {:msg "Action at Algo_DCRinvpred.cal(51.2) ('OtherMode') for actor instance 'invpred' might not preserve the channel invariant (#40)"} I#[DC_Reconstruction#anon$5] == I#[DC_Reconstruction#anon$2];
  assert {:msg "Action at Algo_DCRinvpred.cal(51.2) ('OtherMode') for actor instance 'invpred' might not preserve the channel invariant (#41)"} I#[DC_Reconstruction#anon$6] == I#[DC_Reconstruction#anon$2];
}
procedure DC_Reconstruction##Algo_DCRinvpred#IntraMode#8()
  modifies C#, R#, M#, I#, H#, I#sub;
{
  var DC_Reconstruction#broadcast: Actor;
  var DC_Reconstruction#addressing: Actor;
  var DC_Reconstruction#invpred: Actor;
  var DC_Reconstruction#anon$2: Chan (bv12);
  var DC_Reconstruction#anon$3: Chan (bv13);
  var DC_Reconstruction#anon$4: Chan (bv6);
  var DC_Reconstruction#anon$5: Chan (bv12);
  var DC_Reconstruction#anon$6: Chan (bv12);
  var DC_Reconstruction#anon$7: Chan (bv11);
  var DC_Reconstruction#anon$8: Chan (bv11);
  var DC_Reconstruction#anon$9: Chan (bv11);
  var DC_Reconstruction#anon$10: Chan (bv13);
  var DC_Reconstruction#anon$11: Chan (bv11);
  var DC_Reconstruction#anon$12: Chan (bv3);
  var DC_Reconstruction#anon$13: Chan (bv3);
  var DC_Reconstruction#anon$14: Chan (bool);
  var DC_Reconstruction#anon$15: Chan (bv6);
  var AV#addressing#St#: int;
  var AV#addressing#advance: int;
  var AV#addressing#predict: int;
  var AV#addressing#geth: int;
  var AV#addressing#getw: int;
  var AV#addressing#read: int;
  var AV#addressing#NEWVOP: bv12;
  var AV#addressing#INTRA: bv12;
  var AV#addressing#INTER: bv12;
  var AV#addressing#MOTION: bv12;
  var AV#addressing#ACCODED: bv12;
  var AV#addressing#ACPRED: bv12;
  var AV#addressing#mbx: bv8;
  var AV#addressing#top_edge: bool;
  var AV#addressing#left_edge: bool;
  var AV#addressing#comp: bv4;
  var AV#addressing#mbwidth: bv8;
  var AV#addressing#BUF_SIZE: int;
  var AV#addressing#coded: Map (bv11) (bool);
  var AV#addressing#ptr: bv8;
  var AV#addressing#ptr_left: bv8;
  var AV#addressing#ptr_above: bv8;
  var AV#addressing#ptr_above_left: bv8;
  var AV#invpred#St#: int;
  var AV#invpred#sat: int;
  var AV#invpred#geth: int;
  var AV#invpred#advance: int;
  var AV#invpred#intra: int;
  var AV#invpred#inter: int;
  var AV#invpred#getw: int;
  var AV#invpred#read: int;
  var AV#invpred#NEWVOP: bv12;
  var AV#invpred#INTRA: bv12;
  var AV#invpred#INTER: bv12;
  var AV#invpred#MOTION: bv12;
  var AV#invpred#ACCODED: bv12;
  var AV#invpred#ACPRED: bv12;
  var AV#invpred#s_QP: bv6;
  var AV#invpred#round: bv2;
  var AV#invpred#BUF_SIZE: bv32;
  var AV#invpred#ptr: bv32;
  var AV#invpred#comp: bv4;
  var AV#invpred#dc_buf: Map (bv32) (bv13);
  var AV#invpred#dc_pred: bv13;
  var AV#invpred#scaler: bv7;
  var AV#invpred#dc_val: bv13;
  var AV#invpred#is_signed: bool;
  assume (DC_Reconstruction#broadcast != DC_Reconstruction#addressing) && (DC_Reconstruction#broadcast != DC_Reconstruction#invpred) && (DC_Reconstruction#addressing != DC_Reconstruction#invpred);
  assume (DC_Reconstruction#anon$2 != DC_Reconstruction#anon$5) && (DC_Reconstruction#anon$2 != DC_Reconstruction#anon$6) && (DC_Reconstruction#anon$3 != DC_Reconstruction#anon$10) && (DC_Reconstruction#anon$4 != DC_Reconstruction#anon$15) && (DC_Reconstruction#anon$5 != DC_Reconstruction#anon$6) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$8) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$9) && (DC_Reconstruction#anon$7 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$8 != DC_Reconstruction#anon$9) && (DC_Reconstruction#anon$8 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$9 != DC_Reconstruction#anon$11) && (DC_Reconstruction#anon$12 != DC_Reconstruction#anon$13);
  assume 0 <= I#[DC_Reconstruction#anon$2];
  assume I#[DC_Reconstruction#anon$2] <= R#[DC_Reconstruction#anon$2];
  assume R#[DC_Reconstruction#anon$2] <= C#[DC_Reconstruction#anon$2];
  assume 0 <= I#[DC_Reconstruction#anon$3];
  assume I#[DC_Reconstruction#anon$3] <= R#[DC_Reconstruction#anon$3];
  assume R#[DC_Reconstruction#anon$3] <= C#[DC_Reconstruction#anon$3];
  assume 0 <= I#[DC_Reconstruction#anon$4];
  assume I#[DC_Reconstruction#anon$4] <= R#[DC_Reconstruction#anon$4];
  assume R#[DC_Reconstruction#anon$4] <= C#[DC_Reconstruction#anon$4];
  assume 0 <= I#[DC_Reconstruction#anon$5];
  assume I#[DC_Reconstruction#anon$5] <= R#[DC_Reconstruction#anon$5];
  assume R#[DC_Reconstruction#anon$5] <= C#[DC_Reconstruction#anon$5];
  assume 0 <= I#[DC_Reconstruction#anon$6];
  assume I#[DC_Reconstruction#anon$6] <= R#[DC_Reconstruction#anon$6];
  assume R#[DC_Reconstruction#anon$6] <= C#[DC_Reconstruction#anon$6];
  assume 0 <= I#[DC_Reconstruction#anon$7];
  assume I#[DC_Reconstruction#anon$7] <= R#[DC_Reconstruction#anon$7];
  assume R#[DC_Reconstruction#anon$7] <= C#[DC_Reconstruction#anon$7];
  assume 0 <= I#[DC_Reconstruction#anon$8];
  assume I#[DC_Reconstruction#anon$8] <= R#[DC_Reconstruction#anon$8];
  assume R#[DC_Reconstruction#anon$8] <= C#[DC_Reconstruction#anon$8];
  assume 0 <= I#[DC_Reconstruction#anon$9];
  assume I#[DC_Reconstruction#anon$9] <= R#[DC_Reconstruction#anon$9];
  assume R#[DC_Reconstruction#anon$9] <= C#[DC_Reconstruction#anon$9];
  assume 0 <= I#[DC_Reconstruction#anon$10];
  assume I#[DC_Reconstruction#anon$10] <= R#[DC_Reconstruction#anon$10];
  assume R#[DC_Reconstruction#anon$10] <= C#[DC_Reconstruction#anon$10];
  assume I#[DC_Reconstruction#anon$10] == R#[DC_Reconstruction#anon$10];
  assume 0 <= I#[DC_Reconstruction#anon$11];
  assume I#[DC_Reconstruction#anon$11] <= R#[DC_Reconstruction#anon$11];
  assume R#[DC_Reconstruction#anon$11] <= C#[DC_Reconstruction#anon$11];
  assume I#[DC_Reconstruction#anon$11] == R#[DC_Reconstruction#anon$11];
  assume 0 <= I#[DC_Reconstruction#anon$12];
  assume I#[DC_Reconstruction#anon$12] <= R#[DC_Reconstruction#anon$12];
  assume R#[DC_Reconstruction#anon$12] <= C#[DC_Reconstruction#anon$12];
  assume I#[DC_Reconstruction#anon$12] == R#[DC_Reconstruction#anon$12];
  assume 0 <= I#[DC_Reconstruction#anon$13];
  assume I#[DC_Reconstruction#anon$13] <= R#[DC_Reconstruction#anon$13];
  assume R#[DC_Reconstruction#anon$13] <= C#[DC_Reconstruction#anon$13];
  assume I#[DC_Reconstruction#anon$13] == R#[DC_Reconstruction#anon$13];
  assume 0 <= I#[DC_Reconstruction#anon$14];
  assume I#[DC_Reconstruction#anon$14] <= R#[DC_Reconstruction#anon$14];
  assume R#[DC_Reconstruction#anon$14] <= C#[DC_Reconstruction#anon$14];
  assume I#[DC_Reconstruction#anon$14] == R#[DC_Reconstruction#anon$14];
  assume 0 <= I#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$15] <= R#[DC_Reconstruction#anon$15];
  assume R#[DC_Reconstruction#anon$15] <= C#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$15] == R#[DC_Reconstruction#anon$15];
  assume true;
  I#sub[DC_Reconstruction#anon$5] := R#[DC_Reconstruction#anon$5];
  I#sub[DC_Reconstruction#anon$7] := R#[DC_Reconstruction#anon$7];
  I#sub[DC_Reconstruction#anon$8] := R#[DC_Reconstruction#anon$8];
  I#sub[DC_Reconstruction#anon$9] := R#[DC_Reconstruction#anon$9];
  I#sub[DC_Reconstruction#anon$3] := R#[DC_Reconstruction#anon$3];
  I#sub[DC_Reconstruction#anon$4] := R#[DC_Reconstruction#anon$4];
  I#sub[DC_Reconstruction#anon$10] := C#[DC_Reconstruction#anon$10];
  I#sub[DC_Reconstruction#anon$11] := C#[DC_Reconstruction#anon$11];
  I#sub[DC_Reconstruction#anon$12] := C#[DC_Reconstruction#anon$12];
  I#sub[DC_Reconstruction#anon$13] := C#[DC_Reconstruction#anon$13];
  I#sub[DC_Reconstruction#anon$14] := C#[DC_Reconstruction#anon$14];
  I#sub[DC_Reconstruction#anon$15] := C#[DC_Reconstruction#anon$15];
  assume I#[DC_Reconstruction#anon$5] == I#[DC_Reconstruction#anon$2];
  assume I#[DC_Reconstruction#anon$6] == I#[DC_Reconstruction#anon$2];
  assume R#[DC_Reconstruction#anon$2] == C#[DC_Reconstruction#anon$5];
  assume R#[DC_Reconstruction#anon$2] == C#[DC_Reconstruction#anon$6];
  assume (forall idx$: int :: 
    (0 <= idx$) && (idx$ < C#[DC_Reconstruction#anon$5]) ==> (M#[DC_Reconstruction#anon$5][idx$] == M#[DC_Reconstruction#anon$2][idx$])
  );
  assume (forall idx$: int :: 
    (0 <= idx$) && (idx$ < C#[DC_Reconstruction#anon$6]) ==> (M#[DC_Reconstruction#anon$6][idx$] == M#[DC_Reconstruction#anon$2][idx$])
  );
  assume (Mode#[this#] == StartMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) != 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#INTRA) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$6][I#[DC_Reconstruction#anon$6]], AV#addressing#INTRA) == 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 3);
  assume (Mode#[this#] == IntraMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[DC_Reconstruction#anon$6] - I#[DC_Reconstruction#anon$6]) <= 1);
  assume (Mode#[this#] == StartMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) != 0bv12));
  assume (Mode#[this#] == InterMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) != 0bv12) && (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#ACCODED) != 0bv12));
  assume (Mode#[this#] == OtherMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTRA) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#ACCODED) == 0bv12));
  assume (Mode#[this#] == IntraMode) ==> (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTER) == 0bv12)) && (((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) >= 0) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) >= 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) >= 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) >= 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) >= 0) && ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) >= 1) ==> (AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#[DC_Reconstruction#anon$5]], AV#invpred#INTRA) != 0bv12));
  assume (Mode#[this#] == StartMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 3) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) == 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) == 0);
  assume (Mode#[this#] == InterMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) <= 1) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (Mode#[this#] == OtherMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) == 0) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) == 0) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) == 0) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) == 0) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (Mode#[this#] == IntraMode) ==> ((C#[DC_Reconstruction#anon$5] - I#[DC_Reconstruction#anon$5]) <= 1) && ((C#[DC_Reconstruction#anon$7] - I#[DC_Reconstruction#anon$7]) <= 1) && ((C#[DC_Reconstruction#anon$8] - I#[DC_Reconstruction#anon$8]) <= 1) && ((C#[DC_Reconstruction#anon$9] - I#[DC_Reconstruction#anon$9]) <= 1) && ((C#[DC_Reconstruction#anon$3] - I#[DC_Reconstruction#anon$3]) <= 1) && ((C#[DC_Reconstruction#anon$4] - I#[DC_Reconstruction#anon$4]) <= 1);
  assume (1 <= (C#[DC_Reconstruction#anon$5] - R#[DC_Reconstruction#anon$5])) && (1 <= (C#[DC_Reconstruction#anon$7] - R#[DC_Reconstruction#anon$7])) && (1 <= (C#[DC_Reconstruction#anon$8] - R#[DC_Reconstruction#anon$8])) && (1 <= (C#[DC_Reconstruction#anon$9] - R#[DC_Reconstruction#anon$9])) && (1 <= (C#[DC_Reconstruction#anon$3] - R#[DC_Reconstruction#anon$3])) && (1 <= (C#[DC_Reconstruction#anon$4] - R#[DC_Reconstruction#anon$4]));
  R#[DC_Reconstruction#anon$5] := R#[DC_Reconstruction#anon$5] + 1;
  R#[DC_Reconstruction#anon$7] := R#[DC_Reconstruction#anon$7] + 1;
  R#[DC_Reconstruction#anon$8] := R#[DC_Reconstruction#anon$8] + 1;
  R#[DC_Reconstruction#anon$9] := R#[DC_Reconstruction#anon$9] + 1;
  R#[DC_Reconstruction#anon$3] := R#[DC_Reconstruction#anon$3] + 1;
  R#[DC_Reconstruction#anon$4] := R#[DC_Reconstruction#anon$4] + 1;
  assert {:msg "Algo_DCRinvpred.cal(80.12): Precondition might not hold for instance at DC_reconstruction.actor(18.5) (#42)"} AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#sub[DC_Reconstruction#anon$5]], AV#invpred#NEWVOP) == 0bv12;
  assert {:msg "Algo_DCRinvpred.cal(81.12): Precondition might not hold for instance at DC_reconstruction.actor(18.5) (#43)"} AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#sub[DC_Reconstruction#anon$5]], AV#invpred#INTER) == 0bv12;
  assert {:msg "Algo_DCRinvpred.cal(82.12): Precondition might not hold for instance at DC_reconstruction.actor(18.5) (#44)"} AT#BvAnd12(M#[DC_Reconstruction#anon$5][I#sub[DC_Reconstruction#anon$5]], AV#invpred#INTRA) != 0bv12;
  C#[DC_Reconstruction#anon$10] := C#[DC_Reconstruction#anon$10] + 1;
  C#[DC_Reconstruction#anon$11] := C#[DC_Reconstruction#anon$11] + 1;
  C#[DC_Reconstruction#anon$12] := C#[DC_Reconstruction#anon$12] + 1;
  C#[DC_Reconstruction#anon$13] := C#[DC_Reconstruction#anon$13] + 1;
  C#[DC_Reconstruction#anon$14] := C#[DC_Reconstruction#anon$14] + 1;
  C#[DC_Reconstruction#anon$15] := C#[DC_Reconstruction#anon$15] + 1;
  assert {:msg "Action at Algo_DCRinvpred.cal(64.2) ('IntraMode') for actor instance 'invpred' might not preserve the channel invariant (#45)"} I#[DC_Reconstruction#anon$5] == I#[DC_Reconstruction#anon$2];
  assert {:msg "Action at Algo_DCRinvpred.cal(64.2) ('IntraMode') for actor instance 'invpred' might not preserve the channel invariant (#46)"} I#[DC_Reconstruction#anon$6] == I#[DC_Reconstruction#anon$2];
}

actor Dynamic() int in ==> int out:

	int St;	
	int index;
	int iterations;
	int rds;
	int tots;

	invariant rd0(in) = 0 ==> iterations = 0
    invariant rd0(in) > 0 ==> iterations = prev(in)
	invariant index <= iterations
	invariant St = 0 <==> index = iterations
	invariant St = 1 <==> index < iterations
	invariant tot0(out) = tots + index
	invariant St = 0 <==> (tot0(out)-tots = iterations*(rd0(in)-rds))

 	initialize ==>
 	do
 		rds := rd0(in)
	    tots := tot0(out) 
 		index := 0;
 		iterations := 0;
 		St := 0
 	end
	
	action in:[len_in] ==>
	guard St = 0
	requires len_in >= 1
	do
	    rds := rd0(in)
	    tots := tot0(out)
		iterations := len_in; 
		index := 0;
		St := 1;
	end

	action ==> out:[index] 
	guard
		St = 1 && index < iterations
	do	
		index := index + 1;
		havoc St;
		assume index < iterations ==> St = 1
		assume index = iterations ==> St = 0
	end
	
	finalize: action ==>
	guard
		St = 1 && index = iterations
	do
		St := 0;
	end

end


network Net int in ==> int out, bool done :
    
  action in:1 ==> out:3
    requires in[@] = 3
  end
  
  free invariant subvar(shp,St) = 0
  
  chinvariant 3*@(in) = @(out)
  chinvariant subvar(shp,St) = 0 ==> 3*rd0(in) = tot0(out)
  chinvariant rd(in) > 0 ==> subvar(shp,iterations) = prev(in)
  chinvariant rd(in) > 0 ==> subvar(shp,tots) = @(out)

  entities
    shp = Dynamic();
  end
  
  structure
    a: in --> shp.in;
    b: shp.out --> out;
  end

end
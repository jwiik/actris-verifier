actor chipMapper()
// Inputs:
uint data              // header and payload data samples as 8-bit unsigned
                                     // each sample contains two 4-bit symbols
// Outputs:
==> uint chip          // packets of 32 chips
:
    
    public invariant offset = 0 || offset = 4 || offset = 8
    public invariant 2*rd0(data) = tot0(chip)+((8-offset)/4)
    
	uint dataV;
	uint offset;
	uint ind;
	
	init: initialize ==> do offset := 8 end

	// acquire a data sample
	read: action data:[ data_in ] ==>
	guard
		offset = 8
	do
        dataV := data_in;
        offset := 0;
	end

	// transmit a chip packet
	write: action ==> chip:[ ind ]
	guard
		offset < 8
	do
        ind := (dataV >> offset) & 0x0F;
        offset := offset + 4;
	end
	
	priority
		write > read
	end
	
end


network Net uint in ==> uint out :
  
  action in:1 ==> out:2 end
  
  invariant subvar(cm,offset) = 8
   
  chinvariant 2*@(a) = @(b)
  
  entities
    cm = chipMapper();
  end
  
  structure
    a: in --> cm.data;
    b: cm.chip --> out;
  end
  
end

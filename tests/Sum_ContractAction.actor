actor Sum int x ==> int y: 
  
  int sum;
  
  contract x:1 ==> y:1
    requires 0 <= x[@]
    ensures y[0] = x[0]
    ensures 0 < @(y) ==> y[@] = y[@-1]+x[@]
  end
  
  invariant rd(x) = tot(y)
  invariant @(x) = @(y)
  invariant rd(x) = 0 ==> sum = 0
  invariant tot(y) > 0 ==> sum = y[last]
  invariant tot(y) > 0 ==> y[0] = x[0]
  invariant (forall int i :: every(y,i,1,0) ==> y[i] = y[i-1]+x[i])

  initialize ==> 
  do
    sum := 0;
  end
  
  action x:[i] ==> y:[sum]
  do
    sum := sum+i;
  end
  
end


actor Add2 int x ==> int y: 
  
  int t1;
  int t2;
  int step;
  
  contract x:2 ==> y:1 
    ensures y[@] = x[@]+x[@+1]
  end
  
  invariant 0 <= step && step <= 2
  invariant 2*tot@(y) = rd@(x)-step
  
  invariant step = 1 ==> t1 = x[prev]
  invariant step = 2 ==> t1 = x[prev-1] && t2 = x[prev]
  invariant step = 0 && tot(y) > 0 ==> y[last] = x[prev-1] + x[prev]
    
  initialize ==> do step := 0 end
  
  action x:[i] ==>
    guard step = 0
    do
      t1 := i;
      step := 1;
  end
  
  action x:[i] ==>
    guard step = 1
    do
      t2 := i;
      step := 2;
  end
  
  action ==> y:[t1+t2]
    guard step = 2
    do
      step := 0;
  end
  
end

actor add int in1, int in2 ==> int out :
  action in1:[i], in2:[j] ==> out:[i+j] end
end

actor delay(int init) int in1 ==> int out :
  stream invariant out[0] = init
  initialize ==> out:[init] end
  action in1:[i] ==> out:[i] end
end

actor mulc(int v) int in1 ==> int out :
  action in1:[i] ==> out:[v*i] end
end

actor rshift(int s) int in1 ==> int out :
  action in1:[i] ==> out:[i >> s] end
end

actor split int in1 ==> int out1, int out2 :
  action in1:[i] ==> out1:[i], out2:[i] end
end

network iir() int in1 ==> int out :
  
  contract in1:1 ==> out:1
    ensures out[0] = ((85*in1[0]) >> 8)
    ensures 0 < @(out) ==> out[@] = ((171*out[@-1]+85*in1[@]) >> 8)
  end
  
  invariant tokens(f,1)
  
  entities
    del1 = delay(0);
    mul1 = mulc(85);
    mul2 = mulc(171);
    rsh1 = rshift(8);
    add1 = add();
    spl1 = split();
  end
  
  structure
    a: in1 --> mul1.in1;
    b: mul1.out --> add1.in1;
    c: add1.out --> rsh1.in1;
    d: spl1.out1 --> mul2.in1;
    e: mul2.out --> del1.in1;
    f: del1.out --> add1.in2;
    g: rsh1.out --> spl1.in1;
    h: spl1.out2 --> out;
  end

end
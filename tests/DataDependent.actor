@static
actor Gain int in1 ==> int out :
  action in1:[i] ==> out:[2*i] end
end

actor Split int in1 ==> int pos, int neg :
  stream invariant rd(in1) = tot(pos)+tot(neg)
  stream invariant 0 < rd(in1) && 0 <= in1[prev] ==> in1[prev] = pos[last]
  stream invariant 0 < rd(in1) && in1[prev] < 0  ==> in1[prev] = neg[last]
  action in1:[i] ==> pos:[i] 
    guard 0 <= i
  end
  action in1:[j] ==> neg:[j] 
    guard j < 0
  end
end

network Net int in1 ==> int out1, int out2 :

  contract in1:1 ==> out1:1
    guard in1[@] = 1
    requires (forall int i :: current(in1,i) ==> in1[i] = 1)
    ensures out1[@] = 2*in1[@]
  end
  
  contract in1:1 ==> out2:1
    guard in1[@] = -1
    requires (forall int i :: current(in1,i) ==> in1[i] = -1)
    ensures out2[@] = 2*in1[@]
  end
  
  chinvariant @(b) = @(d)+@(c)
  chinvariant 0 < rd@(b) && b[@] >= 0 ==> tot@(d) = 0
  chinvariant 0 < rd@(b) && b[@] < 0  ==> tot@(c) = 0
    
  entities
    gain = Gain();
    split = Split();
  end
  
  structure
    a: in1 --> gain.in1;
    b: gain.out --> split.in1;
    c: split.pos --> out1;
    d: split.neg --> out2;
  end

end
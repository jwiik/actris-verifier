actor Gain int in ==> int out :
  invariant rd0(in) = tot0(out)
  action in:[i] ==> out:[2*i] end
end

actor Split int in ==> int pos, int neg :
  action in:[i] ==> pos:[i] 
    guard 0 <= i
  end
  action in:[j] ==> neg:[j] 
    guard j < 0
  end
end

network Net int in ==> int out1, int out2 :

  action in:1 ==> out1:1
    requires in[@] = 1
    ensures out1[@] = 2*in[@]
  end
  
  action in:1 ==> out2:1
    requires in[@] = -1
    ensures out2[@] = 2*in[@]
  end
  
  chinvariant rd(b) = tot(d)+tot(c)  
  chinvariant rd(b) > 0 && b[@] >= 0 ==> tot(d) = 0 && c[@] = b[@]
  chinvariant rd(b) > 0 && b[@] < 0 ==> tot(c) = 0 && d[@] = b[@]
    
  entities
    gain = Gain();
    split = Split();
  end
  
  structure
    a: in --> gain.in;
    b: gain.out --> split.in;
    c: split.pos --> out1;
    d: split.neg --> out2;
  end

end
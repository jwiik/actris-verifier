@static
actor Gain int in ==> int out :
  action in:[i] ==> out:[2*i] end
end

actor Split int in ==> int pos, int neg :
  stream invariant rd(in) = tot(pos)+tot(neg)
  stream invariant 0 < rd(in) && 0 <= in[prev] ==> in[prev] = pos[last]
  stream invariant 0 < rd(in) && in[prev] < 0  ==> in[prev] = neg[last]
  action in:[i] ==> pos:[i] 
    guard 0 <= i
  end
  action in:[j] ==> neg:[j] 
    guard j < 0
  end
end

network Net int in ==> int out1, int out2 :

  action in:1 ==> out1:1
    requires in[@] = 1
    requires (forall int i :: current(in,i) ==> in[i] = 1)
    ensures out1[@] = 2*in[@]
  end
  
  action in:1 ==> out2:1
    requires in[@] = -1
    requires (forall int i :: current(in,i) ==> in[i] = -1)
    ensures out2[@] = 2*in[@]
  end
  
  chinvariant @(b) = @(d)+@(c)
  chinvariant 0 < tot@(in) ==> in[@] = 1 || in[@] = -1
  chinvariant 0 < rd@(b) && b[@] >= 0 ==> tot@(d) = 0
  chinvariant 0 < rd@(b) && b[@] < 0  ==> tot@(c) = 0
    
  entities
    gain = Gain();
    split = Split();
  end
  
  structure
    a: in --> gain.in;
    b: gain.out --> split.in;
    c: split.pos --> out1;
    d: split.neg --> out2;
  end

end
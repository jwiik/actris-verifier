// ---------------------------------------------------------------
// -- Types and global variables ---------------------------------
// ---------------------------------------------------------------
type Ref;
type Chan a;
type Field a;
type Actor;
type CType = <a>[Chan a]int;
type MType = <a>[Chan a][int]a;
type Obj = <a>[Field a]a;
type HType = [Ref]Obj;
type ModeType = [Actor]int;

var M: MType;
var C: CType;
var R: CType;
var I: CType;
var B: CType;
var Mode: ModeType;
var I#sub: CType;

var H: HType;

const unique this#: Actor;

function AT#Min(x:int, y: int): int { if x <= y then x else y }

// ---------------------------------------------------------------
// -- Bit vector operations --------------------------------------
// ---------------------------------------------------------------
// Size: 12
function {:bvbuiltin "bvand"} AT#BvAnd12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvor"} AT#BvOr12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvnot"} AT#BvNot12(a: bv12): bv12;
function {:bvbuiltin "bvadd"} AT#BvAdd12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvsub"} AT#BvSub12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvmul"} AT#BvMul12(a: bv12, b: bv12): bv12;
function {:bvbuiltin "bvshl"} AT#BvShl12(bv12,bv12): bv12;
function {:bvbuiltin "bvlshr"} AT#BvLshr12(bv12,bv12): bv12;
function {:bvbuiltin "bvashr"} AT#BvAshr12(bv12,bv12): bv12;
function {:bvbuiltin "bvule"} AT#BvUle12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvult"} AT#BvUlt12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvuge"} AT#BvUge12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvugt"} AT#BvUgt12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvsle"} AT#BvSle12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvslt"} AT#BvSlt12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvsge"} AT#BvSge12(a: bv12, b: bv12): bool;
function {:bvbuiltin "bvsgt"} AT#BvSgt12(a: bv12, b: bv12): bool;
function AT#BvXor12(a: bv12, b: bv12): bv12;

axiom (forall a,b: bv12 :: AT#BvXor12(a,b) == AT#BvAnd12(AT#BvOr12(a,b), AT#BvNot12(AT#BvAnd12(a,b))) );

// ---------------------------------------------------------------
// -- Bit vector operations --------------------------------------
// ---------------------------------------------------------------
// Size: 10
function {:bvbuiltin "bvand"} AT#BvAnd10(a: bv10, b: bv10): bv10;
function {:bvbuiltin "bvor"} AT#BvOr10(a: bv10, b: bv10): bv10;
function {:bvbuiltin "bvnot"} AT#BvNot10(a: bv10): bv10;
function {:bvbuiltin "bvadd"} AT#BvAdd10(a: bv10, b: bv10): bv10;
function {:bvbuiltin "bvsub"} AT#BvSub10(a: bv10, b: bv10): bv10;
function {:bvbuiltin "bvmul"} AT#BvMul10(a: bv10, b: bv10): bv10;
function {:bvbuiltin "bvshl"} AT#BvShl10(bv10,bv10): bv10;
function {:bvbuiltin "bvlshr"} AT#BvLshr10(bv10,bv10): bv10;
function {:bvbuiltin "bvashr"} AT#BvAshr10(bv10,bv10): bv10;
function {:bvbuiltin "bvule"} AT#BvUle10(a: bv10, b: bv10): bool;
function {:bvbuiltin "bvult"} AT#BvUlt10(a: bv10, b: bv10): bool;
function {:bvbuiltin "bvuge"} AT#BvUge10(a: bv10, b: bv10): bool;
function {:bvbuiltin "bvugt"} AT#BvUgt10(a: bv10, b: bv10): bool;
function {:bvbuiltin "bvsle"} AT#BvSle10(a: bv10, b: bv10): bool;
function {:bvbuiltin "bvslt"} AT#BvSlt10(a: bv10, b: bv10): bool;
function {:bvbuiltin "bvsge"} AT#BvSge10(a: bv10, b: bv10): bool;
function {:bvbuiltin "bvsgt"} AT#BvSgt10(a: bv10, b: bv10): bool;
function AT#BvXor10(a: bv10, b: bv10): bv10;

axiom (forall a,b: bv10 :: AT#BvXor10(a,b) == AT#BvAnd10(AT#BvOr10(a,b), AT#BvNot10(AT#BvAnd10(a,b))) );

// ---------------------------------------------------------------
// -- Bit vector operations --------------------------------------
// ---------------------------------------------------------------
// Size: 9
function {:bvbuiltin "bvand"} AT#BvAnd9(a: bv9, b: bv9): bv9;
function {:bvbuiltin "bvor"} AT#BvOr9(a: bv9, b: bv9): bv9;
function {:bvbuiltin "bvnot"} AT#BvNot9(a: bv9): bv9;
function {:bvbuiltin "bvadd"} AT#BvAdd9(a: bv9, b: bv9): bv9;
function {:bvbuiltin "bvsub"} AT#BvSub9(a: bv9, b: bv9): bv9;
function {:bvbuiltin "bvmul"} AT#BvMul9(a: bv9, b: bv9): bv9;
function {:bvbuiltin "bvshl"} AT#BvShl9(bv9,bv9): bv9;
function {:bvbuiltin "bvlshr"} AT#BvLshr9(bv9,bv9): bv9;
function {:bvbuiltin "bvashr"} AT#BvAshr9(bv9,bv9): bv9;
function {:bvbuiltin "bvule"} AT#BvUle9(a: bv9, b: bv9): bool;
function {:bvbuiltin "bvult"} AT#BvUlt9(a: bv9, b: bv9): bool;
function {:bvbuiltin "bvuge"} AT#BvUge9(a: bv9, b: bv9): bool;
function {:bvbuiltin "bvugt"} AT#BvUgt9(a: bv9, b: bv9): bool;
function {:bvbuiltin "bvsle"} AT#BvSle9(a: bv9, b: bv9): bool;
function {:bvbuiltin "bvslt"} AT#BvSlt9(a: bv9, b: bv9): bool;
function {:bvbuiltin "bvsge"} AT#BvSge9(a: bv9, b: bv9): bool;
function {:bvbuiltin "bvsgt"} AT#BvSgt9(a: bv9, b: bv9): bool;
function AT#BvXor9(a: bv9, b: bv9): bv9;

axiom (forall a,b: bv9 :: AT#BvXor9(a,b) == AT#BvAnd9(AT#BvOr9(a,b), AT#BvNot9(AT#BvAnd9(a,b))) );

// ---------------------------------------------------------------
// -- End of prelude ---------------------------------------------
// ---------------------------------------------------------------

procedure Add#init#0()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (I[MOT] == 0) && (R[MOT] == 0) && (C[MOT] == 0);
  assume (I[TEX] == 0) && (R[TEX] == 0) && (C[TEX] == 0);
  assume (I[BTYPE] == 0) && (R[BTYPE] == 0) && (C[BTYPE] == 0);
  assume (I[VID] == 0) && (R[VID] == 0) && (C[VID] == 0);
  count := 0;
  St := 0;
  assert {:msg "Add.cal(34.12): Initialization might not establish the invariant (#0)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): Initialization might not establish the invariant (#1)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): Initialization might not establish the invariant (#2)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): Initialization might not establish the invariant (#3)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): Initialization might not establish the invariant (#4)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): Initialization might not establish the invariant (#5)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): Initialization might not establish the invariant (#6)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): Initialization might not establish the invariant (#7)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): Initialization might not establish the invariant (#8)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): Initialization might not establish the invariant (#9)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): Initialization might not establish the invariant (#10)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): Initialization might not establish the invariant (#11)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): Initialization might not establish the invariant (#12)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): Initialization might not establish the invariant (#13)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): Initialization might not establish the invariant (#14)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}
procedure Add#cmd.newVop#1()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  var BTYPE#0: bv12;
  var TEX#0: bv9;
  var MOT#0: bv9;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (0 <= I[MOT]) && (I[MOT] <= R[MOT]) && (R[MOT] <= C[MOT]);
  assume (0 <= I[TEX]) && (I[TEX] <= R[TEX]) && (R[TEX] <= C[TEX]);
  assume (0 <= I[BTYPE]) && (I[BTYPE] <= R[BTYPE]) && (R[BTYPE] <= C[BTYPE]);
  assume (0 <= I[VID]) && (I[VID] <= R[VID]) && (R[VID] <= C[VID]);
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assume 1 <= (C[BTYPE] - R[BTYPE]);
  BTYPE#0 := M[BTYPE][R[BTYPE]];
  R[BTYPE] := R[BTYPE] + 1;
  assume (St == 0) && (AT#BvAnd12(BTYPE#0, NEWVOP) != 0bv12);
  St := 4;
  assert {:msg "Add.cal(34.12): Action 'cmd.newVop' at Add.cal(63.2) might not preserve the invariant (#15)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): Action 'cmd.newVop' at Add.cal(63.2) might not preserve the invariant (#16)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): Action 'cmd.newVop' at Add.cal(63.2) might not preserve the invariant (#17)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): Action 'cmd.newVop' at Add.cal(63.2) might not preserve the invariant (#18)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): Action 'cmd.newVop' at Add.cal(63.2) might not preserve the invariant (#19)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): Action 'cmd.newVop' at Add.cal(63.2) might not preserve the invariant (#20)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): Action 'cmd.newVop' at Add.cal(63.2) might not preserve the invariant (#21)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): Action 'cmd.newVop' at Add.cal(63.2) might not preserve the invariant (#22)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): Action 'cmd.newVop' at Add.cal(63.2) might not preserve the invariant (#23)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): Action 'cmd.newVop' at Add.cal(63.2) might not preserve the invariant (#24)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): Action 'cmd.newVop' at Add.cal(63.2) might not preserve the invariant (#25)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): Action 'cmd.newVop' at Add.cal(63.2) might not preserve the invariant (#26)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): Action 'cmd.newVop' at Add.cal(63.2) might not preserve the invariant (#27)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): Action 'cmd.newVop' at Add.cal(63.2) might not preserve the invariant (#28)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): Action 'cmd.newVop' at Add.cal(63.2) might not preserve the invariant (#29)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}
procedure Add#cmd.textureOnly#2()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  var BTYPE#0: bv12;
  var TEX#0: bv9;
  var MOT#0: bv9;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (0 <= I[MOT]) && (I[MOT] <= R[MOT]) && (R[MOT] <= C[MOT]);
  assume (0 <= I[TEX]) && (I[TEX] <= R[TEX]) && (R[TEX] <= C[TEX]);
  assume (0 <= I[BTYPE]) && (I[BTYPE] <= R[BTYPE]) && (R[BTYPE] <= C[BTYPE]);
  assume (0 <= I[VID]) && (I[VID] <= R[VID]) && (R[VID] <= C[VID]);
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assume 1 <= (C[BTYPE] - R[BTYPE]);
  BTYPE#0 := M[BTYPE][R[BTYPE]];
  R[BTYPE] := R[BTYPE] + 1;
  assume !((St == 0) && (AT#BvAnd12(BTYPE#0, NEWVOP) != 0bv12));
  assume (St == 0) && (AT#BvAnd12(BTYPE#0, INTRA) != 0bv12);
  St := 1;
  assert {:msg "Add.cal(34.12): Action 'cmd.textureOnly' at Add.cal(72.2) might not preserve the invariant (#30)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): Action 'cmd.textureOnly' at Add.cal(72.2) might not preserve the invariant (#31)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): Action 'cmd.textureOnly' at Add.cal(72.2) might not preserve the invariant (#32)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): Action 'cmd.textureOnly' at Add.cal(72.2) might not preserve the invariant (#33)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): Action 'cmd.textureOnly' at Add.cal(72.2) might not preserve the invariant (#34)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): Action 'cmd.textureOnly' at Add.cal(72.2) might not preserve the invariant (#35)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): Action 'cmd.textureOnly' at Add.cal(72.2) might not preserve the invariant (#36)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): Action 'cmd.textureOnly' at Add.cal(72.2) might not preserve the invariant (#37)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): Action 'cmd.textureOnly' at Add.cal(72.2) might not preserve the invariant (#38)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): Action 'cmd.textureOnly' at Add.cal(72.2) might not preserve the invariant (#39)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): Action 'cmd.textureOnly' at Add.cal(72.2) might not preserve the invariant (#40)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): Action 'cmd.textureOnly' at Add.cal(72.2) might not preserve the invariant (#41)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): Action 'cmd.textureOnly' at Add.cal(72.2) might not preserve the invariant (#42)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): Action 'cmd.textureOnly' at Add.cal(72.2) might not preserve the invariant (#43)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): Action 'cmd.textureOnly' at Add.cal(72.2) might not preserve the invariant (#44)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}
procedure Add#cmd.motionOnly#3()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  var BTYPE#0: bv12;
  var TEX#0: bv9;
  var MOT#0: bv9;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (0 <= I[MOT]) && (I[MOT] <= R[MOT]) && (R[MOT] <= C[MOT]);
  assume (0 <= I[TEX]) && (I[TEX] <= R[TEX]) && (R[TEX] <= C[TEX]);
  assume (0 <= I[BTYPE]) && (I[BTYPE] <= R[BTYPE]) && (R[BTYPE] <= C[BTYPE]);
  assume (0 <= I[VID]) && (I[VID] <= R[VID]) && (R[VID] <= C[VID]);
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assume 1 <= (C[BTYPE] - R[BTYPE]);
  BTYPE#0 := M[BTYPE][R[BTYPE]];
  R[BTYPE] := R[BTYPE] + 1;
  assume !((St == 0) && (AT#BvAnd12(BTYPE#0, INTRA) != 0bv12));
  assume !((St == 0) && (AT#BvAnd12(BTYPE#0, NEWVOP) != 0bv12));
  assume (St == 0) && (AT#BvAnd12(BTYPE#0, ACCODED) != 0bv12);
  St := 2;
  assert {:msg "Add.cal(34.12): Action 'cmd.motionOnly' at Add.cal(81.2) might not preserve the invariant (#45)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): Action 'cmd.motionOnly' at Add.cal(81.2) might not preserve the invariant (#46)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): Action 'cmd.motionOnly' at Add.cal(81.2) might not preserve the invariant (#47)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): Action 'cmd.motionOnly' at Add.cal(81.2) might not preserve the invariant (#48)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): Action 'cmd.motionOnly' at Add.cal(81.2) might not preserve the invariant (#49)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): Action 'cmd.motionOnly' at Add.cal(81.2) might not preserve the invariant (#50)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): Action 'cmd.motionOnly' at Add.cal(81.2) might not preserve the invariant (#51)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): Action 'cmd.motionOnly' at Add.cal(81.2) might not preserve the invariant (#52)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): Action 'cmd.motionOnly' at Add.cal(81.2) might not preserve the invariant (#53)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): Action 'cmd.motionOnly' at Add.cal(81.2) might not preserve the invariant (#54)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): Action 'cmd.motionOnly' at Add.cal(81.2) might not preserve the invariant (#55)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): Action 'cmd.motionOnly' at Add.cal(81.2) might not preserve the invariant (#56)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): Action 'cmd.motionOnly' at Add.cal(81.2) might not preserve the invariant (#57)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): Action 'cmd.motionOnly' at Add.cal(81.2) might not preserve the invariant (#58)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): Action 'cmd.motionOnly' at Add.cal(81.2) might not preserve the invariant (#59)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}
procedure Add#cmd.other#4()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  var BTYPE#0: bv12;
  var TEX#0: bv9;
  var MOT#0: bv9;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (0 <= I[MOT]) && (I[MOT] <= R[MOT]) && (R[MOT] <= C[MOT]);
  assume (0 <= I[TEX]) && (I[TEX] <= R[TEX]) && (R[TEX] <= C[TEX]);
  assume (0 <= I[BTYPE]) && (I[BTYPE] <= R[BTYPE]) && (R[BTYPE] <= C[BTYPE]);
  assume (0 <= I[VID]) && (I[VID] <= R[VID]) && (R[VID] <= C[VID]);
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assume 1 <= (C[BTYPE] - R[BTYPE]);
  BTYPE#0 := M[BTYPE][R[BTYPE]];
  R[BTYPE] := R[BTYPE] + 1;
  assume !((St == 0) && (AT#BvAnd12(BTYPE#0, ACCODED) != 0bv12));
  assume !((St == 0) && (AT#BvAnd12(BTYPE#0, INTRA) != 0bv12));
  assume !((St == 0) && (AT#BvAnd12(BTYPE#0, NEWVOP) != 0bv12));
  assume ((St == 0) || (St == 4)) || (St == 5);
  St := (if St == 0 then 3 else (if St == 4 then 5 else 0));
  assert {:msg "Add.cal(34.12): Action 'cmd.other' at Add.cal(91.2) might not preserve the invariant (#60)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): Action 'cmd.other' at Add.cal(91.2) might not preserve the invariant (#61)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): Action 'cmd.other' at Add.cal(91.2) might not preserve the invariant (#62)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): Action 'cmd.other' at Add.cal(91.2) might not preserve the invariant (#63)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): Action 'cmd.other' at Add.cal(91.2) might not preserve the invariant (#64)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): Action 'cmd.other' at Add.cal(91.2) might not preserve the invariant (#65)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): Action 'cmd.other' at Add.cal(91.2) might not preserve the invariant (#66)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): Action 'cmd.other' at Add.cal(91.2) might not preserve the invariant (#67)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): Action 'cmd.other' at Add.cal(91.2) might not preserve the invariant (#68)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): Action 'cmd.other' at Add.cal(91.2) might not preserve the invariant (#69)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): Action 'cmd.other' at Add.cal(91.2) might not preserve the invariant (#70)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): Action 'cmd.other' at Add.cal(91.2) might not preserve the invariant (#71)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): Action 'cmd.other' at Add.cal(91.2) might not preserve the invariant (#72)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): Action 'cmd.other' at Add.cal(91.2) might not preserve the invariant (#73)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): Action 'cmd.other' at Add.cal(91.2) might not preserve the invariant (#74)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}
procedure Add#done#5()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  var BTYPE#0: bv12;
  var TEX#0: bv9;
  var MOT#0: bv9;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (0 <= I[MOT]) && (I[MOT] <= R[MOT]) && (R[MOT] <= C[MOT]);
  assume (0 <= I[TEX]) && (I[TEX] <= R[TEX]) && (R[TEX] <= C[TEX]);
  assume (0 <= I[BTYPE]) && (I[BTYPE] <= R[BTYPE]) && (R[BTYPE] <= C[BTYPE]);
  assume (0 <= I[VID]) && (I[VID] <= R[VID]) && (R[VID] <= C[VID]);
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assume true;
  assume (((St == 1) || (St == 2)) || (St == 3)) && (count == 64);
  count := 0;
  St := 0;
  assert {:msg "Add.cal(34.12): Action 'done' at Add.cal(102.2) might not preserve the invariant (#75)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): Action 'done' at Add.cal(102.2) might not preserve the invariant (#76)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): Action 'done' at Add.cal(102.2) might not preserve the invariant (#77)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): Action 'done' at Add.cal(102.2) might not preserve the invariant (#78)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): Action 'done' at Add.cal(102.2) might not preserve the invariant (#79)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): Action 'done' at Add.cal(102.2) might not preserve the invariant (#80)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): Action 'done' at Add.cal(102.2) might not preserve the invariant (#81)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): Action 'done' at Add.cal(102.2) might not preserve the invariant (#82)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): Action 'done' at Add.cal(102.2) might not preserve the invariant (#83)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): Action 'done' at Add.cal(102.2) might not preserve the invariant (#84)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): Action 'done' at Add.cal(102.2) might not preserve the invariant (#85)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): Action 'done' at Add.cal(102.2) might not preserve the invariant (#86)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): Action 'done' at Add.cal(102.2) might not preserve the invariant (#87)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): Action 'done' at Add.cal(102.2) might not preserve the invariant (#88)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): Action 'done' at Add.cal(102.2) might not preserve the invariant (#89)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}
procedure Add#texture#6()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  var BTYPE#0: bv12;
  var TEX#0: bv9;
  var MOT#0: bv9;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (0 <= I[MOT]) && (I[MOT] <= R[MOT]) && (R[MOT] <= C[MOT]);
  assume (0 <= I[TEX]) && (I[TEX] <= R[TEX]) && (R[TEX] <= C[TEX]);
  assume (0 <= I[BTYPE]) && (I[BTYPE] <= R[BTYPE]) && (R[BTYPE] <= C[BTYPE]);
  assume (0 <= I[VID]) && (I[VID] <= R[VID]) && (R[VID] <= C[VID]);
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assume 1 <= (C[TEX] - R[TEX]);
  TEX#0 := M[TEX][R[TEX]];
  R[TEX] := R[TEX] + 1;
  assume !((((St == 1) || (St == 2)) || (St == 3)) && (count == 64));
  assume St == 1;
  count := count + 1;
  M[VID][C[VID]] := TEX#0;
  C[VID] := C[VID] + 1;
  assert {:msg "Add.cal(34.12): Action 'texture' at Add.cal(111.2) might not preserve the invariant (#90)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): Action 'texture' at Add.cal(111.2) might not preserve the invariant (#91)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): Action 'texture' at Add.cal(111.2) might not preserve the invariant (#92)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): Action 'texture' at Add.cal(111.2) might not preserve the invariant (#93)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): Action 'texture' at Add.cal(111.2) might not preserve the invariant (#94)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): Action 'texture' at Add.cal(111.2) might not preserve the invariant (#95)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): Action 'texture' at Add.cal(111.2) might not preserve the invariant (#96)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): Action 'texture' at Add.cal(111.2) might not preserve the invariant (#97)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): Action 'texture' at Add.cal(111.2) might not preserve the invariant (#98)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): Action 'texture' at Add.cal(111.2) might not preserve the invariant (#99)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): Action 'texture' at Add.cal(111.2) might not preserve the invariant (#100)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): Action 'texture' at Add.cal(111.2) might not preserve the invariant (#101)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): Action 'texture' at Add.cal(111.2) might not preserve the invariant (#102)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): Action 'texture' at Add.cal(111.2) might not preserve the invariant (#103)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): Action 'texture' at Add.cal(111.2) might not preserve the invariant (#104)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}
procedure Add#motion#7()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  var BTYPE#0: bv12;
  var TEX#0: bv9;
  var MOT#0: bv9;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (0 <= I[MOT]) && (I[MOT] <= R[MOT]) && (R[MOT] <= C[MOT]);
  assume (0 <= I[TEX]) && (I[TEX] <= R[TEX]) && (R[TEX] <= C[TEX]);
  assume (0 <= I[BTYPE]) && (I[BTYPE] <= R[BTYPE]) && (R[BTYPE] <= C[BTYPE]);
  assume (0 <= I[VID]) && (I[VID] <= R[VID]) && (R[VID] <= C[VID]);
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assume 1 <= (C[MOT] - R[MOT]);
  MOT#0 := M[MOT][R[MOT]];
  R[MOT] := R[MOT] + 1;
  assume !((((St == 1) || (St == 2)) || (St == 3)) && (count == 64));
  assume St == 2;
  count := count + 1;
  M[VID][C[VID]] := MOT#0;
  C[VID] := C[VID] + 1;
  assert {:msg "Add.cal(34.12): Action 'motion' at Add.cal(118.2) might not preserve the invariant (#105)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): Action 'motion' at Add.cal(118.2) might not preserve the invariant (#106)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): Action 'motion' at Add.cal(118.2) might not preserve the invariant (#107)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): Action 'motion' at Add.cal(118.2) might not preserve the invariant (#108)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): Action 'motion' at Add.cal(118.2) might not preserve the invariant (#109)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): Action 'motion' at Add.cal(118.2) might not preserve the invariant (#110)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): Action 'motion' at Add.cal(118.2) might not preserve the invariant (#111)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): Action 'motion' at Add.cal(118.2) might not preserve the invariant (#112)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): Action 'motion' at Add.cal(118.2) might not preserve the invariant (#113)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): Action 'motion' at Add.cal(118.2) might not preserve the invariant (#114)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): Action 'motion' at Add.cal(118.2) might not preserve the invariant (#115)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): Action 'motion' at Add.cal(118.2) might not preserve the invariant (#116)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): Action 'motion' at Add.cal(118.2) might not preserve the invariant (#117)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): Action 'motion' at Add.cal(118.2) might not preserve the invariant (#118)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): Action 'motion' at Add.cal(118.2) might not preserve the invariant (#119)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}
procedure Add#combine#8()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  var BTYPE#0: bv12;
  var TEX#0: bv9;
  var MOT#0: bv9;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (0 <= I[MOT]) && (I[MOT] <= R[MOT]) && (R[MOT] <= C[MOT]);
  assume (0 <= I[TEX]) && (I[TEX] <= R[TEX]) && (R[TEX] <= C[TEX]);
  assume (0 <= I[BTYPE]) && (I[BTYPE] <= R[BTYPE]) && (R[BTYPE] <= C[BTYPE]);
  assume (0 <= I[VID]) && (I[VID] <= R[VID]) && (R[VID] <= C[VID]);
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assume (1 <= (C[MOT] - R[MOT])) && (1 <= (C[TEX] - R[TEX]));
  MOT#0 := M[MOT][R[MOT]];
  R[MOT] := R[MOT] + 1;
  TEX#0 := M[TEX][R[TEX]];
  R[TEX] := R[TEX] + 1;
  assume !((((St == 1) || (St == 2)) || (St == 3)) && (count == 64));
  assume St == 3;
  count := count + 1;
  M[VID][C[VID]] := (if AT#BvSlt10(AT#BvAdd10(0bv1 ++ TEX#0, 0bv1 ++ MOT#0), 0bv10) then 0bv9 else (if AT#BvSgt10(AT#BvAdd10(0bv1 ++ TEX#0, 0bv1 ++ MOT#0), 255bv10) then 255bv9 else AT#BvAdd9(TEX#0, MOT#0)));
  C[VID] := C[VID] + 1;
  assert {:msg "Add.cal(34.12): Action 'combine' at Add.cal(125.2) might not preserve the invariant (#120)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): Action 'combine' at Add.cal(125.2) might not preserve the invariant (#121)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): Action 'combine' at Add.cal(125.2) might not preserve the invariant (#122)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): Action 'combine' at Add.cal(125.2) might not preserve the invariant (#123)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): Action 'combine' at Add.cal(125.2) might not preserve the invariant (#124)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): Action 'combine' at Add.cal(125.2) might not preserve the invariant (#125)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): Action 'combine' at Add.cal(125.2) might not preserve the invariant (#126)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): Action 'combine' at Add.cal(125.2) might not preserve the invariant (#127)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): Action 'combine' at Add.cal(125.2) might not preserve the invariant (#128)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): Action 'combine' at Add.cal(125.2) might not preserve the invariant (#129)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): Action 'combine' at Add.cal(125.2) might not preserve the invariant (#130)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): Action 'combine' at Add.cal(125.2) might not preserve the invariant (#131)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): Action 'combine' at Add.cal(125.2) might not preserve the invariant (#132)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): Action 'combine' at Add.cal(125.2) might not preserve the invariant (#133)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): Action 'combine' at Add.cal(125.2) might not preserve the invariant (#134)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}
procedure Add##GuardWD#9()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  var BTYPE#0: bv12;
  var TEX#0: bv9;
  var MOT#0: bv9;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assert {:msg "Add.cal(1.1): The actions 'texture' and 'cmd.motionOnly' of actor 'Add' might not have mutually exclusive guards (#135)"} !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[TEX] - R[TEX])) && (St == 1) && true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12));
  assert {:msg "Add.cal(1.1): The actions 'texture' and 'cmd.textureOnly' of actor 'Add' might not have mutually exclusive guards (#136)"} !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[TEX] - R[TEX])) && (St == 1) && true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(1.1): The actions 'texture' and 'motion' of actor 'Add' might not have mutually exclusive guards (#137)"} !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[TEX] - R[TEX])) && (St == 1) && true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (St == 2));
  assert {:msg "Add.cal(1.1): The actions 'texture' and 'cmd.other' of actor 'Add' might not have mutually exclusive guards (#138)"} !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[TEX] - R[TEX])) && (St == 1) && true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (((St == 0) || (St == 4)) || (St == 5)));
  assert {:msg "Add.cal(1.1): The actions 'texture' and 'combine' of actor 'Add' might not have mutually exclusive guards (#139)"} !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[TEX] - R[TEX])) && (St == 1) && true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (1 <= (C[TEX] - R[TEX])) && (St == 3));
  assert {:msg "Add.cal(1.1): The actions 'texture' and 'cmd.newVop' of actor 'Add' might not have mutually exclusive guards (#140)"} !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[TEX] - R[TEX])) && (St == 1) && true && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Add.cal(1.1): The actions 'texture' and 'done' of actor 'Add' might not have mutually exclusive guards (#141)"} !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[TEX] - R[TEX])) && (St == 1) && true && true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64));
  assert {:msg "Add.cal(1.1): The actions 'cmd.motionOnly' and 'cmd.textureOnly' of actor 'Add' might not have mutually exclusive guards (#142)"} !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12) && true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(1.1): The actions 'cmd.motionOnly' and 'motion' of actor 'Add' might not have mutually exclusive guards (#143)"} !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12) && true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (St == 2));
  assert {:msg "Add.cal(1.1): The actions 'cmd.motionOnly' and 'cmd.other' of actor 'Add' might not have mutually exclusive guards (#144)"} !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12) && true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (((St == 0) || (St == 4)) || (St == 5)));
  assert {:msg "Add.cal(1.1): The actions 'cmd.motionOnly' and 'combine' of actor 'Add' might not have mutually exclusive guards (#145)"} !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12) && true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (1 <= (C[TEX] - R[TEX])) && (St == 3));
  assert {:msg "Add.cal(1.1): The actions 'cmd.motionOnly' and 'cmd.newVop' of actor 'Add' might not have mutually exclusive guards (#146)"} !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12) && true && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Add.cal(1.1): The actions 'cmd.motionOnly' and 'done' of actor 'Add' might not have mutually exclusive guards (#147)"} !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12) && true && true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64));
  assert {:msg "Add.cal(1.1): The actions 'cmd.textureOnly' and 'motion' of actor 'Add' might not have mutually exclusive guards (#148)"} !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12) && true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (St == 2));
  assert {:msg "Add.cal(1.1): The actions 'cmd.textureOnly' and 'cmd.other' of actor 'Add' might not have mutually exclusive guards (#149)"} !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12) && true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (((St == 0) || (St == 4)) || (St == 5)));
  assert {:msg "Add.cal(1.1): The actions 'cmd.textureOnly' and 'combine' of actor 'Add' might not have mutually exclusive guards (#150)"} !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12) && true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (1 <= (C[TEX] - R[TEX])) && (St == 3));
  assert {:msg "Add.cal(1.1): The actions 'cmd.textureOnly' and 'cmd.newVop' of actor 'Add' might not have mutually exclusive guards (#151)"} !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12) && true && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Add.cal(1.1): The actions 'cmd.textureOnly' and 'done' of actor 'Add' might not have mutually exclusive guards (#152)"} !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12) && true && true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64));
  assert {:msg "Add.cal(1.1): The actions 'motion' and 'cmd.other' of actor 'Add' might not have mutually exclusive guards (#153)"} !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (St == 2) && true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (((St == 0) || (St == 4)) || (St == 5)));
  assert {:msg "Add.cal(1.1): The actions 'motion' and 'combine' of actor 'Add' might not have mutually exclusive guards (#154)"} !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (St == 2) && true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (1 <= (C[TEX] - R[TEX])) && (St == 3));
  assert {:msg "Add.cal(1.1): The actions 'motion' and 'cmd.newVop' of actor 'Add' might not have mutually exclusive guards (#155)"} !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (St == 2) && true && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Add.cal(1.1): The actions 'motion' and 'done' of actor 'Add' might not have mutually exclusive guards (#156)"} !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (St == 2) && true && true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64));
  assert {:msg "Add.cal(1.1): The actions 'cmd.other' and 'combine' of actor 'Add' might not have mutually exclusive guards (#157)"} !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (((St == 0) || (St == 4)) || (St == 5)) && true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (1 <= (C[TEX] - R[TEX])) && (St == 3));
  assert {:msg "Add.cal(1.1): The actions 'cmd.other' and 'cmd.newVop' of actor 'Add' might not have mutually exclusive guards (#158)"} !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (((St == 0) || (St == 4)) || (St == 5)) && true && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Add.cal(1.1): The actions 'cmd.other' and 'done' of actor 'Add' might not have mutually exclusive guards (#159)"} !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (((St == 0) || (St == 4)) || (St == 5)) && true && true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64));
  assert {:msg "Add.cal(1.1): The actions 'combine' and 'cmd.newVop' of actor 'Add' might not have mutually exclusive guards (#160)"} !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (1 <= (C[TEX] - R[TEX])) && (St == 3) && true && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12));
  assert {:msg "Add.cal(1.1): The actions 'combine' and 'done' of actor 'Add' might not have mutually exclusive guards (#161)"} !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (1 <= (C[TEX] - R[TEX])) && (St == 3) && true && true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64));
  assert {:msg "Add.cal(1.1): The actions 'cmd.newVop' and 'done' of actor 'Add' might not have mutually exclusive guards (#162)"} !(true && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12) && true && true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64));
}
procedure Add#contract#textureOnly#input#10()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (0 <= I[MOT]) && (I[MOT] <= R[MOT]) && (R[MOT] <= C[MOT]);
  assume (0 <= I[TEX]) && (I[TEX] <= R[TEX]) && (R[TEX] <= C[TEX]);
  assume (0 <= I[BTYPE]) && (I[BTYPE] <= R[BTYPE]) && (R[BTYPE] <= C[BTYPE]);
  assume (0 <= I[VID]) && (I[VID] <= R[VID]) && (R[VID] <= C[VID]);
  assume Mode[this#] == textureOnly;
  assume R[VID] == I[VID];
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assume (C[BTYPE] - I[BTYPE]) < 1;
  C[BTYPE] := C[BTYPE] + 1;
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12);
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12;
  assert {:msg "Add.cal(34.12): Invariant might be falsified by actor input (#163)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): Invariant might be falsified by actor input (#164)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): Invariant might be falsified by actor input (#165)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): Invariant might be falsified by actor input (#166)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): Invariant might be falsified by actor input (#167)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): Invariant might be falsified by actor input (#168)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): Invariant might be falsified by actor input (#169)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): Invariant might be falsified by actor input (#170)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): Invariant might be falsified by actor input (#171)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): Invariant might be falsified by actor input (#172)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): Invariant might be falsified by actor input (#173)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): Invariant might be falsified by actor input (#174)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): Invariant might be falsified by actor input (#175)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): Invariant might be falsified by actor input (#176)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): Invariant might be falsified by actor input (#177)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}
procedure Add#contract#textureOnly#input#11()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (0 <= I[MOT]) && (I[MOT] <= R[MOT]) && (R[MOT] <= C[MOT]);
  assume (0 <= I[TEX]) && (I[TEX] <= R[TEX]) && (R[TEX] <= C[TEX]);
  assume (0 <= I[BTYPE]) && (I[BTYPE] <= R[BTYPE]) && (R[BTYPE] <= C[BTYPE]);
  assume (0 <= I[VID]) && (I[VID] <= R[VID]) && (R[VID] <= C[VID]);
  assume Mode[this#] == textureOnly;
  assume R[VID] == I[VID];
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assume (C[TEX] - I[TEX]) < 64;
  C[TEX] := C[TEX] + 1;
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12);
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12;
  assert {:msg "Add.cal(34.12): Invariant might be falsified by actor input (#178)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): Invariant might be falsified by actor input (#179)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): Invariant might be falsified by actor input (#180)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): Invariant might be falsified by actor input (#181)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): Invariant might be falsified by actor input (#182)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): Invariant might be falsified by actor input (#183)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): Invariant might be falsified by actor input (#184)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): Invariant might be falsified by actor input (#185)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): Invariant might be falsified by actor input (#186)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): Invariant might be falsified by actor input (#187)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): Invariant might be falsified by actor input (#188)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): Invariant might be falsified by actor input (#189)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): Invariant might be falsified by actor input (#190)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): Invariant might be falsified by actor input (#191)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): Invariant might be falsified by actor input (#192)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}
procedure Add#contract#textureOnly#exit#12()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (0 <= I[MOT]) && (I[MOT] <= R[MOT]) && (R[MOT] <= C[MOT]);
  assume (0 <= I[TEX]) && (I[TEX] <= R[TEX]) && (R[TEX] <= C[TEX]);
  assume (0 <= I[BTYPE]) && (I[BTYPE] <= R[BTYPE]) && (R[BTYPE] <= C[BTYPE]);
  assume (0 <= I[VID]) && (I[VID] <= R[VID]) && (R[VID] <= C[VID]);
  assume Mode[this#] == textureOnly;
  assume R[VID] == I[VID];
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assume (C[MOT] - I[MOT]) == 0;
  assume (C[TEX] - I[TEX]) == 64;
  assume (C[BTYPE] - I[BTYPE]) == 1;
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12);
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12;
  assume !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[TEX] - R[TEX])) && (St == 1));
  assume !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12));
  assume !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12));
  assume !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (St == 2));
  assume !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (((St == 0) || (St == 4)) || (St == 5)));
  assume !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (1 <= (C[TEX] - R[TEX])) && (St == 3));
  assume !(true && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12));
  assume !(true && true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64));
  assert {:msg "Add.cal(13.2): The correct number of tokens might not be produced on output 'VID' with contract 'textureOnly' (#193)"} (C[VID] - I[VID]) == 64;
  R[VID] := R[VID] + 64;
  I := R;
  assert {:msg "Add.cal(34.12): The actor might not preserve the invariant with contract 'textureOnly' at Add.cal(13.2) (#194)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): The actor might not preserve the invariant with contract 'textureOnly' at Add.cal(13.2) (#195)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): The actor might not preserve the invariant with contract 'textureOnly' at Add.cal(13.2) (#196)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): The actor might not preserve the invariant with contract 'textureOnly' at Add.cal(13.2) (#197)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): The actor might not preserve the invariant with contract 'textureOnly' at Add.cal(13.2) (#198)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): The actor might not preserve the invariant with contract 'textureOnly' at Add.cal(13.2) (#199)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): The actor might not preserve the invariant with contract 'textureOnly' at Add.cal(13.2) (#200)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): The actor might not preserve the invariant with contract 'textureOnly' at Add.cal(13.2) (#201)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): The actor might not preserve the invariant with contract 'textureOnly' at Add.cal(13.2) (#202)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): The actor might not preserve the invariant with contract 'textureOnly' at Add.cal(13.2) (#203)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): The actor might not preserve the invariant with contract 'textureOnly' at Add.cal(13.2) (#204)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): The actor might not preserve the invariant with contract 'textureOnly' at Add.cal(13.2) (#205)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): The actor might not preserve the invariant with contract 'textureOnly' at Add.cal(13.2) (#206)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): The actor might not preserve the invariant with contract 'textureOnly' at Add.cal(13.2) (#207)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): The actor might not preserve the invariant with contract 'textureOnly' at Add.cal(13.2) (#208)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}
procedure Add#contract#motionOnly#input#13()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (0 <= I[MOT]) && (I[MOT] <= R[MOT]) && (R[MOT] <= C[MOT]);
  assume (0 <= I[TEX]) && (I[TEX] <= R[TEX]) && (R[TEX] <= C[TEX]);
  assume (0 <= I[BTYPE]) && (I[BTYPE] <= R[BTYPE]) && (R[BTYPE] <= C[BTYPE]);
  assume (0 <= I[VID]) && (I[VID] <= R[VID]) && (R[VID] <= C[VID]);
  assume Mode[this#] == motionOnly;
  assume R[VID] == I[VID];
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assume (C[BTYPE] - I[BTYPE]) < 1;
  C[BTYPE] := C[BTYPE] + 1;
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12);
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12;
  assert {:msg "Add.cal(34.12): Invariant might be falsified by actor input (#209)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): Invariant might be falsified by actor input (#210)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): Invariant might be falsified by actor input (#211)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): Invariant might be falsified by actor input (#212)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): Invariant might be falsified by actor input (#213)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): Invariant might be falsified by actor input (#214)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): Invariant might be falsified by actor input (#215)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): Invariant might be falsified by actor input (#216)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): Invariant might be falsified by actor input (#217)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): Invariant might be falsified by actor input (#218)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): Invariant might be falsified by actor input (#219)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): Invariant might be falsified by actor input (#220)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): Invariant might be falsified by actor input (#221)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): Invariant might be falsified by actor input (#222)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): Invariant might be falsified by actor input (#223)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}
procedure Add#contract#motionOnly#input#14()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (0 <= I[MOT]) && (I[MOT] <= R[MOT]) && (R[MOT] <= C[MOT]);
  assume (0 <= I[TEX]) && (I[TEX] <= R[TEX]) && (R[TEX] <= C[TEX]);
  assume (0 <= I[BTYPE]) && (I[BTYPE] <= R[BTYPE]) && (R[BTYPE] <= C[BTYPE]);
  assume (0 <= I[VID]) && (I[VID] <= R[VID]) && (R[VID] <= C[VID]);
  assume Mode[this#] == motionOnly;
  assume R[VID] == I[VID];
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assume (C[MOT] - I[MOT]) < 64;
  C[MOT] := C[MOT] + 1;
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12);
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12;
  assert {:msg "Add.cal(34.12): Invariant might be falsified by actor input (#224)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): Invariant might be falsified by actor input (#225)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): Invariant might be falsified by actor input (#226)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): Invariant might be falsified by actor input (#227)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): Invariant might be falsified by actor input (#228)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): Invariant might be falsified by actor input (#229)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): Invariant might be falsified by actor input (#230)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): Invariant might be falsified by actor input (#231)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): Invariant might be falsified by actor input (#232)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): Invariant might be falsified by actor input (#233)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): Invariant might be falsified by actor input (#234)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): Invariant might be falsified by actor input (#235)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): Invariant might be falsified by actor input (#236)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): Invariant might be falsified by actor input (#237)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): Invariant might be falsified by actor input (#238)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}
procedure Add#contract#motionOnly#exit#15()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (0 <= I[MOT]) && (I[MOT] <= R[MOT]) && (R[MOT] <= C[MOT]);
  assume (0 <= I[TEX]) && (I[TEX] <= R[TEX]) && (R[TEX] <= C[TEX]);
  assume (0 <= I[BTYPE]) && (I[BTYPE] <= R[BTYPE]) && (R[BTYPE] <= C[BTYPE]);
  assume (0 <= I[VID]) && (I[VID] <= R[VID]) && (R[VID] <= C[VID]);
  assume Mode[this#] == motionOnly;
  assume R[VID] == I[VID];
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assume (C[MOT] - I[MOT]) == 64;
  assume (C[TEX] - I[TEX]) == 0;
  assume (C[BTYPE] - I[BTYPE]) == 1;
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12);
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12;
  assume !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[TEX] - R[TEX])) && (St == 1));
  assume !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12));
  assume !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12));
  assume !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (St == 2));
  assume !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (((St == 0) || (St == 4)) || (St == 5)));
  assume !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (1 <= (C[TEX] - R[TEX])) && (St == 3));
  assume !(true && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12));
  assume !(true && true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64));
  assert {:msg "Add.cal(20.2): The correct number of tokens might not be produced on output 'VID' with contract 'motionOnly' (#239)"} (C[VID] - I[VID]) == 64;
  R[VID] := R[VID] + 64;
  I := R;
  assert {:msg "Add.cal(34.12): The actor might not preserve the invariant with contract 'motionOnly' at Add.cal(20.2) (#240)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): The actor might not preserve the invariant with contract 'motionOnly' at Add.cal(20.2) (#241)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): The actor might not preserve the invariant with contract 'motionOnly' at Add.cal(20.2) (#242)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): The actor might not preserve the invariant with contract 'motionOnly' at Add.cal(20.2) (#243)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): The actor might not preserve the invariant with contract 'motionOnly' at Add.cal(20.2) (#244)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): The actor might not preserve the invariant with contract 'motionOnly' at Add.cal(20.2) (#245)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): The actor might not preserve the invariant with contract 'motionOnly' at Add.cal(20.2) (#246)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): The actor might not preserve the invariant with contract 'motionOnly' at Add.cal(20.2) (#247)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): The actor might not preserve the invariant with contract 'motionOnly' at Add.cal(20.2) (#248)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): The actor might not preserve the invariant with contract 'motionOnly' at Add.cal(20.2) (#249)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): The actor might not preserve the invariant with contract 'motionOnly' at Add.cal(20.2) (#250)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): The actor might not preserve the invariant with contract 'motionOnly' at Add.cal(20.2) (#251)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): The actor might not preserve the invariant with contract 'motionOnly' at Add.cal(20.2) (#252)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): The actor might not preserve the invariant with contract 'motionOnly' at Add.cal(20.2) (#253)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): The actor might not preserve the invariant with contract 'motionOnly' at Add.cal(20.2) (#254)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}
procedure Add#contract#combine#input#16()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (0 <= I[MOT]) && (I[MOT] <= R[MOT]) && (R[MOT] <= C[MOT]);
  assume (0 <= I[TEX]) && (I[TEX] <= R[TEX]) && (R[TEX] <= C[TEX]);
  assume (0 <= I[BTYPE]) && (I[BTYPE] <= R[BTYPE]) && (R[BTYPE] <= C[BTYPE]);
  assume (0 <= I[VID]) && (I[VID] <= R[VID]) && (R[VID] <= C[VID]);
  assume Mode[this#] == combine;
  assume R[VID] == I[VID];
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assume (C[BTYPE] - I[BTYPE]) < 1;
  C[BTYPE] := C[BTYPE] + 1;
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12);
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(34.12): Invariant might be falsified by actor input (#255)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): Invariant might be falsified by actor input (#256)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): Invariant might be falsified by actor input (#257)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): Invariant might be falsified by actor input (#258)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): Invariant might be falsified by actor input (#259)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): Invariant might be falsified by actor input (#260)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): Invariant might be falsified by actor input (#261)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): Invariant might be falsified by actor input (#262)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): Invariant might be falsified by actor input (#263)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): Invariant might be falsified by actor input (#264)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): Invariant might be falsified by actor input (#265)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): Invariant might be falsified by actor input (#266)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): Invariant might be falsified by actor input (#267)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): Invariant might be falsified by actor input (#268)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): Invariant might be falsified by actor input (#269)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}
procedure Add#contract#combine#input#17()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (0 <= I[MOT]) && (I[MOT] <= R[MOT]) && (R[MOT] <= C[MOT]);
  assume (0 <= I[TEX]) && (I[TEX] <= R[TEX]) && (R[TEX] <= C[TEX]);
  assume (0 <= I[BTYPE]) && (I[BTYPE] <= R[BTYPE]) && (R[BTYPE] <= C[BTYPE]);
  assume (0 <= I[VID]) && (I[VID] <= R[VID]) && (R[VID] <= C[VID]);
  assume Mode[this#] == combine;
  assume R[VID] == I[VID];
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assume (C[MOT] - I[MOT]) < 64;
  C[MOT] := C[MOT] + 1;
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12);
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(34.12): Invariant might be falsified by actor input (#270)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): Invariant might be falsified by actor input (#271)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): Invariant might be falsified by actor input (#272)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): Invariant might be falsified by actor input (#273)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): Invariant might be falsified by actor input (#274)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): Invariant might be falsified by actor input (#275)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): Invariant might be falsified by actor input (#276)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): Invariant might be falsified by actor input (#277)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): Invariant might be falsified by actor input (#278)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): Invariant might be falsified by actor input (#279)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): Invariant might be falsified by actor input (#280)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): Invariant might be falsified by actor input (#281)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): Invariant might be falsified by actor input (#282)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): Invariant might be falsified by actor input (#283)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): Invariant might be falsified by actor input (#284)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}
procedure Add#contract#combine#input#18()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (0 <= I[MOT]) && (I[MOT] <= R[MOT]) && (R[MOT] <= C[MOT]);
  assume (0 <= I[TEX]) && (I[TEX] <= R[TEX]) && (R[TEX] <= C[TEX]);
  assume (0 <= I[BTYPE]) && (I[BTYPE] <= R[BTYPE]) && (R[BTYPE] <= C[BTYPE]);
  assume (0 <= I[VID]) && (I[VID] <= R[VID]) && (R[VID] <= C[VID]);
  assume Mode[this#] == combine;
  assume R[VID] == I[VID];
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assume (C[TEX] - I[TEX]) < 64;
  C[TEX] := C[TEX] + 1;
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12);
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(34.12): Invariant might be falsified by actor input (#285)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): Invariant might be falsified by actor input (#286)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): Invariant might be falsified by actor input (#287)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): Invariant might be falsified by actor input (#288)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): Invariant might be falsified by actor input (#289)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): Invariant might be falsified by actor input (#290)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): Invariant might be falsified by actor input (#291)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): Invariant might be falsified by actor input (#292)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): Invariant might be falsified by actor input (#293)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): Invariant might be falsified by actor input (#294)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): Invariant might be falsified by actor input (#295)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): Invariant might be falsified by actor input (#296)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): Invariant might be falsified by actor input (#297)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): Invariant might be falsified by actor input (#298)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): Invariant might be falsified by actor input (#299)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}
procedure Add#contract#combine#exit#19()
  modifies C, R, M, I, H, I#sub;
{
  var MOT: Chan (bv9);
  var TEX: Chan (bv9);
  var BTYPE: Chan (bv12);
  var VID: Chan (bv9);
  var textureOnly: int;
  var motionOnly: int;
  var combine: int;
  var NEWVOP: bv12;
  var INTRA: bv12;
  var ACCODED: bv12;
  var count: int;
  var St: int;
  assume (MOT != TEX) && (MOT != VID) && (TEX != VID);
  assume textureOnly == 0;
  assume motionOnly == 1;
  assume combine == 2;
  assume ((Mode[this#] == textureOnly) || (Mode[this#] == motionOnly)) || (Mode[this#] == combine);
  assume NEWVOP == 2048bv12;
  assume INTRA == 1024bv12;
  assume ACCODED == 2bv12;
  assume (0 <= I[MOT]) && (I[MOT] <= R[MOT]) && (R[MOT] <= C[MOT]);
  assume (0 <= I[TEX]) && (I[TEX] <= R[TEX]) && (R[TEX] <= C[TEX]);
  assume (0 <= I[BTYPE]) && (I[BTYPE] <= R[BTYPE]) && (R[BTYPE] <= C[BTYPE]);
  assume (0 <= I[VID]) && (I[VID] <= R[VID]) && (R[VID] <= C[VID]);
  assume Mode[this#] == combine;
  assume R[VID] == I[VID];
  assume (C[BTYPE] - I[BTYPE]) <= 1;
  assume (0 <= count) && (count <= 64);
  assume (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assume ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assume (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assume (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assume (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
  assume (((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)) && (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12))) || ((!(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12)));
  assume ((((C[MOT] - I[MOT]) == 0) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1)) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) == 0) && ((C[BTYPE] - I[BTYPE]) <= 1))) || (((C[MOT] - I[MOT]) <= 64) && ((C[TEX] - I[TEX]) <= 64) && ((C[BTYPE] - I[BTYPE]) <= 1));
  assume (C[MOT] - I[MOT]) == 64;
  assume (C[TEX] - I[TEX]) == 64;
  assume (C[BTYPE] - I[BTYPE]) == 1;
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], NEWVOP) != 0bv12);
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assume !(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assume !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[TEX] - R[TEX])) && (St == 1));
  assume !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12));
  assume !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12));
  assume !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (St == 2));
  assume !(true && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], ACCODED) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], INTRA) != 0bv12))) && (!((1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12))) && (1 <= (C[BTYPE] - R[BTYPE])) && (((St == 0) || (St == 4)) || (St == 5)));
  assume !(true && (!(true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64))) && (1 <= (C[MOT] - R[MOT])) && (1 <= (C[TEX] - R[TEX])) && (St == 3));
  assume !(true && (1 <= (C[BTYPE] - R[BTYPE])) && (St == 0) && (AT#BvAnd12(M[BTYPE][R[BTYPE]], NEWVOP) != 0bv12));
  assume !(true && true && (((St == 1) || (St == 2)) || (St == 3)) && (count == 64));
  assert {:msg "Add.cal(27.2): The correct number of tokens might not be produced on output 'VID' with contract 'combine' (#300)"} (C[VID] - I[VID]) == 64;
  R[VID] := R[VID] + 64;
  I := R;
  assert {:msg "Add.cal(34.12): The actor might not preserve the invariant with contract 'combine' at Add.cal(27.2) (#301)"} (C[BTYPE] - I[BTYPE]) <= 1;
  assert {:msg "Add.cal(35.12): The actor might not preserve the invariant with contract 'combine' at Add.cal(27.2) (#302)"} (0 <= count) && (count <= 64);
  assert {:msg "Add.cal(37.12): The actor might not preserve the invariant with contract 'combine' at Add.cal(27.2) (#303)"} (Mode[this#] == textureOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12);
  assert {:msg "Add.cal(38.12): The actor might not preserve the invariant with contract 'combine' at Add.cal(27.2) (#304)"} (Mode[this#] == motionOnly) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12);
  assert {:msg "Add.cal(39.12): The actor might not preserve the invariant with contract 'combine' at Add.cal(27.2) (#305)"} (Mode[this#] == combine) && ((C[BTYPE] - I[BTYPE]) > 0) ==> (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], ACCODED) != 0bv12)) && (!(AT#BvAnd12(M[BTYPE][I[BTYPE]], INTRA) != 0bv12));
  assert {:msg "Add.cal(42.12): The actor might not preserve the invariant with contract 'combine' at Add.cal(27.2) (#306)"} ((R[BTYPE] - I[BTYPE]) == 0) ==> (St == 0) && (count == 0) && ((R[MOT] - I[MOT]) == 0) && ((R[TEX] - I[TEX]) == 0) && ((C[VID] - I[VID]) == 0);
  assert {:msg "Add.cal(44.12): The actor might not preserve the invariant with contract 'combine' at Add.cal(27.2) (#307)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 1) ==> ((R[TEX] - I[TEX]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(45.12): The actor might not preserve the invariant with contract 'combine' at Add.cal(27.2) (#308)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 2) ==> ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(46.12): The actor might not preserve the invariant with contract 'combine' at Add.cal(27.2) (#309)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 3) ==> ((R[TEX] - I[TEX]) == count) && ((R[MOT] - I[MOT]) == count) && ((C[VID] - I[VID]) == count);
  assert {:msg "Add.cal(48.12): The actor might not preserve the invariant with contract 'combine' at Add.cal(27.2) (#310)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == textureOnly) && (St == 0) ==> ((R[TEX] - I[TEX]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(49.12): The actor might not preserve the invariant with contract 'combine' at Add.cal(27.2) (#311)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == motionOnly) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(50.12): The actor might not preserve the invariant with contract 'combine' at Add.cal(27.2) (#312)"} ((R[BTYPE] - I[BTYPE]) == 1) && (Mode[this#] == combine) && (St == 0) ==> ((R[MOT] - I[MOT]) == 64) && ((C[VID] - I[VID]) == 64) && (count == 0);
  assert {:msg "Add.cal(52.12): The actor might not preserve the invariant with contract 'combine' at Add.cal(27.2) (#313)"} (Mode[this#] == textureOnly) ==> ((St == 0) || (St == 1));
  assert {:msg "Add.cal(53.12): The actor might not preserve the invariant with contract 'combine' at Add.cal(27.2) (#314)"} (Mode[this#] == motionOnly) ==> ((St == 0) || (St == 2));
  assert {:msg "Add.cal(54.12): The actor might not preserve the invariant with contract 'combine' at Add.cal(27.2) (#315)"} (Mode[this#] == combine) ==> ((St == 0) || (St == 3));
}

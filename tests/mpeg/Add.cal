actor Add()
	int(size=9) MOT, int(size=9) TEX, int(size=12) BTYPE
		==>
	int(size=9) VID :
	
	int(size=12) NEWVOP = int2bv(2048,12);
	int(size=12) INTRA = int2bv(1024,12);
	int(size=12) ACCODED = int2bv(2,12);
	
	int count;
	int St;
	
	textureOnly:
	contract BTYPE:1, TEX:64 ==> VID:64
	  requires !((BTYPE[@] & NEWVOP) != 0x000)
	  requires !((BTYPE[@] & ACCODED) != 0x000)
	  requires (BTYPE[@] & INTRA) != 0x000
	end
	
	motionOnly:
	contract BTYPE:1, MOT:64 ==> VID:64 
	  requires !((BTYPE[@] & NEWVOP) != 0x000)
	  requires !((BTYPE[@] & INTRA) != 0x000)
	  requires (BTYPE[@] & ACCODED) != 0x000
	end
	
	combine:
	contract BTYPE:1, MOT:64, TEX:64 ==> VID:64 
	  requires !((BTYPE[@] & NEWVOP) != 0x000)
	  requires !((BTYPE[@] & ACCODED) != 0x000)
	  requires !((BTYPE[@] & INTRA) != 0x000)
	end
	
	invariant tot@(BTYPE) <= 1
	invariant 0 <= count && count <= 64
	
	invariant mode(this) = textureOnly && tot@(BTYPE) > 0 ==> (BTYPE[@] & INTRA) != 0x000
	invariant mode(this) = motionOnly && tot@(BTYPE) > 0 ==>  (BTYPE[@] & ACCODED) != 0x000
	invariant mode(this) = combine && tot@(BTYPE) > 0 ==> 
		!((BTYPE[@] & ACCODED) != 0x000) && !((BTYPE[@] & INTRA) != 0x000)
	
	invariant rd@(BTYPE) = 0 ==> St = 0 && count = 0 && rd@(MOT) = 0 && rd@(TEX) = 0 && tot@(VID) = 0
	
	invariant rd@(BTYPE) = 1 && mode(this) = textureOnly && St = 1 ==> rd@(TEX) = count && tot@(VID) = count
	invariant rd@(BTYPE) = 1 && mode(this) = motionOnly && St = 2 ==> rd@(MOT) = count && tot@(VID) = count
	invariant rd@(BTYPE) = 1 && mode(this) = combine && St = 3 ==> rd@(TEX) = count && rd@(MOT) = count && tot@(VID) = count
	
	invariant rd@(BTYPE) = 1 && mode(this) = textureOnly && St = 0 ==> rd@(TEX) = 64 && tot@(VID) = 64 && count = 0
	invariant rd@(BTYPE) = 1 && mode(this) = motionOnly && St = 0 ==> rd@(MOT) = 64 && tot@(VID) = 64 && count = 0
	invariant rd@(BTYPE) = 1 && mode(this) = combine && St = 0 ==> rd@(MOT) = 64 && tot@(VID) = 64 && count = 0
	
	invariant mode(this) = textureOnly ==> St = 0 || St = 1
	invariant mode(this) = motionOnly ==>  St = 0 || St = 2
	invariant mode(this) = combine ==>     St = 0 || St = 3
	
	initialize ==>
	do
		count := 0;
		St := 0;
	end

	// Ignore new VOP command
	cmd.newVop: action BTYPE:[ cmd ] ==>
	guard
		St = 0 && 
		(cmd & NEWVOP) != 0x000
	do
		St := 4;
	end

	// Pure texture
	cmd.textureOnly: action BTYPE:[ cmd ] ==>
	guard
		St = 0 && 
		(cmd & INTRA) != 0x000
	do
		St := 1;
	end

	// Pure motion
	cmd.motionOnly: action BTYPE:[ cmd ] ==>
	guard
		St = 0 && 
		(cmd & ACCODED) != 0x000
	do
		St := 2;
	end

	// Mixed texture and motion
	// (Also used to skip vop w,h)
	cmd.other: action BTYPE:[ cmd ] ==>
	guard
		St = 0 || St = 4 || St = 5
	do
		St := 
			if St = 0 then 3
			else 
				if St = 4 then 5
				else 0 end end;
	end

	done: action ==>
	guard
		(St = 1 || St = 2 || St = 3) &&
		count = 64
	do
		count := 0;
		St := 0;
	end

	texture: action TEX:[ tex ] ==> VID:[ tex ]
	guard
		St = 1
	do
		count := count + 1;
	end

	motion: action MOT:[ mot ] ==> VID:[ mot ]
	guard
		St = 2
	do
		count := count + 1;
	end

	combine: action MOT:[ mot ], TEX:[ tex ] ==> VID:[ 
	    if bvconcat(int2bv(0,1),tex) + bvconcat(int2bv(0,1),mot) < int2bv(0,10) then
			int2bv(0,9)
		else
			if bvconcat(int2bv(0,1),tex) + bvconcat(int2bv(0,1),mot) > int2bv(255,10) then
				int2bv(255,9)
			else
				tex+mot
			end
		end]
	guard
		St = 3
	do
		count := count + 1;
	end

/*
	schedule fsm cmd :
		cmd (cmd.newVop) --> skipw;
		cmd (cmd.textureOnly) --> texture;
		cmd (cmd.motionOnly) --> motion;
		cmd (cmd.other) --> combine;

		texture (done) --> cmd;
		texture (texture) --> texture;

		motion (done) --> cmd;
		motion (motion) --> motion;

		combine (done) --> cmd;
		combine (combine) --> combine;

		skipw (cmd.other) --> skiph;
		skiph (cmd.other) --> cmd;
	end
*/

	priority
		cmd.newVop > cmd.textureOnly;
		cmd.newVop > cmd.motionOnly;
		cmd.newVop > cmd.other;
		cmd.textureOnly > cmd.motionOnly;
		cmd.textureOnly > cmd.other;
		cmd.motionOnly > cmd.other;
		done > combine;
		done > texture;
		done > motion;
	end

end

@sdf
actor Rep int in ==> int out :
  action in:[i] ==> out:[i] end
end

actor Jetson int in ==> int out :
  action in:[i] ==> out:[i] end
  action in:[i] ==> end
end

@sdf
actor Split int in ==> int out1, int out2 :
  action in:[i] ==> out1:[i], out2:[i] end
end

actor Merge int in1, int in2 ==> int out :
  primary: action in1:[i], in2:[j] ==> out:[j] 
    guard i = j
  end
  backup: action in1:[i] ==> out:[i] end
  discard: action in2:[i] ==> end
  priority primary > backup > discard end
end

network Net int in ==> int out :
  
  action in:[x1,x2,x3] ==> out:[y1,y2,y3]
    requires x1 = 0 && x2 = 1 && x3 = 2
  end

  chinvariant tot(b) = rd(a)
  chinvariant tot(c) = rd(a)
  chinvariant tot(d) = rd(c)
  
  chinvariant tot(e) <= rd(b)
  
  chinvariant tot(f) = rd(d)
  
  chinvariant (forall int i :: 1 <= i && i < tot(a) ==> a[i] = a[i-1]+1)
  chinvariant (forall int i :: 1 <= i && i < tot(b) ==> b[i] = b[i-1]+1)
  chinvariant (forall int i :: 1 <= i && i < tot(c) ==> c[i] = c[i-1]+1)
  chinvariant (forall int i :: 1 <= i && i < tot(d) ==> d[i] = d[i-1]+1)
  
  chinvariant tot(e) <= rd(b)
  chinvariant (forall int i :: 0 <= i && i < tot(e) ==> (exists int j :: 0 <= j && j < rd(b) && e[i] = b[j]))
  
  chinvariant (forall int i :: 1 <= i && i < tot(e) ==> e[i] > e[i-1]+1)
  
  entities
    spl = Split();
    rep = Rep();
    jet = Jetson();
    mrg = Merge();
  end
  
  structure
    a: in --> spl.in;
    b: spl.out2 --> jet.in;
    c: spl.out1 --> rep.in;
    d: rep.out --> mrg.in1;
    e: jet.out --> mrg.in2;
    f: mrg.out --> out;
  end

end
type Int(int i)

actor Rep Int in ==> Int out :
  action in:[i] ==> out:[i] end
end

actor Split int in ==> Int out1, Int out2 :
  invariant c = tot(out1)
  stream invariant rd(in) = tot(out1)
  stream invariant tot(out1) = tot(out2)
  stream invariant (forall int i :: 0 <= i && i < tot(out1) ==> out1[i].sqn = i)
  stream invariant (forall int i :: 0 <= i && i < tot(out1) ==> out1[i].sqn = out2[i].sqn)
  Int y;
  int c;
  action in:[i] ==> out1:[y], out2:[y] 
    do 
      y.sqn := c;
      c := c+1;
  end
  
  initialize ==>
    do c := 0;
  end
end

actor Adjudicator Int x1, Int x2 ==> Int y :

  stream invariant tot(y) = rd(x2)
  stream invariant rd(x1) <= rd(x2)
  
  invariant rd(x2) = c
  stream invariant (forall int i :: 0 <= i && i < rd(x2) ==> x2[i].sqn = i) 
  stream invariant (forall int i :: 0 <= i && i < tot(y) ==> y[i].sqn = i)
      
  int c;

  normal: action x1:[i], x2:[j] ==> y:[i]
    guard i.sqn = j.sqn && i.sqn = c
    do c := c+1;
  end
  
  timeout: action x2:[j] ==> y:[j] 
    guard j.sqn = c
    do c := c+1;
  end
  
  readoff: action x1:[i] ==>
    guard i.sqn < c
    requires rd(x1) < rd(x2)
  end
  
  initialize ==>
    do c := 0;
  end
  
  priority 
    readoff > normal;
    readoff > timeout;
    timeout > normal
  end
  
end

network Net int in ==> Int out :

  action in:1 ==> out:1 end

  chinvariant @(f) = @(d)
  chinvariant @(f) = @(e)
  
  entities
    spl = Split();
    pri = Rep();
    sec = Rep();
    adj = Adjudicator();
  end
  
  structure
    a: in --> spl.in;
    b: spl.out1 --> pri.in;
    c: spl.out2 --> sec.in;
    d: pri.out --> adj.x1;
    e: sec.out --> adj.x2;
    f: adj.y --> out;
  end

end
actor Rep int in ==> int out :
  action in:[i] ==> out:[i] end
end

actor Split int in ==> int out1, int out2 :
  action in:[i] ==> out1:[i], out2:[i] end
end


actor Adjudicator int x1, int x2 ==> int y :

  stream invariant tot(y) = rd(x2)
  invariant rd(x2) = c
  //stream invariant tot(y) > 0 ==> y[last] = rd(x2)
  
  int c;

  normal: primary action x1:[i], x2:[j] ==> y:[i]
    guard sqn(i) = sqn(j) && sqn(i) = c
    do c := c+1;
  end
  
  timeout: error action x2:[j] ==> y:[j] 
    do c := c+1;
  end
  
  readoff: recovery action x1:[i] ==>
    guard sqn(i) < c
  end
  
  initialize ==>
    do c := 0;
  end
  
end

network Net int in ==> int out :

  action in:1 ==> out:1 end

  chinvariant @(g) = @(d)
  chinvariant @(g) = @(e)
  
  entities
    spl = Split();
    pri = Rep();
    sec = Rep();
    adj = Adjudicator();
  end
  
  structure
    a: in --> spl.in;
    b: spl.out1 --> pri.in;
    c: spl.out2 --> sec.in;
    d: pri.out --> adj.x1;
    e: sec.out --> adj.x2;
    //f: adj.c_out --> adj.c_in;
    g: adj.y --> out;
  end

end
actor F int in, bool f ==> int out :
  n: action in:[i] ==> out:[i] end
  fail1: action in:[i], f:[t] ==> end
  priority fail1 > n end
end

actor Split int in, int fb ==> int out1, int out2, bool fail1, bool fail2  :
  action in:[i], fb:[t] ==> out1:[i], out2:[i], fail1:[true] end
  action in:[i], fb:[t] ==> out1:[i], out2:[i], fail2:[true] end
end

actor Merge int in1, int in2, int s_in ==> int out, int s_out, int fb :
    
  read1: action in1:[i], s_in:[s] ==> out:[i], s_out:[s+1], fb:[1]
    guard s = i
  end
  read2: action in2:[i], s_in:[s] ==> out:[i], s_out:[s+1], fb:[1] 
    guard s = i
  end
  discard1: action in1:[i], s_in:[s] ==> s_out:[s]
    guard s > i
  end
  discard2: action in2:[i], s_in:[s] ==> s_out:[s]
    guard s > i
  end
end

network Net int in ==> int out :
  
  free invariant tokens(m,1)
  free invariant next(m) = 0
  
  invariant tokens(n,1)
  
  chinvariant rd(a) = tot(b)
  chinvariant rd(a) = tot(c)
  
  chinvariant tot(a) = 2
  chinvariant rd(a) <= 2
  chinvariant tot(g)+tot(h) <= rd(a) // Maximum one failed actor per input token
  chinvariant urd(g)+urd(h) <= 1
  chinvariant urd(b) >= urd(g) // If there are unread fail tokens, there must be unread data tokens also
  chinvariant urd(c) >= urd(h) // If there are unread fail tokens, there must be unread data tokens also
  
  chinvariant (forall int i :: 0 <= i && i < tot(a) ==> a[i] = i)
  chinvariant (forall int i :: 0 <= i && i < rd(a) ==> b[i] = a[i] && c[i] = a[i])
  
  chinvariant tot(d) <= rd(b)
  chinvariant tot(e) <= rd(c)
  chinvariant rd(b) = tot(d)+rd(g)
  chinvariant rd(c) = tot(e)+rd(h)
  
  chinvariant rd(b)+rd(c) = 2 ==> tot(d)+tot(e) >= 1
  chinvariant tot(d) > 0 ==> d[0] = 0
  chinvariant tot(e) > 0 ==> e[0] = 0
  
  chinvariant urd(m) = 1
  chinvariant tot(f) = next(m)
  
  chinvariant (forall int i :: 0 <= i && i < rd(d) ==> d[i] < next(m))
  chinvariant (forall int i :: 0 <= i && i < rd(e) ==> e[i] < next(m))
  
  chinvariant (forall int i :: 0 <= i && i < tot(f) ==> f[i] = i)
  
  chinvariant tot(n) = tot(f)+1
  chinvariant rd(n) = rd(a)
    
  action in:[x1,x2] ==> out:[y1,y2]
    requires x1 = 0 && x2 = 1
    ensures y1 = 0 && y2 = 1
  end
  
  entities
    spl = Split();
    f1 = F();
    f2 = F();
    mrg = Merge();
  end
  
  structure
    a: in --> spl.in;
    b: spl.out1 --> f1.in;
    c: spl.out2 --> f2.in;
    d: f1.out --> mrg.in1;
    e: f2.out --> mrg.in2;
    f: mrg.out --> out;
    g: spl.fail1 --> f1.f;
    h: spl.fail2 --> f2.f;
    m: mrg.s_out --> mrg.s_in;
    n: mrg.fb --> spl.fb;
  end

end